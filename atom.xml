<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://fantaixi.github.io</id>
    <title>饭太稀</title>
    <updated>2020-05-06T10:47:46.180Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://fantaixi.github.io"/>
    <link rel="self" href="https://fantaixi.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://fantaixi.github.io/images/avatar.png</logo>
    <icon>https://fantaixi.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 饭太稀</rights>
    <entry>
        <title type="html"><![CDATA[10 面向对象-下]]></title>
        <id>https://fantaixi.github.io/post/10-mian-xiang-dui-xiang-xia/</id>
        <link href="https://fantaixi.github.io/post/10-mian-xiang-dui-xiang-xia/">
        </link>
        <updated>2020-05-06T10:12:36.000Z</updated>
        <content type="html"><![CDATA[<p>一、关键字static<br>
static:静态的<br>
1.可以用来修饰的结构：主要用来修饰类的内部结构<br>
属性、方法、代码块、内部类<br>
2.static修饰属性：静态变量（或类变量）<br>
2.1 属性，是否使用static修饰，又分为：静态属性  vs 非静态属性(实例变量)</p>
<ul>
<li>
<pre><code>    实例变量：我们创建了类的多个对象，每个对象都独立的拥一套类中的非静态属性。当修改其中一个对象中的非静态属性时，不会导致其他对象中同样的属性值的修改。
</code></pre>
</li>
<li>
<pre><code>      静态变量：我们创建了类的多个对象，多个对象共享同一个静态变量。当通过某一个对象修改静态变量时，会导致其他对象调用此静态变量时，是修改过了的。
</code></pre>
</li>
<li>
<pre><code> 2.2 static修饰属性的其他说明：
</code></pre>
</li>
<li>
<pre><code>  ① 静态变量随着类的加载而加载。可以通过&quot;类.静态变量&quot;的方式进行调用
</code></pre>
</li>
<li>
<pre><code>     ② 静态变量的加载要早于对象的创建。
</code></pre>
</li>
<li>
<pre><code>     ③ 由于类只会加载一次，则静态变量在内存中也只会存在一份：存在方法区的静态域中。
</code></pre>
</li>
<li></li>
<li>
<pre><code>     ④		类变量	实例变量
</code></pre>
</li>
<li>
<pre><code>     类		yes		no
</code></pre>
</li>
<li>
<pre><code>     对象	yes		yes
</code></pre>
</li>
<li></li>
<li>
<pre><code>    2.3 静态属性举例：System.out; Math.PI;
</code></pre>
</li>
</ul>
<p>3.静态变量内存解析：<br>
<img src="https://fantaixi.github.io/post-images/1588760221392.png" alt="" loading="lazy"><br>
4.static修饰方法：静态方法、类方法<br>
① 随着类的加载而加载，可以通过&quot;类.静态方法&quot;的方式进行调用<br>
②			          静态方法	非静态方法</p>
<ul>
<li>
<pre><code>     类		    yes		no
</code></pre>
</li>
<li>
<pre><code>     对象		yes		yes
</code></pre>
</li>
</ul>
<p>③ 静态方法中，只能调用静态的方法或属性<br>
非静态方法中，既可以调用非静态的方法或属性，也可以调用静态的方法或属性</p>
<ol start="5">
<li>static的注意点：<br>
5.1 在静态的方法内，不能使用this关键字、super关键字<br>
5.2 关于静态属性和静态方法的使用，大家都从生命周期的角度去理解。</li>
</ol>
<p>6.如何判定属性和方法应该使用static关键字：<br>
6.1 关于属性</p>
<blockquote>
<p>属性是可以被多个对象所共享的，不会随着对象的不同而不同的。<br>
类中的常量也常常声明为static</p>
</blockquote>
<p>6.2 关于方法</p>
<blockquote>
<p>操作静态属性的方法，通常设置为static的<br>
工具类中的方法，习惯上声明为static的。 比如：Math、Arrays、Collections<br>
7.使用举例：<br>
举例一：Arrays、Math、Collections等工具类<br>
举例二：单例模式<br>
举例三：<br>
class Circle{</p>
</blockquote>
<pre><code>private double radius;
private int id;//自动赋值

public Circle(){
	id = init++;
	total++;
}

public Circle(double radius){
	this();
</code></pre>
<p>//		id = init++;<br>
//		total++;<br>
this.radius = radius;		<br>
}</p>
<pre><code>private static int total;//记录创建的圆的个数
private static int init = 1001;//static声明的属性被所对象所共享

public double findArea(){
	return 3.14 * radius * radius;
}

public double getRadius() {
	return radius;
}

public void setRadius(double radius) {
	this.radius = radius;
}

public int getId() {
	return id;
}

public static int getTotal() {
	return total;
}
</code></pre>
<p>}</p>
<p>二、单例模式<br>
1.设计模式的说明<br>
1.1 理解<br>
设计模式是在大量的实践中总结和理论化之后优的代码结构、编程风格、以及解决问题的思考方式。</p>
<p>1.2 常用设计模式  --- 23种经典的设计模式  GOF<br>
创建型模式，共5种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。<br>
结构型模式，共7种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。<br>
行为型模式，共11种：策略模式、模板方法模式、观察者模式、迭代器模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。</p>
<p>2.单例模式<br>
2.1 要解决的问题：<br>
所谓类的单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例。<br>
2.2 具体代码的实现：<br>
饿汉式1：<br>
class Bank{<br>
//1.私化类的构造器<br>
private Bank(){	<br>
}<br>
//2.内部创建类的对象<br>
//4.要求此对象也必须声明为静态的<br>
private static Bank instance = new Bank();<br>
//3.提供公共的静态的方法，返回类的对象<br>
public static Bank getInstance(){<br>
return instance;<br>
}<br>
}</p>
<p>饿汉式2：使用了静态代码块<br>
class Order{<br>
//1.私化类的构造器<br>
private Order(){	<br>
}<br>
//2.声明当前类对象，没初始化<br>
//4.此对象也必须声明为static的<br>
private static Order instance = null;<br>
static{<br>
instance = new Order();<br>
}	<br>
//3.声明public、static的返回当前类对象的方法<br>
public static Order getInstance(){<br>
return instance;<br>
}	<br>
}<br>
懒汉式：<br>
class Order{<br>
//1.私化类的构造器<br>
private Order(){		<br>
}<br>
//2.声明当前类对象，没初始化<br>
//4.此对象也必须声明为static的<br>
private static Order instance = null;</p>
<pre><code>//3.声明public、static的返回当前类对象的方法
public static Order getInstance(){	
	if(instance == null){		
		instance = new Order();		
	}
	return instance;
}
</code></pre>
<p>}<br>
2.3 两种方式的对比：</p>
<ul>
<li>饿汉式：</li>
<li>
<pre><code> 坏处：对象加载时间过长。
</code></pre>
</li>
<li>
<pre><code> 好处：饿汉式是线程安全的
</code></pre>
</li>
<li></li>
<li>懒汉式：好处：延迟对象的创建。</li>
<li>
<pre><code>   目前的写法坏处：线程不安全。---&gt;到多线程内容时，再修改
</code></pre>
</li>
</ul>
<p>三、类的成员之四：代码块(初始化块)（重要性较属性、方法、构造器差一些）<br>
1.代码块的作用：用来初始化类、对象的信息<br>
2.分类：代码块要是使用修饰符，只能使用static<br>
分类：静态代码块  vs 非静态代码块<br>
3.静态代码块：</p>
<blockquote>
<p>内部可以输出语句<br>
随着类的加载而执行,而且只执行一次<br>
作用：初始化类的信息<br>
如果一个类中定义了多个静态代码块，则按照声明的先后顺序执行<br>
静态代码块的执行要优先于非静态代码块的执行<br>
静态代码块内只能调用静态的属性、静态的方法，不能调用非静态的结构</p>
</blockquote>
<p>非静态代码块：</p>
<blockquote>
<p>内部可以输出语句<br>
随着对象的创建而执行<br>
每创建一个对象，就执行一次非静态代码块<br>
作用：可以在创建对象时，对对象的属性等进行初始化<br>
如果一个类中定义了多个非静态代码块，则按照声明的先后顺序执行<br>
非静态代码块内可以调用静态的属性、静态的方法，或非静态的属性、非静态的方法</p>
</blockquote>
<ol start="4">
<li>实例化子类对象时，涉及到父类、子类中静态代码块、非静态代码块、构造器的加载顺序：<br>
由父及子，静态先行。</li>
</ol>
<p>补充：有了代码块之后的属性赋值顺序</p>
<ul>
<li>①默认初始化</li>
<li>②显式初始化/⑤在代码块中赋值</li>
<li>③构造器中初始化</li>
<li>④有了对象以后，可以通过&quot;对象.属性&quot;或&quot;对象.方法&quot;的方式，进行赋值</li>
<li>执行的先后顺序：① - ② / ⑤ - ③ - ④</li>
</ul>
<p>四、关键字：final（最终的）<br>
1.可以用来修饰：类、方法、变量<br>
2.具体的：<br>
2.1 final 用来修饰一个类:此类不能被其他类所继承。</p>
<ul>
<li>
<pre><code>     比如：String类、System类、StringBuffer类
</code></pre>
</li>
</ul>
<p>2.2 final 用来修饰方法：表明此方法不可以被重写</p>
<ul>
<li>
<pre><code> 	比如：Object类中getClass();
</code></pre>
</li>
</ul>
<p>2.3 final 用来修饰变量：此时的&quot;变量&quot;就称为是一个常量</p>
<ul>
<li>
<pre><code> 1. final修饰属性：可以考虑赋值的位置：显式初始化、代码块中初始化、构造器中初始化
</code></pre>
</li>
<li>
<pre><code> 2. final修饰局部变量：
</code></pre>
</li>
<li>
<pre><code>   尤其是使用final修饰形参时，表明此形参是一个常量。当我们调用此方法时，给常量形参赋一个实参。一旦赋值以后，就只能在方法体内使用此形参，但不能进行重新赋值。
</code></pre>
</li>
</ul>
<p>static final 用来修饰属性：全局常量</p>
<p>五、关键字：abstract（抽象的）<br>
1.可以用来修饰：类、方法<br>
2.具体的：<br>
abstract修饰类：抽象类</p>
<ul>
<li>
<pre><code> &gt; 此类不能实例化
</code></pre>
</li>
<li>
<pre><code> &gt; 抽象类中一定有构造器，便于子类实例化时调用（涉及：子类对象实例化的全过程）
</code></pre>
</li>
<li>
<pre><code> &gt; 开发中，都会提供抽象类的子类，让子类对象实例化，完成相关的操作 ---&gt;抽象的使用前提：继承性
</code></pre>
</li>
</ul>
<p>abstract修饰方法：抽象方法</p>
<ul>
<li>
<pre><code> &gt; 抽象方法只有方法的声明，没有方法体
</code></pre>
</li>
<li>
<pre><code> &gt; 包含抽象方法的类，一定是一个抽象类。反之，抽象类中可以没有抽象方法的。
</code></pre>
</li>
<li>
<pre><code>   &gt; 若子类重写了父类中的所的抽象方法后，此子类方可实例化
</code></pre>
</li>
<li>
<pre><code>    若子类没重写父类中的所有的抽象方法，则此子类也是一个抽象类，需要使用abstract修饰
</code></pre>
</li>
</ul>
<p>3.注意点：</p>
<ul>
<li>1.abstract不能用来修饰：属性、构造器等结构</li>
<li>2.abstract不能用来修饰私方法、静态方法、final的方法、final的类<br>
4.abstract的应用举例：<br>
abstract class GeometricObject{<br>
public abstract double findArea();<br>
}<br>
class Circle extends GeometricObject{<br>
private double radius;<br>
public double findArea(){<br>
return 3.14 * radius * radius;<br>
};<br>
}</li>
</ul>
<p>补充：模板方法的设计模式</p>
<ol>
<li>解决的问题</li>
</ol>
<p>在软件开发中实现一个算法时，整体步骤很固定、通用，这些步骤已经在父类中写好了。但是某些部分易变，易变部分可以抽象出来，供不同子类实现。这就是一种模板模式。（比较与AOP）</p>
<ol start="2">
<li>举例<br>
abstract class Template{<br>
//计算某段代码执行所需要花费的时间<br>
public void spendTime(){	<br>
long start = System.currentTimeMillis();	<br>
this.code();//不确定的部分、易变的部分<br>
long end = System.currentTimeMillis();<br>
System.out.println(&quot;花费的时间为：&quot; + (end - start));<br>
}	<br>
public abstract void code();<br>
}<br>
class SubTemplate extends Template{<br>
@Override<br>
public void code() {	<br>
for(int i = 2;i &lt;= 1000;i++){<br>
boolean isFlag = true;<br>
for(int j = 2;j &lt;= Math.sqrt(i);j++){		<br>
if(i % j == 0){<br>
isFlag = false;<br>
break;<br>
}<br>
}<br>
if(isFlag){<br>
System.out.println(i);<br>
}<br>
}<br>
}	<br>
}</li>
<li>应用场景<br>
<img src="https://fantaixi.github.io/post-images/1588761178746.png" alt="" loading="lazy"></li>
</ol>
<p>六、关键字：interface（接口）<br>
1.使用说明：<br>
1.接口使用interface来定义</p>
<ul>
<li>
<p>2.Java中，接口和类是并列的两个结构</p>
</li>
<li>
<p>3.如何定义接口：定义接口中的成员</p>
</li>
<li>
<pre><code> 3.1 JDK7及以前：只能定义全局常量和抽象方法
</code></pre>
</li>
<li>
<pre><code> 	&gt;全局常量：public static final的.但是书写时，可以省略不写
</code></pre>
</li>
<li>
<pre><code> 	&gt;抽象方法：public abstra	
</code></pre>
</li>
<li>
<pre><code> 3.2 JDK8：除了定义全局常量和抽象方法之外，还可以定义静态方法、默认方法（略）
</code></pre>
</li>
<li>
<ol start="4">
<li>接口中不能定义构造器的！意味着接口不可以实例化（********）</li>
</ol>
</li>
<li></li>
<li>
<ol start="5">
<li>Java开发中，接口通过让类去实现(implements)的方式来使用.</li>
</ol>
</li>
<li>
<p>如果实现类覆盖了接口中的所有的抽象方法，则此实现类就可以实例化</p>
</li>
<li>
<p>如果实现类没覆盖接口中所有的抽象方法，则此实现类仍为一个抽象类</p>
</li>
<li></li>
<li>
<ol start="6">
<li>Java类可以实现多个接口   ---&gt;弥补了Java单继承性的局限性</li>
</ol>
</li>
<li>
<p>格式：class AA extends BB implements CC,DD,EE</p>
</li>
<li></li>
<li>
<ol start="7">
<li>接口与接口之间可以继承，而且可以多继承</li>
</ol>
</li>
<li></li>
<li>
<ol start="8">
<li>接口的具体使用，体现多态性</li>
</ol>
</li>
<li>
<ol start="9">
<li>接口，实际上可以看做是一种规范</li>
</ol>
</li>
</ul>
<p>2.举例：<br>
class Computer{<br>
public void transferData(USB usb){//USB usb = new Flash();<br>
usb.start();<br>
System.out.println(&quot;具体传输数据的细节&quot;);	<br>
usb.stop();<br>
}	<br>
}<br>
interface USB{<br>
//常量：定义了长、宽、最大最小的传输速度等<br>
void start();	<br>
void stop();<br>
}<br>
class Flash implements USB{<br>
@Override<br>
public void start() {<br>
System.out.println(&quot;U盘开启工作&quot;);<br>
}<br>
@Override<br>
public void stop() {<br>
System.out.println(&quot;U盘结束工作&quot;);<br>
}	<br>
}<br>
class Printer implements USB{<br>
@Override<br>
public void start() {<br>
System.out.println(&quot;打印机开启工作&quot;);<br>
}<br>
@Override<br>
public void stop() {<br>
System.out.println(&quot;打印机结束工作&quot;);<br>
}<br>
}<br>
体会：</p>
<ul>
<li>1.接口使用上也满足多态性</li>
<li>2.接口，实际上就是定义了一种规范</li>
<li>3.开发中，体会面向接口编程！	<br>
3.体会面向接口编程的思想<br>
<img src="https://fantaixi.github.io/post-images/1588761493053.png" alt="" loading="lazy"><br>
面向接口编程：我们在应用程序中，调用的结构都是JDBC中定义的接口，不会出现具体某一个<br>
数据库厂商的API。<br>
4.Java8中关于接口的新规范<br>
//知识点1：接口中定义的静态方法，只能通过接口来调用。<br>
//知识点2：通过实现类的对象，可以调用接口中的默认方法。<br>
//如果实现类重写了接口中的默认方法，调用时，仍然调用的是重写以后的方法<br>
//知识点3：如果子类(或实现类)继承的父类和实现的接口中声明了同名同参数的默认方法，那么子类在没重写此方法的情况下，默认调用的是父类中的同名同参数的方法。--&gt;类优先原则<br>
//知识点4：如果实现类实现了多个接口，而这多个接口中定义了同名同参数的默认方法，<br>
//那么在实现类没重写此方法的情况下，报错。--&gt;接口冲突。<br>
//这就需要我们必须在实现类中重写此方法<br>
//知识点5：如何在子类(或实现类)的方法中调用父类、接口中被重写的方法<br>
public void myMethod(){<br>
method3();//调用自己定义的重写的方法<br>
super.method3();//调用的是父类中声明的<br>
//调用接口中的默认方法<br>
CompareA.super.method3();<br>
CompareB.super.method3();<br>
}<br>
5.面试题：<br>
抽象类和接口的异同？<br>
相同点：不能实例化；都可以包含抽象方法的。<br>
不同点：<br>
1）把抽象类和接口(java7,java8,java9)的定义、内部结构解释说明<br>
2）类：单继承性    接口：多继承<br>
类与接口：多实现</li>
</ul>
<p>补充：代理模式、工厂的设计模式<br>
代理模式：</p>
<ol>
<li>
<p>解决的问题<br>
代理模式是Java开发中使用较多的一种设计模式。代理设计就是为其他对象提供一种代理以控制对这个对象的访问。</p>
</li>
<li>
<p>举例<br>
interface NetWork{	<br>
public void browse();<br>
}<br>
//被代理类<br>
class Server implements NetWork{<br>
@Override<br>
public void browse() {<br>
System.out.println(&quot;真实的服务器访问网络&quot;);<br>
}<br>
}<br>
//代理类<br>
class ProxyServer implements NetWork{	<br>
private NetWork work;<br>
public ProxyServer(NetWork work){<br>
this.work = work;<br>
}	<br>
public void check(){<br>
System.out.println(&quot;联网之前的检查工作&quot;);<br>
}<br>
@Override<br>
public void browse() {<br>
check();	<br>
work.browse();	<br>
}	<br>
}</p>
</li>
<li>
<p>应用场景<br>
<img src="https://fantaixi.github.io/post-images/1588761791191.png" alt="" loading="lazy"></p>
</li>
</ol>
<p>工厂的设计模式;</p>
<ol>
<li>
<p>解决的问题<br>
实现了创建者与调用者的分离，即将创建对象的具体过程屏蔽隔离起来，达到提高灵活性的目的。</p>
</li>
<li>
<p>具体模式</p>
</li>
</ol>
<p>简单工厂模式：用来生产同一等级结构中的任意产品。（对于增加新的产品，需要修改已有代码）<br>
工厂方法模式：用来生产同一等级结构中的固定产品。（支持增加任意产品)<br>
抽象工厂模式：用来生产不同产品族的全部产品。（对于增加新的产品，无能为力；支持增加产品族)</p>
<p>七、类的结构：内部类<br>
内部类：类的第五个成员<br>
1.定义：Java中允许将一个类A声明在另一个类B中，则类A就是内部类，类B称为外部类.<br>
2.内部类的分类：<br>
成员内部类（静态、非静态 ） vs 局部内部类(方法内、代码块内、构造器内)<br>
3.成员内部类的理解：<br>
一方面，作为外部类的成员：</p>
<ul>
<li>
<pre><code> 	&gt;调用外部类的结构
</code></pre>
</li>
<li>
<pre><code> 	&gt;可以被static修饰
</code></pre>
</li>
<li>
<pre><code> 	&gt;可以被4种不同的权限修饰
</code></pre>
</li>
<li></li>
</ul>
<p>另一方面，作为一个类：</p>
<ul>
<li>
<pre><code> 	&gt; 类内可以定义属性、方法、构造器等
</code></pre>
</li>
<li>
<pre><code> 	&gt; 可以被final修饰，表示此类不能被继承。言外之意，不使用final，就可以被继承
</code></pre>
</li>
<li>
<pre><code> 	&gt; 可以被abstract修饰
</code></pre>
</li>
</ul>
<p>4.成员内部类：<br>
4.1如何创建成员内部类的对象？(静态的，非静态的)<br>
//创建静态的Dog内部类的实例(静态的成员内部类):<br>
Person.Dog dog = new Person.Dog();</p>
<p>//创建非静态的Bird内部类的实例(非静态的成员内部类):<br>
//Person.Bird bird = new Person.Bird();//错误的<br>
Person p = new Person();<br>
Person.Bird bird = p.new Bird();</p>
<p>4.2如何在成员内部类中调用外部类的结构？<br>
class Person{<br>
String name = &quot;小明&quot;;<br>
public void eat(){<br>
}<br>
//非静态成员内部类<br>
class Bird{<br>
String name = &quot;杜鹃&quot;;<br>
public void display(String name){<br>
System.out.println(name);//方法的形参<br>
System.out.println(this.name);//内部类的属性<br>
System.out.println(Person.this.name);//外部类的属性<br>
//Person.this.eat();<br>
}<br>
}<br>
}<br>
5.局部内部类的使用：<br>
//返回一个实现了Comparable接口的类的对象<br>
public Comparable getComparable(){	<br>
//创建一个实现了Comparable接口的类:局部内部类<br>
//方式一：<br>
//		class MyComparable implements Comparable{<br>
//<br>
//			@Override<br>
//			public int compareTo(Object o) {<br>
//				return 0;<br>
//			}<br>
//			<br>
//		}<br>
//		<br>
//		return new MyComparable();	<br>
//方式二：<br>
return new Comparable(){<br>
@Override<br>
public int compareTo(Object o) {<br>
return 0;<br>
}	<br>
};	<br>
}</p>
<p>注意点：<br>
在局部内部类的方法中（比如：show如果调用局部内部类所声明的方法(比如：method)中的局部变量(比如：num)的话,要求此局部变量声明为final的。<br>
jdk 7及之前版本：要求此局部变量显式的声明为final的<br>
jdk 8及之后的版本：可以省略final的声明<br>
总结：<br>
成员内部类和局部内部类，在编译以后，都会生成字节码文件。<br>
格式：<br>
成员内部类：外部类$内部类名.class</p>
<p>局部内部类：外部类$数字 内部类名.class</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[09 面向对象-中]]></title>
        <id>https://fantaixi.github.io/post/09-mian-xiang-dui-xiang-zhong/</id>
        <link href="https://fantaixi.github.io/post/09-mian-xiang-dui-xiang-zhong/">
        </link>
        <updated>2020-05-05T09:32:58.000Z</updated>
        <content type="html"><![CDATA[<p>一、面向对象的特征二：继承性<br>
1.为什么要有类的继承性？(继承性的好处）</p>
<ul>
<li>① 减少了代码的冗余，提高了代码的复用性</li>
<li>② 便于功能的扩展</li>
<li>③ 为之后多态性的使用，提供了前提<br>
图示：<br>
<img src="https://fantaixi.github.io/post-images/1588757719288.png" alt="" loading="lazy"><br>
2.继承性的格式：<br>
class A extends B{}</li>
<li>A:子类、派生类、subclass</li>
<li>B:父类、超类、基类、superclass</li>
</ul>
<p>3.子类继承父类以后有哪些不同？<br>
3.1体现：一旦子类A继承父类B以后，子类A中就获取了父类B中声明的所有的属性和方法。</p>
<ul>
<li>特别的，父类中声明为private的属性或方法，子类继承父类以后，仍然认为获取了父类中私有的结构。只因为封装性的影响，使得子类不能直接调用父类的结构而已。<br>
3.2 子类继承父类以后，还可以声明自己特有的属性或方法：实现功能的拓展。</li>
<li>子类和父类的关系，不同于子集和集合的关系。</li>
<li>extends：延展、扩展</li>
</ul>
<p>4.Java中继承性的说明<br>
1.一个类可以被多个子类继承。<br>
2.Java中类的单继承性：一个类只能有一个父类<br>
3.子父类是相对的概念。<br>
4.子类直接继承的父类，称为：直接父类。间接继承的父类称为：间接父类<br>
5.子类继承父类以后，就获取了直接父类以及所有间接父类中声明的属性和方法</p>
<p>图示：<br>
<img src="https://fantaixi.github.io/post-images/1588757866009.png" alt="" loading="lazy"></p>
<p>5.java.lang.Object类的理解</p>
<ol>
<li>如果我们没有显式的声明一个类的父类的话，则此类继承于java.lang.Object类</li>
<li>所有的java类（除java.lang.Object类之外都直接或间接的继承于java.lang.Object类</li>
<li>意味着，所的java类具有java.lang.Object类声明的功能。</li>
</ol>
<p>Object类的使用：<br>
1.java.lang.Object类的说明：</p>
<ul>
<li>1.Object类是所Java类的根父类</li>
<li>2.如果在类的声明中未使用extends关键字指明其父类，则默认父类为java.lang.Object类</li>
<li>3.Object类中的功能(属性、方法)就具通用性。</li>
<li>属性：无</li>
<li>方法：equals() / toString() / getClass() /hashCode() / clone() / finalize()</li>
<li>
<pre><code>wait() 、 notify()、notifyAll()
</code></pre>
</li>
<li>
<ol start="4">
<li>Object类只声明了一个空参的构造器<br>
2.equals()方法<br>
2.1 equals()的使用：</li>
<li>是一个方法，而非运算符</li>
</ol>
</li>
<li>
<ol start="2">
<li>只能适用于引用数据类型</li>
</ol>
</li>
<li>
<ol start="3">
<li>Object类中equals()的定义：</li>
</ol>
</li>
<li>public boolean equals(Object obj) {<br>
return (this == obj);<br>
}</li>
<li>说明：Object类中定义的equals()和==的作用是相同的：比较两个对象的地址值是否相同.即两个引用是否指向同一个对象实体</li>
<li></li>
<li>
<ol start="4">
<li>像String、Date、File、包装类等都重写了Object类中的equals()方法。重写以后，比较的不是两个引用的地址是否相同，而是比较两个对象的&quot;实体内容&quot;是否相同。</li>
</ol>
</li>
<li></li>
<li>
<ol start="5">
<li>通常情况下，我们自定义的类如果使用equals()的话，也通常是比较两个对象的&quot;实体内容&quot;是否相同。那么，就需要对Object类中的equals()进行重写.</li>
</ol>
</li>
<li>重写的原则：比较两个对象的实体内容是否相同.<br>
2.2 如何重写equals()<br>
2.2.1 手动重写举例：<br>
class User{<br>
String name;<br>
int age;<br>
//重写其equals()方法<br>
public boolean equals(Object obj){<br>
if(obj == this){<br>
return true;<br>
}<br>
if(obj instanceof User){<br>
User u = (User)obj;<br>
return this.age == u.age &amp;&amp; this.name.equals(u.name);<br>
}<br>
return false;<br>
}<br>
}<br>
2.2.2 开发中如何实现：自动生成的<br>
2.3 回顾 == 运算符的使用：</li>
<li>== ：运算符</li>
<li>
<ol>
<li>可以使用在基本数据类型变量和引用数据类型变量中</li>
</ol>
</li>
<li>
<ol start="2">
<li>如果比较的是基本数据类型变量：比较两个变量保存的数据是否相等。（不一定类型要相同）</li>
</ol>
</li>
<li>如果比较的是引用数据类型变量：比较两个对象的地址值是否相同.即两个引用是否指向同一个对象实体</li>
<li>补充： == 符号使用时，必须保证符号左右两边的变量类型一致。</li>
</ul>
<ol>
<li>toString()方法<br>
3.1 toString()的使用：
<ol>
<li>当我们输出一个对象的引用时，实际上就是调用当前对象的toString()</li>
</ol>
</li>
</ol>
<ul>
<li></li>
<li>
<ol start="2">
<li>Object类中toString()的定义：</li>
</ol>
</li>
<li>public String toString() {<br>
return getClass().getName() + &quot;@&quot; + Integer.toHexString(hashCode());<br>
}</li>
<li></li>
<li>
<ol start="3">
<li>像String、Date、File、包装类等都重写了Object类中的toString()方法。</li>
</ol>
</li>
<li>使得在调用对象的toString()时，返回&quot;实体内容&quot;信息</li>
<li></li>
<li>
<ol start="4">
<li>自定义类也可以重写toString()方法，当调用此方法时，返回对象的&quot;实体内容&quot;<br>
3.2 如何重写toString()<br>
举例：<br>
//自动实现<br>
@Override<br>
public String toString() {<br>
return &quot;Customer [name=&quot; + name + &quot;, age=&quot; + age + &quot;]&quot;;<br>
}</li>
</ol>
</li>
</ul>
<p>二、方法的重写<br>
1.什么是方法的重写(override 或 overwrite)？<br>
子类继承父类以后，可以对父类中同名同参数的方法，进行覆盖操作.</p>
<ol start="2">
<li>应用：<br>
重写以后，当创建子类对象以后，通过子类对象调用子父类中的同名同参数的方法时，实际执行的是子类重写父类的方法。<br>
3.举例：<br>
class Circle{<br>
public double findArea(){}//求面积<br>
}<br>
class Cylinder extends Circle{<br>
public double findArea(){}//求表面积<br>
}</li>
</ol>
<hr>
<p>class Account{<br>
public boolean withdraw(double amt){}<br>
}<br>
class CheckAccount extends Account{<br>
public boolean withdraw(double amt){}<br>
}</p>
<p>4.重写的规则：<br>
方法的声明： 权限修饰符  返回值类型  方法名(形参列表) throws 异常的类型{</p>
<ul>
<li>
<pre><code> 				//方法体
</code></pre>
</li>
<li>
<pre><code> 			}
</code></pre>
</li>
<li>
<pre><code> 约定俗称：子类中的叫重写的方法，父类中的叫被重写的方法
</code></pre>
</li>
<li>
<pre><code> ① 子类重写的方法的方法名和形参列表与父类被重写的方法的方法名和形参列表相同
</code></pre>
</li>
<li>
<pre><code> ② 子类重写的方法的权限修饰符不小于父类被重写的方法的权限修饰符
</code></pre>
</li>
<li>
<pre><code> 	&gt;特殊情况：子类不能重写父类中声明为private权限的方法
</code></pre>
</li>
<li>
<pre><code> ③ 返回值类型：
</code></pre>
</li>
<li>
<pre><code> 	&gt;父类被重写的方法的返回值类型是void，则子类重写的方法的返回值类型只能是void
</code></pre>
</li>
<li>
<pre><code> 	&gt;父类被重写的方法的返回值类型是A类型，则子类重写的方法的返回值类型可以是A类或A类的子类
</code></pre>
</li>
<li>
<pre><code> 	&gt;父类被重写的方法的返回值类型是基本数据类型(比如：double)，则子类重写的方法的返回值类型必须是相同的基本数据类型(必须也是double)
</code></pre>
</li>
<li>
<pre><code> ④ 子类重写的方法抛出的异常类型不大于父类被重写的方法抛出的异常类型（具体放到异常处理时候讲）
</code></pre>
</li>
</ul>
<hr>
<ul>
<li>子类和父类中的同名同参数的方法要么都声明为非static的（考虑重写），要么都声明为static的（不是重写)。</li>
</ul>
<p>5.面试题：<br>
区分方法的重写和重载？<br>
答：<br>
① 二者的概念：<br>
② 重载和重写的具体规则<br>
③ 重载：不表现为多态性。<br>
重写：表现为多态性。<br>
重载，是指允许存在多个同名方法，而这些方法的参数不同。编译器根据方法不同的参数表，对同名方法的名称做修饰。对于编译器而言，这些同名方法就成了不同的方法。它们的调用地址在编译期就绑定了。Java的重载是可以包括父类和子类的，即子类可以重载父类的同名不同参数的方法。<br>
所以：对于重载而言，在方法调用之前，编译器就已经确定了所要调用的方法，这称为“早绑定”或“静态绑定”；<br>
而对于多态，只等到方法调用的那一刻，解释运行器才会确定所要调用的具体方法，这称为“晚绑定”或“动态绑定”。</p>
<p>《Java编程思想》：“不要犯傻，如果它不是晚绑定，它就不是多态。”</p>
<p>三、super关键字<br>
1.super 关键字可以理解为：父类的</p>
<p>2.可以用来调用的结构：<br>
属性、方法、构造器</p>
<p>3.super调用属性、方法：<br>
3.1 我们可以在子类的方法或构造器中。通过使用&quot;super.属性&quot;或&quot;super.方法&quot;的方式，显式的调用父类中声明的属性或方法。但是，通常情况下，我们习惯省略&quot;super.&quot;<br>
3.2 特殊情况：当子类和父类中定义了同名的属性时，我们要想在子类中调用父类中声明的属性，则必须显式的使用&quot;super.属性&quot;的方式，表明调用的是父类中声明的属性。<br>
3.3 特殊情况：当子类重写了父类中的方法以后，我们想在子类的方法中调用父类中被重写的方法时，则必须显式的使用&quot;super.方法&quot;的方式，表明调用的是父类中被重写的方法。</p>
<p>4.super调用构造器：<br>
4.1  我们可以在子类的构造器中显式的使用&quot;super(形参列表)&quot;的方式，调用父类中声明的指定的构造器<br>
4.2 &quot;super(形参列表)&quot;的使用，必须声明在子类构造器的首行！<br>
4.3 我们在类的构造器中，针对于&quot;this(形参列表)&quot;或&quot;super(形参列表)&quot;只能二一，不能同时出现<br>
4.4 在构造器的首行，没显式的声明&quot;this(形参列表)&quot;或&quot;super(形参列表)&quot;，则默认调用的是父类中空参的构造器：super()<br>
4.5 在类的多个构造器中，至少一个类的构造器中使用了&quot;super(形参列表)&quot;，调用父类中的构造器</p>
<p>四、子类对象实例化全过程<br>
1.从结果上看：继承性</p>
<blockquote>
<p>子类继承父类以后，就获取了父类中声明的属性或方法。<br>
创建子类的对象，在堆空间中，就会加载所父类中声明的属性。<br>
2.从过程上看：<br>
当我们通过子类的构造器创建子类对象时，我们一定会直接或间接的调用其父类的构造器，进而调用父类的父类的构造器，...直到调用了java.lang.Object类中空参的构造器为止。正因为加载过所有的父类的结构，所以才可以看到内存中父类中的结构，子类对象才可以考虑进行调用。<br>
3.强调说明：<br>
虽然创建子类对象时，调用了父类的构造器，但是自始至终就创建过一个对象，即为new的子类对象。</p>
</blockquote>
<p>五、面向对象的特征三：多态性<br>
1.多态性的理解：可以理解为一个事物的多种形态。<br>
2.何为多态性：<br>
对象的多态性：父类的引用指向子类的对象（或子类的对象赋给父类的引用）<br>
举例：<br>
Person p = new Man();<br>
Object obj = new Date();<br>
3.多态性的使用：虚拟方法调用</p>
<blockquote>
<p>有了对象的多态性以后，我们在编译期，只能调用父类中声明的方法，但在运行期，我们实际执行的是子类重写父类的方法。<br>
总结：编译，看左边；运行，看右边。<br>
4.多态性的使用前提：<br>
① 类的继承关系  ② 方法的重写<br>
5.多态性的应用举例：<br>
举例一：<br>
public void func(Animal animal){//Animal animal = new Dog();<br>
animal.eat();<br>
animal.shout();<br>
}<br>
举例二：<br>
public void method(Object obj){	<br>
}<br>
举例三：<br>
class Driver{<br>
public void doData(Connection conn){//conn = new MySQlConnection(); / conn = new OracleConnection();<br>
//规范的步骤去操作数据<br>
//		conn.method1();<br>
//		conn.method2();<br>
//		conn.method3();		<br>
}<br>
}</p>
</blockquote>
<p>6.多态性使用的注意点：<br>
对象的多态性，只适用于方法，不适用于属性（编译和运行都看左边）</p>
<hr>
<p>7.关于向上转型与向下转型：<br>
7.1 向上转型：多态<br>
7.2 向下转型：<br>
7.2.1 为什么使用向下转型：<br>
有了对象的多态性以后，内存中实际上是加载了子类特有的属性和方法的，但是由于变量声明为父类类型，导致编译时，只能调用父类中声明的属性和方法。子类特有的属性和方法不能调用。如何才能调用子类特的属性和方法？使用向下转型。<br>
7.2.2 如何实现向下转型：<br>
使用强制类型转换符：()<br>
7.2.3 使用时的注意点：<br>
① 使用强转时，可能出现ClassCastException的异常。（两个类型转换不兼容）<br>
② 为了避免在向下转型时出现ClassCastException的异常，我们在向下转型之前，先进行instanceof的判断，一旦返回true，就进行向下转型。如果返回false，不进行向下转型。<br>
7.2.4 instanceof的使用：<br>
① a instanceof A:判断对象a是否是类A的实例。如果是，返回true；如果不是，返回false。<br>
② 如果 a instanceof A返回true,则 a instanceof B也返回true.其中，类B是类A的父类。<br>
③ 要求a所属的类与类A必须是子类和父类的关系，否则编译错误。<br>
7.2.5 图示：<br>
<img src="https://fantaixi.github.io/post-images/1588759288912.png" alt="" loading="lazy"><br>
8. 面试题：<br>
8.1 谈谈你对多态性的理解？<br>
① 实现代码的通用性。<br>
② Object类中定义的public boolean equals(Object obj){  }<br>
JDBC:使用java程序操作(获取数据库连接、CRUD)数据库(MySQL、Oracle、DB2、SQL Server)<br>
③ 抽象类、接口的使用肯定体现了多态性。（抽象类、接口不能实例化）<br>
8.2 多态是编译时行为还是运行时行为？  运行时行为</p>
<p>六、单元测试方法<br>
Java中的JUnit单元测试<br>
步骤：<br>
1.中当前工程 - 右键择：build path - add libraries - JUnit 4 - 下一步<br>
2.创建Java类，进行单元测试。<br>
此时的Java类要求：① 此类是public的  ②此类提供公共的无参的构造器<br>
3.此类中声明单元测试方法。<br>
此时的单元测试方法：方法的权限是public,没返回值，没形参</p>
<p>4.此单元测试方法上需要声明注解：@Test,并在单元测试类中导入：import org.junit.Test;</p>
<p>5.声明好单元测试方法以后，就可以在方法体内测试相关的代码。<br>
6.写完代码以后，左键双击单元测试方法名，右键：run as - JUnit Test</p>
<p>说明：<br>
1.如果执行结果没任何异常：绿条<br>
2.如果执行结果出现异常：红条</p>
<p>七、包装类的使用<br>
1.为什么要有包装类(或封装类）<br>
为了使基本数据类型的变量具有类的特征，引入包装类。</p>
<p>2.基本数据类型与对应的包装类：<br>
<img src="https://fantaixi.github.io/post-images/1588759915421.png" alt="" loading="lazy"></p>
<p>3.需要掌握的类型间的转换：（基本数据类型、包装类、String）<br>
<img src="https://fantaixi.github.io/post-images/1588759921171.png" alt="" loading="lazy"></p>
<p>简易版：<br>
基本数据类型&lt;---&gt;包装类：JDK 5.0 新特性：自动装箱 与自动拆箱<br>
基本数据类型、包装类---&gt;String:调用String重载的valueOf(Xxx xxx)<br>
String---&gt;基本数据类型、包装类:调用包装类的parseXxx(String s)<br>
注意：转换时，可能会报NumberFormatException<br>
应用场景举例：<br>
① Vector类中关于添加元素，只定义了形参为Object类型的方法：<br>
v.addElement(Object obj);   //基本数据类型 ---&gt;包装类 ---&gt;使用多态</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[08 面向对象-上]]></title>
        <id>https://fantaixi.github.io/post/08-mian-xiang-dui-xiang-shang/</id>
        <link href="https://fantaixi.github.io/post/08-mian-xiang-dui-xiang-shang/">
        </link>
        <updated>2020-05-04T07:44:00.000Z</updated>
        <content type="html"><![CDATA[<p>一、类与对象<br>
1.面向对象学习的三条主线：</p>
<ul>
<li>1.Java类及类的成员：属性、方法、构造器；代码块、内部类</li>
<li>2.面向对象的大特征：封装性、继承性、多态性、(抽象性)</li>
<li>3.其它关键字：this、super、static、final、abstract、interface、package、import等</li>
<li>“大处着眼，小处着手”</li>
</ul>
<p>2.面向对象与面向过程（理解）<br>
1.面向过程：强调的是功能行为，以函数为最小单位，考虑怎么做。（c/c++）<br>
2.面向对象：强调具备了功能的对象，以类/对象为最小单位，考虑谁来做。（Java）</p>
<p>举例对比：人把大象装进冰箱。</p>
<p>3.完成一个项目（或功能）的思路：<br>
<img src="https://fantaixi.github.io/post-images/1588580409160.png" alt="" loading="lazy"></p>
<p>4.面向对象中两个重要的概念：<br>
类：对一类事物的描述，是抽象的、概念上的定义<br>
对象：是实际存在的该类事物的每个个体，因而也称为实例(instance)</p>
<blockquote>
<p>面向对象程序设计的重点是类的设计<br>
设计类，就是设计类的成员。</p>
</blockquote>
<p>二者的关系：<br>
对象，是由类new出来的，派生出来的。<br>
5.面向对象思想落地实现的规则一</p>
<ul>
<li>1.创建类，设计类的成员</li>
<li>2.创建类的对象</li>
<li>3.通过“对象.属性”或“对象.方法”调用对象的结构</li>
</ul>
<p>补充：几个概念的使用说明</p>
<ul>
<li>属性 = 成员变量 = field = 域、字段</li>
<li>方法 = 成员方法 = 函数 = method</li>
<li>创建类的对象 = 类的实例化 = 实例化类</li>
</ul>
<p>6.对象的创建与对象的内存解析<br>
典型代码：<br>
Person p1 = new Person();<br>
Person p2 = new Person();<br>
Person p3 = p1;//没有新创建一个对象，共用一个堆空间中的对象实体。<br>
说明：<br>
如果创建了一个类的多个对象，则每个对象都独立的拥有一套类的属性。（非static的）<br>
意味着：如果我们修改一个对象的属性a，则不影响另外一个对象属性a的值。</p>
<p>7.匿名对象:我们创建的对象，没有显式的赋给一个变量名。即为匿名对象<br>
特点：匿名对象只能调用一次。<br>
举例：<br>
new Phone().sendEmail();<br>
new Phone().playGame();<br>
new Phone().price = 1999;<br>
new Phone().showPrice();//0.0<br>
应用场景：<br>
PhoneMall mall = new PhoneMall();<br>
//匿名对象的使用<br>
mall.show(new Phone());<br>
其中，<br>
class PhoneMall{<br>
public void show(Phone phone){<br>
phone.sendEmail();<br>
phone.playGame();<br>
}<br>
}<br>
8.理解&quot;万事万物皆对象&quot;<br>
1.在Java语言范畴中，我们都将功能、结构等封装到类中，通过类的实例化，来调用具体的功能结构</p>
<ul>
<li>
<pre><code> &gt;Scanner,String等
</code></pre>
</li>
<li>
<pre><code> &gt;文件：File
</code></pre>
</li>
<li>
<pre><code> &gt;网络资源：URL
</code></pre>
</li>
</ul>
<p>2.涉及到Java语言与前端Html、后端的数据库交互时，前后端的结构在Java层面交互时，都体现为类、对象。</p>
<p>补充：<br>
编译完源程序以后，生成一个或多个字节码文件。<br>
我们使用JVM中的类的加载器和解释器对生成的字节码文件进行解释运行。意味着，需要将字节码文件对应的类加载到内存中，涉及到内存解析。<br>
<img src="https://fantaixi.github.io/post-images/1588580739867.png" alt="" loading="lazy"><br>
虚拟机栈，即为平时提到的栈结构。我们将局部变量存储在栈结构中<br>
堆，我们将new出来的结构（比如：数组、对象）加载在堆空间中。补充：对象的属性（非static的）加载在堆空间中。<br>
方法区：类的加载信息、常量池、静态域</p>
<p>二、类的结构之一：属性<br>
对比：属性  vs  局部变量<br>
1.相同点：</p>
<ul>
<li>
<pre><code> 1.1  定义变量的格式：数据类型  变量名 = 变量值
</code></pre>
</li>
<li>
<pre><code> 1.2 先声明，后使用
</code></pre>
</li>
<li>
<pre><code> 1.3 变量都有其对应的作用域 
</code></pre>
</li>
</ul>
<p>2.不同点：<br>
2.1 在类中声明的位置的不同</p>
<ul>
<li>
<pre><code> 属性：直接定义在类的一对{}内
</code></pre>
</li>
<li>
<pre><code> 局部变量：声明在方法内、方法形参、代码块内、构造器形参、构造器内部的变量
</code></pre>
</li>
<li></li>
<li>
<pre><code> 2.2 关于权限修饰符的不同
</code></pre>
</li>
<li>
<pre><code> 属性：可以在声明属性时，指明其权限，使用权限修饰符。
</code></pre>
</li>
<li>
<pre><code> 常用的权限修饰符：private、public、缺省、protected  ---&gt;封装性
</code></pre>
</li>
<li>
<pre><code> 目前，大家声明属性时，都使用缺省就可以了。
</code></pre>
</li>
<li>
<pre><code> 局部变量：不可以使用权限修饰符。
</code></pre>
</li>
<li></li>
<li>
<pre><code> 2.3 默认初始化值的情况：
</code></pre>
</li>
<li>
<pre><code> 属性：类的属性，根据其类型，都默认初始化值。
</code></pre>
</li>
<li>
<pre><code> 	整型（byte、short、int、long：0）
</code></pre>
</li>
<li>
<pre><code> 	浮点型（float、double：0.0）
</code></pre>
</li>
<li>
<pre><code> 	字符型（char：0  （或'\u0000'））
</code></pre>
</li>
<li>
<pre><code> 	布尔型（boolean：false）
</code></pre>
</li>
<li></li>
<li>
<pre><code> 	引用数据类型（类、数组、接口：null）
</code></pre>
</li>
<li></li>
<li>
<pre><code> 局部变量：没默认初始化值。
</code></pre>
</li>
<li>
<pre><code> 	意味着，我们在调用局部变量之前，一定要显式赋值。
</code></pre>
</li>
<li>
<pre><code> 	特别地：形参在调用时，我们赋值即可。
</code></pre>
</li>
<li></li>
<li>
<pre><code> 2.4 在内存中加载的位置：
</code></pre>
</li>
<li>
<pre><code> 属性：加载到堆空间中   （非static）
</code></pre>
</li>
<li>
<pre><code> 局部变量：加载到栈空间
</code></pre>
</li>
</ul>
<p>三、类的结构之二：方法</p>
<ol>
<li>方法：描述类应该具有的功能。</li>
</ol>
<ul>
<li>比如：</li>
<li>Math类：sqrt()\random() ...</li>
<li>Scanner类：nextXxx() ...</li>
<li>Arrays类：sort() \ binarySearch() \ toString() \ equals() \ ...</li>
</ul>
<ol start="2">
<li>
<p>方法的声明：权限修饰符  返回值类型  方法名(形参列表){<br>
方法体<br>
}</p>
</li>
<li>
<p>说明：</p>
</li>
</ol>
<ul>
<li>
<pre><code> 3.1 关于权限修饰符：默认方法的权限修饰符先都使用public
</code></pre>
</li>
<li>
<pre><code> Java规定的4种权限修饰符：private、public、缺省、protected  --&gt;封装性再细说
</code></pre>
</li>
<li></li>
<li>
<pre><code> 3.2 返回值类型： 返回值  vs 没返回值
</code></pre>
</li>
<li>
<pre><code> 3.2.1  如果方法返回值，则必须在方法声明时，指定返回值的类型。同时，方法中，需要使用
</code></pre>
</li>
<li>
<pre><code>       return关键字来返回指定类型的变量或常量：“return 数据”。
</code></pre>
</li>
<li>
<pre><code> 	如果方法没返回值，则方法声明时，使用void来表示。通常，没返回值的方法中，       *          就不需要 使用return.但是，如果使用的话，只能“return;”表示结束此方法的意思。
</code></pre>
</li>
<li></li>
<li>
<pre><code> 	3.2.2 我们定义方法该不该返回值？
</code></pre>
</li>
<li>
<pre><code> 		① 题目要求
</code></pre>
</li>
<li>
<pre><code> 		② 凭经验：具体问题具体分析
</code></pre>
</li>
<li></li>
<li>
<pre><code> 3.3 方法名：属于标识符，遵循标识符的规则和规范，“见名知意”
</code></pre>
</li>
<li></li>
<li>
<pre><code> 3.4 形参列表： 方法可以声明0个，1个，或多个形参。
</code></pre>
</li>
<li>
<pre><code>    3.4.1 格式：数据类型1 形参1,数据类型2 形参2,...
</code></pre>
</li>
<li></li>
<li>
<pre><code>    3.4.2 我们定义方法时，该不该定义形参？
</code></pre>
</li>
<li>
<pre><code>    		① 题目要求
</code></pre>
</li>
<li>
<pre><code>    		② 凭经验：具体问题具体分析
</code></pre>
</li>
<li></li>
<li>
<pre><code> 3.5 方法体：方法功能的体现。 	
</code></pre>
</li>
</ul>
<ol start="3">
<li>方法的使用中，可以调用当前类的属性或方法</li>
</ol>
<ul>
<li>
<pre><code> 	特殊的：方法A中又调用了方法A:递归方法。
</code></pre>
</li>
<li>
<pre><code>方法中，不可以定义方法。
</code></pre>
</li>
</ul>
<p>补充：return，重载，可变个数的形参，值传递机制，递归<br>
return关键字：<br>
1.使用范围：使用在方法体中<br>
2.作用：① 结束方法<br>
② 针对于返回值类型的方法，使用&quot;return 数据&quot;方法返回所要的数据。<br>
3.注意点：return关键字后面不可以声明执行语句。</p>
<p>方法的重载：<br>
1.方法的重载的概念<br>
定义：在同一个类中，允许存在一个以上的同名方法，只要它们的参数个数或者参数类型不同即可。<br>
总结：&quot;两同一不同&quot;:同一个类、相同方法名<br>
参数列表不同：参数个数不同，参数类型不同</p>
<p>2.构成重载的举例：<br>
举例一：Arrays类中重载的sort() / binarySearch()；PrintStream中的println()<br>
举例二：<br>
//如下的4个方法构成了重载<br>
public void getSum(int i,int j){<br>
System.out.println(&quot;1&quot;);<br>
}</p>
<pre><code>public void getSum(double d1,double d2){
	System.out.println(&quot;2&quot;);
}

public void getSum(String s ,int i){
	System.out.println(&quot;3&quot;);
}

public void getSum(int i,String s){
	System.out.println(&quot;4&quot;);
}
</code></pre>
<p>不构成重载的举例：<br>
//如下的3个方法不能与上述4个方法构成重载<br>
//	public int getSum(int i,int j){<br>
//		return 0;<br>
//	}</p>
<p>//	public void getSum(int m,int n){<br>
//		<br>
//	}</p>
<p>//	private void getSum(int i,int j){<br>
//		<br>
//	}</p>
<ol>
<li>如何判断是否构成方法的重载？<br>
严格按照定义判断：两同一不同。<br>
跟方法的权限修饰符、返回值类型、形参变量名、方法体都没关系！<br>
4.如何确定类中某一个方法的调用：<br>
方法名 ---&gt; 参数列表</li>
</ol>
<p>可变个数的形参的方法：<br>
1.使用说明：</p>
<ul>
<li>1.jdk 5.0新增的内容</li>
<li>2.具体使用：</li>
<li>2.1 可变个数形参的格式：数据类型 ... 变量名</li>
<li>2.2 当调用可变个数形参的方法时，传入的参数个数可以是：0个，1个,2个，。。。</li>
<li>2.3 可变个数形参的方法与本类中方法名相同，形参不同的方法之间构成重载</li>
<li>2.4 可变个数形参的方法与本类中方法名相同，形参类型也相同的数组之间不构成重载。换句话说，二者不能共存。</li>
<li>2.5 可变个数形参在方法的形参中，必须声明在末尾</li>
<li>2.6  可变个数形参在方法的形参中,最多只能声明一个可变形参。<br>
（之前方法形参有多个的时候，一般使用数组，常见场景：JDBC工具类）<br>
2.举例说明：<br>
public void show(int i){<br>
}<br>
public void show(String s){<br>
System.out.println(&quot;show(String)&quot;);<br>
}<br>
public void show(String ... strs){<br>
System.out.println(&quot;show(String ... strs)&quot;);<br>
for(int i = 0;i &lt; strs.length;i++){<br>
System.out.println(strs[i]);<br>
}<br>
}<br>
//不能与上一个方法同时存在<br>
//	public void show(String[] strs){<br>
//		<br>
//	}<br>
调用时：<br>
test.show(&quot;hello&quot;);<br>
test.show(&quot;hello&quot;,&quot;world&quot;);<br>
test.show();<br>
test.show(new String[]{&quot;AA&quot;,&quot;BB&quot;,&quot;CC&quot;});</li>
</ul>
<p>java的值传递机制：<br>
1.规则：<br>
如果变量是基本数据类型，此时赋值的是变量所保存的数据值。<br>
如果变量是引用数据类型，此时赋值的是变量所保存的数据的地址值。</p>
<p>2.针对于方法的参数概念<br>
形参：方法定义时，声明的小括号内的参数<br>
实参：方法调用时，实际传递给形参的数据</p>
<p>3.java中参数传递机制：值传递<br>
规则：</p>
<ul>
<li>如果参数是基本数据类型，此时实参赋给形参的是实参真实存储的数据值。</li>
<li>如果参数是引用数据类型，此时实参赋给形参的是实参存储数据的地址值。</li>
</ul>
<p>推广：<br>
如果变量是基本数据类型，此时赋值的是变量所保存的数据值。<br>
如果变量是引用数据类型，此时赋值的是变量所保存的数据的地址值。</p>
<p>递归：<br>
1.定义：<br>
递归方法：一个方法体内调用它自身。<br>
2.如何理解递归方法？</p>
<blockquote>
<p>方法递归包含了一种隐式的循环，它会重复执行某段代码，但这种重复执行无须循环控制。<br>
递归一定要向已知方向递归，否则这种递归就变成了无穷递归，类似于死循环。<br>
3.举例：<br>
// 例1：计算1-n之间所自然数的和<br>
public int getSum(int n) {// 3<br>
if (n == 1) {<br>
return 1;<br>
} else {<br>
return n + getSum(n - 1);<br>
}<br>
}</p>
</blockquote>
<pre><code>// 例2：计算1-n之间所自然数的乘积:n!
public int getSum1(int n) {
	if (n == 1) {
		return 1;
	} else {
		return n * getSum1(n - 1);
	}
}

//例3：已知一个数列：f(0) = 1,f(1) = 4,f(n+2)=2*f(n+1) + f(n),
//其中n是大于0的整数，求f(10)的值。
public int f(int n){
	if(n == 0){
		return 1;
	}else if(n == 1){
		return 4;
	}else{
</code></pre>
<p>//			return f(n + 2) - 2 * f(n + 1);<br>
return 2*f(n - 1) + f(n - 2);<br>
}<br>
}</p>
<p>四、类的结构之三：构造器<br>
1.构造器（或构造方法）：Constructor<br>
构造器的作用：</p>
<ul>
<li>1.创建对象</li>
<li>2.初始化对象的信息<br>
2.使用说明：</li>
<li>1.如果没显式的定义类的构造器的话，则系统默认提供一个空参的构造器</li>
<li>2.定义构造器的格式：权限修饰符  类名(形参列表){}</li>
<li>3.一个类中定义的多个构造器，彼此构成重载</li>
<li>4.一旦我们显式的定义了类的构造器之后，系统就不再提供默认的空参构造器</li>
<li>5.一个类中，至少会有一个构造器。</li>
</ul>
<p>3.举例：<br>
//构造器<br>
public Person(){<br>
System.out.println(&quot;Person().....&quot;);<br>
}<br>
public Person(String n){<br>
name = n;	<br>
}<br>
public Person(String n,int a){<br>
name = n;<br>
age = a;<br>
}</p>
<p>补充：属性赋值顺序，JavaBean，this，package/import/JDK中常见的包及其使用</p>
<p>属性赋值顺序：<br>
① 默认初始化<br>
② 显式初始化<br>
③ 构造器中初始化<br>
④ 通过&quot;对象.方法&quot; 或 &quot;对象.属性&quot;的方式，赋值<br>
以上操作的先后顺序：① - ② - ③ - ④</p>
<p>JavaBean：<br>
所谓JavaBean，是指符合如下标准的Java类：<br>
&gt;类是公共的<br>
&gt;一个无参的公共的构造器<br>
&gt;属性，且对应的get、set方法</p>
<p>关键字：this<br>
1.可以调用的结构：属性、方法；构造器<br>
2.this调用属性、方法：<br>
this理解为：当前对象  或 当前正在创建的对象</p>
<p>2.1  在类的方法中，我们可以使用&quot;this.属性&quot;或&quot;this.方法&quot;的方式，调用当前对象属性或方法。但是， 通常情况下，我们都择省略&quot;this.&quot;。特殊情况下，如果方法的形参和类的属性同名时，我们必须显式的使用&quot;this.变量&quot;的方式，表明此变量是属性，而非形参。<br>
*</p>
<ul>
<li>2.2 在类的构造器中，我们可以使用&quot;this.属性&quot;或&quot;this.方法&quot;的方式，调用当前正在创建的对象属性或方法。但是，通常情况下，我们都选择省略&quot;this.&quot;。特殊情况下，如果构造器的形参和类的属性同名时，我们必须显式的使用&quot;this.变量&quot;的方式，表明此变量是属性，而非形参。</li>
</ul>
<p>3.this调用构造器：<br>
① 我们在类的构造器中，可以显式的使用&quot;this(形参列表)&quot;方式，调用本类中指定的其他构造器<br>
② 构造器中不能通过&quot;this(形参列表)&quot;方式调用自己（死循环）<br>
③ 如果一个类中有n个构造器，则最多有 n - 1构造器中使用了&quot;this(形参列表)&quot;<br>
④ 规定：&quot;this(形参列表)&quot;必须声明在当前构造器的首行<br>
⑤ 构造器内部，最多只能声明一个&quot;this(形参列表)&quot;，用来调用其他的构造器</p>
<p>package/import</p>
<ol>
<li>package的使用说明：</li>
</ol>
<ul>
<li>1.为了更好的实现项目中类的管理，提供包的概念</li>
<li>2.使用package声明类或接口所属的包，声明在源文件的首行</li>
<li>3.包，属于标识符，遵循标识符的命名规则、规范(xxxyyyzzz)、“见名知意”</li>
<li>4.每&quot;.&quot;一次，就代表一层文件目录。</li>
</ul>
<ol start="2">
<li>import的使用：</li>
</ol>
<ul>
<li>
<ol>
<li>在源文件中显式的使用import结构导入指定包下的类、接口</li>
</ol>
</li>
<li>
<ol start="2">
<li>声明在包的声明和类的声明之间</li>
</ol>
</li>
<li>
<ol start="3">
<li>如果需要导入多个结构，则并列写出即可</li>
</ol>
</li>
<li>
<ol start="4">
<li>可以使用&quot;xxx.*&quot;的方式，表示可以导入xxx包下的所结构</li>
</ol>
</li>
<li>
<ol start="5">
<li>如果使用的类或接口是java.lang包下定义的，则可以省略import结构</li>
</ol>
</li>
<li>
<ol start="6">
<li>如果使用的类或接口是本包下定义的，则可以省略import结构</li>
</ol>
</li>
<li>
<ol start="7">
<li>如果在源文件中，使用了不同包下的同名的类，则必须至少一个类需要以全类名的方式显示。</li>
</ol>
</li>
<li>
<ol start="8">
<li>使用&quot;xxx.*&quot;方式表明可以调用xxx包下的所结构。但是如果使用的是xxx子包下的结构，则仍需要显式导入</li>
</ol>
</li>
<li>
<ol start="9">
<li>import static:导入指定类或接口中的静态结构:属性或方法。</li>
</ol>
</li>
</ul>
<p>3.JDK中常见的包及其使用<br>
<img src="https://fantaixi.github.io/post-images/1588757322912.png" alt="" loading="lazy"></p>
<p>五、面向对象的特征一：封装性<br>
1.为什么要引入封装性？<br>
我们程序设计追求“高内聚，低耦合”。<br>
高内聚 ：类的内部数据操作细节自己完成，不允许外部干涉；<br>
低耦合 ：仅对外暴露少量的方法用于使用。</p>
<p>隐藏对象内部的复杂性，只对外公开简单的接口。便于外界调用，从而提高系统的可扩展性、可维护性。通俗的说，把该隐藏的隐藏起来，该暴露的暴露出来。这就是封装性的设计思想。</p>
<p>2.问题引入：<br>
当我们创建一个类的对象以后，我们可以通过&quot;对象.属性&quot;的方式，对对象的属性进行赋值。这里，赋值操作要受到属性的数据类型和存储范围的制约。除此之外，没其他制约条件。但是，在实际问题中，我们往往需要给属性赋值加入额外的限制条件。这个条件就不能在属性声明时体现，我们只能通过方法进行限制条件的添加。（比如：setLegs()同时，我们需要避免用户再使用&quot;对象.属性&quot;的方式对属性进行赋值。则需要将属性声明为私有的(private).<br>
--&gt;此时，针对于属性就体现了封装性。<br>
3.封装性思想具体的代码体现：<br>
体现一：将类的属性xxx私化(private),同时，提供公共的(public)方法来获取(getXxx)和设置(setXxx)此属性的值<br>
private double radius;<br>
public void setRadius(double radius){<br>
this.radius = radius;<br>
}<br>
public double getRadius(){<br>
return radius;<br>
}<br>
体现二：不对外暴露的私有的方法<br>
体现三：单例模式（将构造器私有化）<br>
体现四：如果不希望类在包外被调用，可以将类设置为缺省的。</p>
<p>4.Java规定的四种权限修饰符<br>
4.1 权限从小到大顺序为：private &lt;  缺省 &lt; protected &lt; public<br>
4.2 具体的修饰范围：<br>
<img src="https://fantaixi.github.io/post-images/1588757478304.png" alt="" loading="lazy"><br>
4.3 权限修饰符可用来修饰的结构说明：<br>
4种权限都可以用来修饰类的内部结构：属性、方法、构造器、内部类<br>
修饰类的话，只能使用：缺省、public</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[07 Java 数组]]></title>
        <id>https://fantaixi.github.io/post/07-java-shu-zu/</id>
        <link href="https://fantaixi.github.io/post/07-java-shu-zu/">
        </link>
        <updated>2020-05-03T06:11:20.000Z</updated>
        <content type="html"><![CDATA[<p>一、数组的理解：数组(Array)，是多个相同类型数据一定顺序排列的集合，并使用一个名字命名，<br>
并通过编号的方式对这些数据进行统一管理。</p>
<p>二、数组相关的概念：</p>
<blockquote>
<p>数组名<br>
元素<br>
角标、下标、索引<br>
数组的长度：元素的个数</p>
</blockquote>
<p>三、数组的特点：<br>
1数组是序排列的<br>
2数组属于引用数据类型的变量。数组的元素，既可以是基本数据类型，也可以是引用数据类型<br>
3创建数组对象会在内存中开辟一整块连续的空间<br>
4数组的长度一旦确定，就不能修改。</p>
<p>四、数组的分类：<br>
① 照维数：一维数组、二维数组、。。。<br>
② 照数组元素的类型：基本数据类型元素的数组、引用数据类型元素的数组</p>
<p>五、一维数组<br>
1、声明与初始化<br>
正确的方式：<br>
int num;//声明<br>
num = 10;//初始化<br>
int id = 1001;//声明 + 初始化</p>
<pre><code>	int[] ids;//声明
	//1.1 静态初始化:数组的初始化和数组元素的赋值操作同时进行
	ids = new int[]{1001,1002,1003,1004};
	//1.2动态初始化:数组的初始化和数组元素的赋值操作分开进行
	String[] names = new String[5];

int[] arr4 = {1,2,3,4,5};//类型推断
</code></pre>
<p>错误的方式：<br>
//		int[] arr1 = new int[];<br>
//		int[5] arr2 = new int[5];<br>
//		int[] arr3 = new int[3]{1,2,3};</p>
<p>2、一维数组元素的引用：通过角标的方式调用。<br>
//数组的角标（或索引从0开始的，到数组的长度-1结束。<br>
names[0] = &quot;王铭&quot;;<br>
names[1] = &quot;王赫&quot;;<br>
names[2] = &quot;张学良&quot;;//charAt(2)</p>
<p>3、数组的属性：length<br>
System.out.println(names.length);//5<br>
System.out.println(ids.length);</p>
<p>说明：<br>
数组一旦初始化，其长度就是确定的。arr.length<br>
数组长度一旦确定，就不可修改。</p>
<p>4、一维数组的遍历<br>
for(int i = 0;i &lt; names.length;i++){<br>
System.out.println(names[i]);<br>
}</p>
<p>5.一维数组元素的默认初始化值</p>
<blockquote>
<p>数组元素是整型：0<br>
数组元素是浮点型：0.0<br>
数组元素是char型：0或'\u0000'，而非'0'<br>
数组元素是boolean型：false<br>
数组元素是引用数据类型：null</p>
</blockquote>
<p>六、二维数组<br>
1、如何理解二维数组？<br>
数组属于引用数据类型<br>
数组的元素也可以是引用数据类型<br>
一个一维数组A的元素如果还是一个一维数组类型的，则，此数组A称为二维数组。</p>
<p>2、二维数组的声明与初始化<br>
正确的方式：<br>
int[] arr = new int[]{1,2,3};//一维数组<br>
//静态初始化<br>
int[][] arr1 = new int[][]{{1,2,3},{4,5},{6,7,8}};<br>
//动态初始化1<br>
String[][] arr2 = new String[3][2];<br>
//动态初始化2<br>
String[][] arr3 = new String[3][];<br>
//也是正确的写法：<br>
int[] arr4[] = new int[][]{{1,2,3},{4,5,9,10},{6,7,8}};<br>
int[] arr5[] = {{1,2,3},{4,5},{6,7,8}};//类型推断<br>
错误的方式：<br>
//		String[][] arr4 = new String[][4];<br>
//		String[4][3] arr5 = new String[][];<br>
//		int[][] arr6 = new int[4][3]{{1,2,3},{4,5},{6,7,8}};<br>
3、如何调用二维数组元素:<br>
System.out.println(arr1[0][1]);//2<br>
System.out.println(arr2[1][1]);//null<br>
arr3[1] = new String[4];<br>
System.out.println(arr3[1][0]);<br>
System.out.println(arr3[0]);//<br>
4、二维数组的属性：<br>
System.out.println(arr4.length);//3<br>
System.out.println(arr4[0].length);//3<br>
System.out.println(arr4[1].length);//4<br>
5、遍历二维数组元素<br>
for(int i = 0;i &lt; arr4.length;i++){	<br>
for(int j = 0;j &lt; arr4[i].length;j++){<br>
System.out.print(arr4[i][j] + &quot;  &quot;);<br>
}<br>
System.out.println();<br>
}</p>
<p>6、二维数组元素的默认初始化值</p>
<ul>
<li>规定：二维数组分为外层数组的元素，内层数组的元素</li>
<li>
<pre><code> int[][] arr = new int[4][3];
</code></pre>
</li>
<li>
<pre><code> 外层元素：arr[0],arr[1]等
</code></pre>
</li>
<li>
<pre><code> 内层元素：arr[0][0],arr[1][2]等
</code></pre>
</li>
<li></li>
<li>数组元素的默认初始化值</li>
<li>针对于初始化方式一：比如：int[][] arr = new int[4][3];</li>
<li>
<pre><code> 外层元素的初始化值为：地址值
</code></pre>
</li>
<li>
<pre><code> 内层元素的初始化值为：与一维数组初始化情况相同
</code></pre>
</li>
<li></li>
<li>针对于初始化方式二：比如：int[][] arr = new int[4][];</li>
<li>
<pre><code> 外层元素的初始化值为：null
</code></pre>
</li>
<li>
<pre><code> 内层元素的初始化值为：不能调用，否则报错。
</code></pre>
</li>
</ul>
<p>七、Arrays工具类的使用<br>
1.理解：<br>
① 定义在java.util包下。<br>
② Arrays:提供了很多操作数组的方法。</p>
<p>2.使用（常用）：<br>
//1.boolean equals(int[] a,int[] b):判断两个数组是否相等。<br>
int[] arr1 = new int[]{1,2,3,4};<br>
int[] arr2 = new int[]{1,3,2,4};<br>
boolean isEquals = Arrays.equals(arr1, arr2);<br>
System.out.println(isEquals);</p>
<pre><code>	//2.String toString(int[] a):输出数组信息。
	System.out.println(Arrays.toString(arr1));
			
	//3.void fill(int[] a,int val):将指定值填充到数组之中。
	Arrays.fill(arr1,10);
	System.out.println(Arrays.toString(arr1));
	
	//4.void sort(int[] a):对数组进行排序。
	Arrays.sort(arr2);
	System.out.println(Arrays.toString(arr2));
	
	//5.int binarySearch(int[] a,int key)
	int[] arr3 = new int[]{-98,-34,2,34,54,66,79,105,210,333};
	int index = Arrays.binarySearch(arr3, 210);
	if(index &gt;= 0){
		System.out.println(index);
	}else{
		System.out.println(&quot;未找到&quot;);
	}
</code></pre>
<p>八、数组常见异常<br>
1.数组角标越界异常：ArrayIndexOutOfBoundsException<br>
int[] arr = new int[]{1,2,3,4,5};		<br>
//		for(int i = 0;i &lt;= arr.length;i++){<br>
//			System.out.println(arr[i]);<br>
//		}		<br>
//		System.out.println(arr[-2]);</p>
<p>2.空指针异常：NullPointerException<br>
//情况一：<br>
//		int[] arr1 = new int[]{1,2,3};<br>
//		arr1 = null;<br>
//		System.out.println(arr1[0]);</p>
<p>//情况二：<br>
//		int[][] arr2 = new int[4][];<br>
//		System.out.println(arr2[0][0]);</p>
<p>//情况三：<br>
String[] arr3 = new String[]{&quot;AA&quot;,&quot;BB&quot;,&quot;CC&quot;};<br>
arr3[0] = null;<br>
System.out.println(arr3[0].toString());</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[06 Java流程控制]]></title>
        <id>https://fantaixi.github.io/post/06-java-liu-cheng-kong-zhi/</id>
        <link href="https://fantaixi.github.io/post/06-java-liu-cheng-kong-zhi/">
        </link>
        <updated>2020-05-02T08:16:37.000Z</updated>
        <content type="html"><![CDATA[<p>一、顺序结构：程序从上到下执行。<br>
分支结构：<br>
if-else if - else<br>
switch-case</p>
<p>1.if-else条件判断结构<br>
1.1.<br>
结构一：<br>
if(条件表达式){<br>
执行表达式<br>
}</p>
<p>结构二：二选一<br>
if(条件表达式){<br>
执行表达式1<br>
}else{<br>
执行表达式2<br>
}</p>
<p>结构三：n选一<br>
if(条件表达式){<br>
执行表达式1<br>
}else if(条件表达式){<br>
执行表达式2<br>
}else if(条件表达式){<br>
执行表达式3<br>
}<br>
...<br>
else{<br>
执行表达式n<br>
}</p>
<p>1.2.说明：</p>
<ol>
<li>else 结构是可选的。</li>
<li>针对于条件表达式：
<blockquote>
<p>如果多个条件表达式之间是“互斥”关系(或没有交集的关系),哪个判断和执行语句声明在上面还是下面，无所谓。<br>
如果多个条件表达式之间有交集的关系，需要根据实际情况，考虑清楚应该将哪个结构声明在上面。<br>
如果多个条件表达式之间有包含的关系，通常情况下，需要将范围小的声明在范围大的上面。否则，范围小的就没机会执行了。（比如异常处理）</p>
</blockquote>
</li>
<li>if-else结构是可以相互嵌套的。</li>
<li>如果if-else结构中的执行语句只有一行时，对应的一对{}可以省略的。但是，不建议大家省略。</li>
</ol>
<p>2.switch-case选择结构<br>
switch(表达式){<br>
case 常量1:<br>
执行语句1;<br>
//break;<br>
case 常量2:<br>
执行语句2;<br>
//break;<br>
...<br>
default:<br>
执行语句n;<br>
//break;<br>
}<br>
2.说明：<br>
① 根据switch表达式中的值，依次匹配各个case中的常量。一旦匹配成功，则进入相应case结构中，调用其执行语句。<br>
当调用完执行语句以后，则仍然继续向下执行其他case结构中的执行语句，直到遇到break关键字或此switch-case结构末尾结束为止。<br>
② break,可以使用在switch-case结构中，表示一旦执行到此关键字，就跳出switch-case结构<br>
③ switch结构中的表达式，只能是如下的6种数据类型之一：<br>
byte 、short、char、int、枚举类型(JDK5.0新增)、String类型(JDK7.0新增)<br>
④ case 之后只能声明常量。不能声明范围。<br>
⑤ break关键字是可选的。<br>
⑥ default:相当于if-else结构中的else.<br>
default结构是可选的，而且位置是灵活的。<br>
3.如果switch-case结构中的多个case的执行语句相同，则可以考虑进行合并。<br>
4.break在switch-case中是可选的</p>
<p>二、循环结构：<br>
for<br>
while<br>
do-while</p>
<p>1.循环结构的四要素<br>
① 初始化条件<br>
② 循环条件  ---&gt;是boolean类型<br>
③ 循环体<br>
④ 迭代条件<br>
说明：通常情况下，循环结束都是因为②中循环条件返回false了。</p>
<p>2.三种循环结构：<br>
2.1 for循环结构<br>
for(①;②;④){<br>
③<br>
}<br>
执行过程：① - ② - ③ - ④ - ② - ③ - ④ - ... - ②<br>
2.2 while循环结构<br>
①<br>
while(②){<br>
③;<br>
④;<br>
}<br>
执行过程：① - ② - ③ - ④ - ② - ③ - ④ - ... - ②<br>
说明：<br>
写while循环千万小心不要丢了迭代条件。一旦丢了，就可能导致死循环！</p>
<p>for和while循环总结：</p>
<ol>
<li>开发中，基本上我们都会从for、while中进行选择，实现循环结构。</li>
<li>for循环和while循环是可以相互转换的！<br>
区别：for循环和while循环的初始化条件部分的作用范围不同。</li>
<li>我们写程序，要避免出现死循环。<br>
2.3 do-while循环结构<br>
①<br>
do{<br>
③;<br>
④;<br>
}while(②);<br>
执行过程：① - ③ - ④ - ② - ③ - ④ - ... - ②</li>
</ol>
<p>说明：<br>
1.do-while循环至少会执行一次循环体！<br>
2.开发中，使用for和while更多一些。较少使用do-while</p>
<p>3.“无限循环”结构: while(true) 或 for(;😉<br>
总结：如何结束一个循环结构？<br>
方式一：当循环条件是false时<br>
方式二：在循环体中，执行break</p>
<p>4.嵌套循环<br>
1.嵌套循环:将一个循环结构A声明在另一个循环结构B的循环体中,就构成了嵌套循环<br>
内层循环：循环结构A<br>
外层循环：循环结构B<br>
2.说明：<br>
① 内层循环结构遍历一遍，只相当于外层循环循环体执行了一次<br>
② 假设外层循环需要执行m次，内层循环需要执行n次。此时内层循环的循环体一共执行了m * n次<br>
③ 外层循环控制行数，内层循环控制列数<br>
【典型练习】<br>
//练习一：<br>
/*<br>
******<br>
******<br>
******<br>
******<br>
<em>/<br>
for(int j = 1;j &lt;= 4;j++ ){<br>
for(int i = 1;i &lt;= 6;i++){<br>
System.out.print('</em>');<br>
}<br>
System.out.println();<br>
}<br>
//练习二：<br>
/*			i(行号)		j(*的个数)<br>
*			1			1<br>
**			2			2<br>
***			3			3<br>
****		4			4<br>
*****		5			5<br>
*/</p>
<pre><code>	for(int i = 1;i &lt;= 5;i++){//控制行数
		for(int j = 1;j &lt;= i;j++){//控制列数
			System.out.print(&quot;*&quot;);
		
		}
		System.out.println();
	}
	//练习三：九九乘法表
	//练习四：100以内的质数
</code></pre>
<p>补充:衡量一个功能代码的优劣：<br>
1.正确性<br>
2.可读性<br>
3.健壮性<br>
4.高效率与低存储：时间复杂度 、空间复杂度 （衡量算法的好坏）</p>
<p>如何理解流程控制的练习：<br>
流程控制结构的使用 + 算法逻辑</p>
<p>小结：break和continue关键字的使用<br>
使用范围		循环中使用的作用(不同点)	  相同点</p>
<p>break:	 switch-case			<br>
循环结构中		   结束当前循环		关键字后面不能声明执行语句</p>
<p>continue:	循环结构中	 结束当次循环		关键字后面不能声明执行语句</p>
<p>补充：带标签的break和continue的使用</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[05 Java运算符]]></title>
        <id>https://fantaixi.github.io/post/05-java-yun-suan-fu/</id>
        <link href="https://fantaixi.github.io/post/05-java-yun-suan-fu/">
        </link>
        <updated>2020-05-01T08:26:47.000Z</updated>
        <content type="html"><![CDATA[<p>一、算术运算符： + -  * / % (前)++ (后)++ (前)-- (后)--<br>
【典型代码】<br>
//除号：/<br>
int num1 = 12;<br>
int num2 = 5;<br>
int result1 = num1 / num2;<br>
System.out.println(result1);//2<br>
// %:取余运算<br>
//结果的符号与被模数的符号相同<br>
//开发中，经常使用%来判断能否被除尽的情况。<br>
int m1 = 12;<br>
int n1 = 5;<br>
System.out.println(&quot;m1 % n1 = &quot; + m1 % n1);</p>
<pre><code>	int m2 = -12;
	int n2 = 5;
	System.out.println(&quot;m2 % n2 = &quot; + m2 % n2);

	int m3 = 12;
	int n3 = -5;
	System.out.println(&quot;m3 % n3 = &quot; + m3 % n3);

	int m4 = -12;
	int n4 = -5;
	System.out.println(&quot;m4 % n4 = &quot; + m4 % n4);
	//(前)++ :先自增1，后运算
	//(后)++ :先运算，后自增1
	int a1 = 10;
	int b1 = ++a1;
	System.out.println(&quot;a1 = &quot; + a1 + &quot;,b1 = &quot; + b1);
	
	int a2 = 10;
	int b2 = a2++;
	System.out.println(&quot;a2 = &quot; + a2 + &quot;,b2 = &quot; + b2);
	
	int a3 = 10;
	++a3;//a3++;
	int b3 = a3;
	//(前)-- :先自减1，后运算
	//(后)-- :先运算，后自减1
	
	int a4 = 10;
	int b4 = a4--;//int b4 = --a4;
	System.out.println(&quot;a4 = &quot; + a4 + &quot;,b4 = &quot; + b4);
</code></pre>
<p>【特别说明的】<br>
1.//(前)++ :先自增1，后运算<br>
//(后)++ :先运算，后自增1<br>
2.//(前)-- :先自减1，后运算<br>
//(后)-- :先运算，后自减1<br>
3.连接符：+：只能使用在String与其他数据类型变量之间使用。</p>
<p>二、赋值运算符：=  +=  -=  <em>=  /=  %=<br>
【典型代码】<br>
int i2,j2;<br>
//连续赋值<br>
i2 = j2 = 10;<br>
//</em>**************<br>
int i3 = 10,j3 = 20;<br>
int num1 = 10;<br>
num1 += 2;//num1 = num1 + 2;<br>
System.out.println(num1);//12</p>
<pre><code>	int num2 = 12;
	num2 %= 5;//num2 = num2 % 5;
	System.out.println(num2);

	short s1 = 10;
	//s1 = s1 + 2;//编译失败
	s1 += 2;//结论：不会改变变量本身的数据类型
	System.out.println(s1);
</code></pre>
<p>【特别说明】<br>
1.运算的结果不会改变变量本身的数据类型<br>
2.<br>
//开发中，如果希望变量实现+2的操作，有几种方法？(前提：int num = 10;)<br>
//方式一：num = num + 2;<br>
//方式二：num += 2; (推荐)</p>
<pre><code>	//开发中，如果希望变量实现+1的操作，有几种方法？(前提：int num = 10;)
	//方式一：num = num + 1;
	//方式二：num += 1; 
	//方式三：num++; (推荐)
</code></pre>
<p>三、比较运算符（关系运算符）: == != &gt;  &lt;  &gt;=  &lt;=  instanceof<br>
【典型代码】<br>
int i = 10;<br>
int j = 20;</p>
<pre><code>	System.out.println(i == j);//false
	System.out.println(i = j);//20

	boolean b1 = true;
	boolean b2 = false;
	System.out.println(b2 == b1);//false
	System.out.println(b2 = b1);//true
</code></pre>
<p>【特别说明】<br>
1.比较运算符的结果是boolean类型<br>
2.&gt;  &lt;  &gt;=  &lt;= :只能使用在数值类型的数据之间。<br>
3. == 和 !=: 不仅可以使用在数值类型数据之间，还可以使用在其他引用类型变量之间。<br>
Account acct1 = new Account(1000);<br>
Account acct2 = new Account(1000);<br>
boolean b1 = (acct1 == acct2);//比较两个Account是否是同一个账户。<br>
boolean b2 = (acct1 != acct2);//</p>
<p>四、逻辑运算符：&amp; &amp;&amp;  |  || !  ^<br>
【典型代码】<br>
//区分&amp; 与 &amp;&amp;<br>
//相同点1：&amp; 与  &amp;&amp; 的运算结果相同<br>
//相同点2：当符号左边是true时，二者都会执行符号右边的运算<br>
//不同点：当符号左边是false时，&amp;继续执行符号右边的运算。&amp;&amp;不再执行符号右边的运算。<br>
//开发中，推荐使用&amp;&amp;<br>
boolean b1 = true;<br>
b1 = false;<br>
int num1 = 10;<br>
if(b1 &amp; (num1++ &gt; 0)){<br>
System.out.println(&quot;我现在在北京&quot;);<br>
}else{<br>
System.out.println(&quot;我现在在南京&quot;);<br>
}</p>
<pre><code>	System.out.println(&quot;num1 = &quot; + num1);
	
	boolean b2 = true;
	b2 = false;
	int num2 = 10;
	if(b2 &amp;&amp; (num2++ &gt; 0)){
		System.out.println(&quot;我现在在北京&quot;);
	}else{
		System.out.println(&quot;我现在在南京&quot;);
	}

	System.out.println(&quot;num2 = &quot; + num2);

	// 区分：| 与 || 
	//相同点1：| 与  || 的运算结果相同
	//相同点2：当符号左边是false时，二者都会执行符号右边的运算
	//不同点3：当符号左边是true时，|继续执行符号右边的运算，而||不再执行符号右边的运算
	//开发中，推荐使用||
	boolean b3 = false;
	b3 = true;
	int num3 = 10;
	if(b3 | (num3++ &gt; 0)){
		System.out.println(&quot;我现在在北京&quot;);
	}else{
		System.out.println(&quot;我现在在南京&quot;);
	}
	System.out.println(&quot;num3 = &quot; + num3);


	boolean b4 = false;
	b4 = true;
	int num4 = 10;
	if(b4 || (num4++ &gt; 0)){
		System.out.println(&quot;我现在在北京&quot;);
	}else{
		System.out.println(&quot;我现在在南京&quot;);
	}
	System.out.println(&quot;num4 = &quot; + num4);
</code></pre>
<p>【特别说明】<br>
逻辑运算符操作的都是boolean类型的变量。而且结果也是boolean类型</p>
<p>五、位运算符：&lt;&lt;  &gt;&gt; &gt;&gt;&gt; &amp;  |  ^  ~<br>
【典型代码】<br>
int i = 21;<br>
i = -21;<br>
System.out.println(&quot;i &lt;&lt; 2 :&quot; + (i &lt;&lt; 2));   // i &lt;&lt; 2 :-84<br>
System.out.println(&quot;i &lt;&lt; 3 :&quot; + (i &lt;&lt; 3));   // i &lt;&lt; 3 :-168<br>
System.out.println(&quot;i &lt;&lt; 27 :&quot; + (i &lt;&lt; 27));   //  i &lt;&lt; 27 :1476395008</p>
<pre><code>	int m = 12;
	int n = 5;
	System.out.println(&quot;m &amp; n :&quot; + (m &amp; n));   //  m &amp; n :4
	System.out.println(&quot;m | n :&quot; + (m | n));    //  m | n :13
	System.out.println(&quot;m ^ n :&quot; + (m ^ n));   //  m ^ n :9
</code></pre>
<p>【面试题】 你能否写出最高效的2 * 8的实现方式？<br>
答案：2 &lt;&lt; 3  或  8 &lt;&lt; 1<br>
【特别说明的】</p>
<ol>
<li>位运算符操作的都是整型的数据</li>
<li>&lt;&lt; ：在一定范围内，每向左移1位，相当于 * 2
<blockquote>
<blockquote>
<p>:在一定范围内，每向右移1位，相当于 / 2</p>
</blockquote>
</blockquote>
</li>
</ol>
<p>典型题目：<br>
1.交换两个变量的值。（int a=1,b=2）<br>
a =  a ^ b;<br>
b =  a ^ b;//此时的a已经不是原来的a了，此时右边的表达式就等价于：( a ^ b ) ^ b ，结果是a，并把它赋予变量b；<br>
a =  a ^ b;//此时的a与b都不是原来的a与b了，此时右边的表达式就等价于：a ^ ( a ^ b ) ，结果是b，并把它赋予变量a；</p>
<p>2.实现60的二进制到十六进制的转换<br>
public static void BitCalc() {<br>
//获取60的二进制<br>
System.out.println(Integer.toBinaryString(60));<br>
int num =60;<br>
int n1 = num &amp; 15;<br>
int temp = 60 &gt;&gt; 4;<br>
int n2 = temp &amp; 15;<br>
System.out.print(n2);	<br>
System.out.println((char)(n1-10+'A'));<br>
//三元运算<br>
int x =1,y;<br>
y =(x&gt;1)?'a':200;<br>
System.out.println(&quot;y=&quot;+y);		<br>
}</p>
<p>结果：<br>
111100<br>
3C<br>
y=200</p>
<p>六、三元运算符：(条件表达式)? 表达式1 : 表达式2<br>
【典型代码】<br>
1.获取两个整数的较大值<br>
2.获取三个数的最大值<br>
【特别说明的】</p>
<ol>
<li>说明<br>
① 条件表达式的结果为boolean类型<br>
② 根据条件表达式真或假，决定执行表达式1，还是表达式2.<br>
如果表达式为true，则执行表达式1。<br>
如果表达式为false，则执行表达式2。<br>
③ 表达式1 和表达式2要求是一致的。<br>
④ 三元运算符可以嵌套使用</li>
<li></li>
</ol>
<p>凡是可以使用三元运算符的地方，都可以改写为if-else<br>
反之，不成立。<br>
3. 如果程序既可以使用三元运算符，又可以使用if-else结构，那么优先选择三元运算符。原因：简洁、执行效率高。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[04 Java基本语法]]></title>
        <id>https://fantaixi.github.io/post/04-java-ji-ben-yu-fa/</id>
        <link href="https://fantaixi.github.io/post/04-java-ji-ben-yu-fa/">
        </link>
        <updated>2020-04-30T06:52:38.000Z</updated>
        <content type="html"><![CDATA[<p>一、Java关键字与标识符</p>
<p>1.1 Java关键字的使用<br>
定义：被Java语言赋予了特殊含义，用做专门用途的字符串（单词）<br>
特点：关键字中所有字母都为小写<br>
具体有哪些关键字：<br>
<img src="https://fantaixi.github.io/post-images/1588229972083.png" alt="" loading="lazy"><br>
<img src="https://fantaixi.github.io/post-images/1588229980768.png" alt="" loading="lazy"></p>
<p>1.2 保留字<br>
现Java版本尚未使用，但以后版本可能会作为关键字使用。<br>
具体哪些保留字：goto 、const</p>
<p>二、标识符<br>
定义：凡是自己可以起名字的地方都叫标识符。<br>
涉及到的结构：<br>
包名、类名、接口名、变量名、方法名、常量名<br>
规则：(必须要遵守。否则，编译不通过)<br>
<img src="https://fantaixi.github.io/post-images/1588230188167.png" alt="" loading="lazy"></p>
<p>小结：在起名字时，为了提高阅读性，要尽量意义，“见名知意”。</p>
<p>三、变量的使用 ***<br>
3.1 变量的分类<br>
1）按数据类型分类<br>
<img src="https://fantaixi.github.io/post-images/1588231616061.png" alt="" loading="lazy"><br>
详细说明：</p>
<ol>
<li>整型：byte(1字节=8bit) \ short(2字节) \ int(4字节) \ long(8字节)<br>
① byte范围：-128 ~ 127<br>
② 声明long型变量，必须以&quot;l&quot;或&quot;L&quot;结尾<br>
③ 通常，定义整型变量时，使用int型。<br>
④整型的常量，默认类型是：int型</li>
<li>浮点型：float(4字节) \ double(8字节)<br>
① 浮点型，表示带小数点的数值<br>
② float表示数值的范围比long还大<br>
③ 定义float类型变量时，变量要以&quot;f&quot;或&quot;F&quot;结尾<br>
④ 通常，定义浮点型变量时，使用double型。<br>
⑤ 浮点型的常量，默认类型为：double</li>
<li>字符型：char (1字符=2字节)<br>
① 定义char型变量，通常使用一对'',内部只能写一个字符<br>
② 表示方式：1.声明一个字符 2.转义字符 3.直接使用 Unicode 值来表示字符型常量</li>
<li>布尔型：boolean<br>
① 只能取两个值之一：true 、 false<br>
② 常常在条件判断、循环结构中使用</li>
</ol>
<p>2）按声明的位置分类<br>
<img src="https://fantaixi.github.io/post-images/1588231919694.png" alt="" loading="lazy"></p>
<p>3.2 变量的定义格式<br>
数据类型  变量名 = 变量值;<br>
或<br>
数据类型  变量名;<br>
变量名 = 变量值;</p>
<p>变量使用的注意点：<br>
① 变量必须先声明，后使用<br>
② 变量都定义在其作用域内。在作用域内，它是有效的。换句话说，出了作用域，就失效了<br>
③ 同一个作用域内，不可以声明两个同名的变量</p>
<p>四、基本数据类型变量间运算规则<br>
4.1 涉及到的基本数据类型：除了boolean之外的其他7种</p>
<p>4.2 自动类型转换(只涉及7种基本数据类型）</p>
<p>小结：当容量小的数据类型的变量与容量大的数据类型的变量做运算时，结果自动提升为容量大的数据类型。（自动类型转换）<br>
byte 、char 、short --&gt; int --&gt; long --&gt; float --&gt; double<br>
特别的：当byte、char、short三种类型的变量做运算时，结果为int型（此时的容量大小指的是，表示数的范围的大和小。比如：float容量要大于long的容量）</p>
<p>4.3 强制类型转换(只涉及7种基本数据类型）：自动类型提升运算的逆运算。<br>
1.需要使用强转符：( )<br>
2.注意点：强制类型转换，可能导致精度损失。</p>
<p>4.4 String与8种基本数据类型间的运算</p>
<ol>
<li>String属于引用数据类型,翻译为：字符串</li>
<li>声明String类型变量时，使用一对&quot;&quot;</li>
<li>String可以和8种基本数据类型变量做运算，且运算只能是连接运算：+</li>
<li>运算的结果仍然是String类型<br>
避免：<br>
String s = 123;//编译错误<br>
String s1 = &quot;123&quot;;<br>
int i = (int)s1;//编译错误</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[03 第一个Java程序，Hello World ]]></title>
        <id>https://fantaixi.github.io/post/di-yi-ge-java-cheng-xu-hello-world/</id>
        <link href="https://fantaixi.github.io/post/di-yi-ge-java-cheng-xu-hello-world/">
        </link>
        <updated>2020-04-29T18:09:46.000Z</updated>
        <content type="html"><![CDATA[<p>public class Test {<br>
public static void main(String[] args) {<br>
System.out.println(&quot;Hello World&quot;);<br>
}<br>
}<br>
运行结果如下：<br>
<img src="https://fantaixi.github.io/post-images/1588184119057.png" alt="" loading="lazy"></p>
<p>适当分析：<br>
1）第一个public  类Test的修饰符，作用范围：同一工程下，同类，同包，子类，不同包可见<br>
2）class 声明Test为一个类<br>
3）第二个public 同 1），区别在于是方法的修饰符，对于当前方法对其他类是否可见取决于所在类的修饰符<br>
4）static，表示当前方法为静态方法<br>
5）void，表示当前方法没有返回值<br>
6）String[] args，参数，为String类型的数组，名字args<br>
7）System.out.println，表示在控制台换行输出</p>
<p>小结：一个Java程序必有一个主程序入口，默认的入口如上。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[02 Java初识]]></title>
        <id>https://fantaixi.github.io/post/java-chu-shi/</id>
        <link href="https://fantaixi.github.io/post/java-chu-shi/">
        </link>
        <updated>2020-04-29T17:50:08.000Z</updated>
        <content type="html"><![CDATA[<p>1.Java凭什么这么强大？<br>
主要由JVM实现平台无关性，真正实现一处编译，随处运行。</p>
<p>2.JVM、JRE及JDK的区别？<br>
JVM：Java虚拟机<br>
JRE：JVM + Java SE标准类库<br>
JDK：JRE + 开发工具（例如Javac编译工具等）<br>
<img src="https://fantaixi.github.io/post-images/1588182860675.png" alt="" loading="lazy"></p>
<p>3.Java分类<br>
Java SE（标准版）<br>
Java EE（企业版）<br>
Java ME（手机版）</p>
<p>4.一个Java程序的开发流程（粗略）<br>
1）编写源代码  .java<br>
2） javac.exe编译源代码 ，生成字节码文件<br>
3） java.exe运行字节码<br>
<img src="https://fantaixi.github.io/post-images/1588183729386.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[01 Java安装]]></title>
        <id>https://fantaixi.github.io/post/java-an-zhuang/</id>
        <link href="https://fantaixi.github.io/post/java-an-zhuang/">
        </link>
        <updated>2020-04-29T09:15:30.000Z</updated>
        <content type="html"><![CDATA[<p>1.简介<br>
Java是一门面向对象编程语言，不仅吸收了C++语言的各种优点，还摒弃了C++里难以理解的多继承、指针等概念，因此Java语言具有功能强大和简单易用两个特征。Java语言作为静态面向对象编程语言的代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程 。<br>
Java具有简单性、面向对象、分布式、健壮性、安全性、平台独立与可移植性、多线程、动态性等特点   。Java可以编写桌面应用程序、Web应用程序、分布式系统和嵌入式系统应用程序等 。<br>
---&lt;百度百科&gt;<br>
2.安装<br>
2.1 下载jdk<br>
https://www.java.com/zh_CN/download/help/download_options.xml</p>
<p>2.2系统环境变量配置<br>
win7：<br>
<img src="https://fantaixi.github.io/post-images/1588154373181.png" alt="" loading="lazy"><br>
win10：<br>
<img src="https://fantaixi.github.io/post-images/1588154530632.png" alt="" loading="lazy"><br>
2.3 为什么配置path环境变量？<br>
path环境变量：windows操作系统执行命令时所要搜寻的路径<br>
为什么要配置path:希望java的开发工具（javac.exe,java.exe)在任何的文件路径下都可以执行成功。</p>
<p>2.4检查jdk是否安装成功<br>
cmd：java -version<br>
<img src="https://fantaixi.github.io/post-images/1588154715970.png" alt="" loading="lazy"></p>
<p>小结：很大，很持久（通过jvm实现平台无关性）</p>
]]></content>
    </entry>
</feed>