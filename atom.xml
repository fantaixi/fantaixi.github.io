<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://fantaixi.github.io</id>
    <title>饭太稀</title>
    <updated>2020-05-06T20:04:14.645Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://fantaixi.github.io"/>
    <link rel="self" href="https://fantaixi.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://fantaixi.github.io/images/avatar.png</logo>
    <icon>https://fantaixi.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 饭太稀</rights>
    <entry>
        <title type="html"><![CDATA[20 Java8的其他新特性]]></title>
        <id>https://fantaixi.github.io/post/20-java8-de-qi-ta-xin-te-xing/</id>
        <link href="https://fantaixi.github.io/post/20-java8-de-qi-ta-xin-te-xing/">
        </link>
        <updated>2020-05-06T19:55:28.000Z</updated>
        <content type="html"><![CDATA[<p>一、Java8新特性概述<br>
<img src="https://fantaixi.github.io/post-images/1588795006566.png" alt="" loading="lazy"></p>
<figure data-type="image" tabindex="1"><img src="https://fantaixi.github.io/post-images/1588795031488.png" alt="" loading="lazy"></figure>
<p>二、Lambda表达式<br>
1.Lambda表达式使用前后的对比：<br>
举例一：<br>
@Test<br>
public void test1(){</p>
<pre><code>Runnable r1 = new Runnable() {
    @Override
    public void run() {
        System.out.println(&quot;我爱北京天安门&quot;);
    }
};

r1.run();

System.out.println(&quot;***********************&quot;);

Runnable r2 = () -&gt; System.out.println(&quot;我爱北京故宫&quot;);

r2.run();
</code></pre>
<p>}</p>
<p>举例二：<br>
@Test<br>
public void test2(){</p>
<pre><code>Comparator&lt;Integer&gt; com1 = new Comparator&lt;Integer&gt;() {
    @Override
    public int compare(Integer o1, Integer o2) {
        return Integer.compare(o1,o2);
    }
};

int compare1 = com1.compare(12,21);
System.out.println(compare1);

System.out.println(&quot;***********************&quot;);
//Lambda表达式的写法
Comparator&lt;Integer&gt; com2 = (o1,o2) -&gt; Integer.compare(o1,o2);

int compare2 = com2.compare(32,21);
System.out.println(compare2);


System.out.println(&quot;***********************&quot;);
//方法引用
Comparator&lt;Integer&gt; com3 = Integer :: compare;

int compare3 = com3.compare(32,21);
System.out.println(compare3);
</code></pre>
<p>}<br>
2.Lambda表达式的基本语法：</p>
<ul>
<li>1.举例： (o1,o2) -&gt; Integer.compare(o1,o2);</li>
<li>2.格式：</li>
<li>
<pre><code> -&gt; :lambda操作符 或 箭头操作符
</code></pre>
</li>
<li>
<pre><code> -&gt;左边：lambda形参列表 （其实就是接口中的抽象方法的形参列表
</code></pre>
</li>
<li>
<pre><code> -&gt;右边：lambda体 （其实就是重写的抽象方法的方法体
</code></pre>
</li>
</ul>
<p>3.如何使用：分为六种情况<br>
<img src="https://fantaixi.github.io/post-images/1588795108630.png" alt="" loading="lazy"><br>
<img src="https://fantaixi.github.io/post-images/1588795133842.png" alt="" loading="lazy"></p>
<p>总结六种情况：<br>
-&gt;左边：lambda形参列表的参数类型可以省略(类型推断)；如果lambda形参列表只一个参数，其一对()也可以省略<br>
-&gt;右边：lambda体应该使用一对{}包裹；如果lambda体只一条执行语句（可能是return语句，省略这一对{}和return关键字</p>
<p>三、函数式接口<br>
1.函数式接口的使用说明</p>
<blockquote>
<p>如果一个接口中，只声明了一个抽象方法，则此接口就称为函数式接口。<br>
我们可以在一个接口上使用 @FunctionalInterface 注解，这样做可以检查它是否是一个函数式接口。<br>
Lambda表达式的本质：作为函数式接口的实例</p>
</blockquote>
<p>2.Java8中关于Lambda表达式提供的4个基本的函数式接口：<br>
具体使用：<br>
<img src="https://fantaixi.github.io/post-images/1588795197948.png" alt="" loading="lazy"></p>
<p>3.总结<br>
3.1 何时使用lambda表达式？<br>
当需要对一个函数式接口实例化的时候，可以使用lambda表达式。<br>
3.2 何时使用给定的函数式接口？<br>
如果我们开发中需要定义一个函数式接口，首先看看在已有的jdk提供的函数式接口是否提供了<br>
能满足需求的函数式接口。如果有，则直接调用即可，不需要自己再自定义了。</p>
<p>四、方法引用<br>
方法引用<br>
1.理解：<br>
方法引用可以看做是Lambda表达式深层次的表达。换句话说，方法引用就是Lambda表达式，也就是函数式接口的一个实例，通过方法的名字来指向一个方法。</p>
<p>2.使用情境：<br>
当要传递给Lambda体的操作，已经实现的方法了，可以使用方法引用！</p>
<p>3.格式：<br>
类(或对象) :: 方法名</p>
<p>4.分为如下的三种情况：</p>
<ul>
<li>情况1     对象 :: 非静态方法</li>
<li>情况2     类 :: 静态方法</li>
<li></li>
<li>情况3     类 :: 非静态方法</li>
</ul>
<p>5.要求：</p>
<blockquote>
<p>要求接口中的抽象方法的形参列表和返回值类型与方法引用的方法的形参列表和返回值类型相同！（针对于情况1和情况2）<br>
当函数式接口方法的第一个参数是需要引用方法的调用者，并且第二个参数是需要引用方法的参数(或无参数)时：ClassName::methodName（针对于情况3）</p>
</blockquote>
<p>6.使用建议：<br>
如果给函数式接口提供实例，恰好满足方法引用的使用情境，大家就可以考虑使用方法引用给函数式接口提供实例。如果大家不熟悉方法引用，那么还可以使用lambda表达式。</p>
<p>7.使用举例：<br>
// 情况一：对象 :: 实例方法<br>
//Consumer中的void accept(T t)<br>
//PrintStream中的void println(T t)<br>
@Test<br>
public void test1() {<br>
Consumer<String> con1 = str -&gt; System.out.println(str);<br>
con1.accept(&quot;北京&quot;);<br>
System.out.println(&quot;<em><strong><strong><strong><strong><strong><strong><strong><strong><strong>&quot;);<br>
PrintStream ps = System.out;<br>
Consumer<String> con2 = ps::println;<br>
con2.accept(&quot;beijing&quot;);<br>
}<br>
//Supplier中的T get()<br>
//Employee中的String getName()<br>
@Test<br>
public void test2() {<br>
Employee emp = new Employee(1001,&quot;Tom&quot;,23,5600);<br>
Supplier<String> sup1 = () -&gt; emp.getName();<br>
System.out.println(sup1.get());<br>
System.out.println(&quot;</strong></strong></strong></strong></strong></strong></strong></strong></strong></em>&quot;);<br>
Supplier<String> sup2 = emp::getName;<br>
System.out.println(sup2.get());<br>
}<br>
// 情况二：类 :: 静态方法<br>
//Comparator中的int compare(T t1,T t2)<br>
//Integer中的int compare(T t1,T t2)<br>
@Test<br>
public void test3() {<br>
Comparator<Integer> com1 = (t1,t2) -&gt; Integer.compare(t1,t2);<br>
System.out.println(com1.compare(12,21));<br>
System.out.println(&quot;<em><strong><strong><strong><strong><strong><strong><strong><strong><strong>&quot;);<br>
Comparator<Integer> com2 = Integer::compare;<br>
System.out.println(com2.compare(12,3));<br>
}<br>
//Function中的R apply(T t)<br>
//Math中的Long round(Double d)<br>
@Test<br>
public void test4() {<br>
Function&lt;Double,Long&gt; func = new Function&lt;Double, Long&gt;() {<br>
@Override<br>
public Long apply(Double d) {<br>
return Math.round(d);<br>
}<br>
};<br>
System.out.println(&quot;</strong></strong></strong></strong></strong></strong></strong></strong></strong></em>&quot;);<br>
Function&lt;Double,Long&gt; func1 = d -&gt; Math.round(d);<br>
System.out.println(func1.apply(12.3));<br>
System.out.println(&quot;*******************&quot;);<br>
Function&lt;Double,Long&gt; func2 = Math::round;<br>
System.out.println(func2.apply(12.6));<br>
}</p>
<p>// 情况：类 :: 实例方法  (难度)<br>
// Comparator中的int comapre(T t1,T t2)<br>
// String中的int t1.compareTo(t2)<br>
@Test<br>
public void test5() {<br>
Comparator<String> com1 = (s1,s2) -&gt; s1.compareTo(s2);<br>
System.out.println(com1.compare(&quot;abc&quot;,&quot;abd&quot;));<br>
System.out.println(&quot;<em><strong><strong><strong><strong><strong><strong><strong><strong><strong>&quot;);<br>
Comparator<String> com2 = String :: compareTo;<br>
System.out.println(com2.compare(&quot;abd&quot;,&quot;abm&quot;));<br>
}<br>
//BiPredicate中的boolean test(T t1, T t2);<br>
//String中的boolean t1.equals(t2)<br>
@Test<br>
public void test6() {<br>
BiPredicate&lt;String,String&gt; pre1 = (s1,s2) -&gt; s1.equals(s2);<br>
System.out.println(pre1.test(&quot;abc&quot;,&quot;abc&quot;));<br>
System.out.println(&quot;</strong></strong></strong></strong></strong></strong></strong></strong></strong></em>&quot;);<br>
BiPredicate&lt;String,String&gt; pre2 = String :: equals;<br>
System.out.println(pre2.test(&quot;abc&quot;,&quot;abd&quot;));<br>
}<br>
// Function中的R apply(T t)<br>
// Employee中的String getName();<br>
@Test<br>
public void test7() {<br>
Employee employee = new Employee(1001, &quot;Jerry&quot;, 23, 6000);<br>
Function&lt;Employee,String&gt; func1 = e -&gt; e.getName();<br>
System.out.println(func1.apply(employee));<br>
System.out.println(&quot;*******************&quot;);<br>
Function&lt;Employee,String&gt; func2 = Employee::getName;<br>
System.out.println(func2.apply(employee));<br>
}</p>
<p>五、构造器引用与数组引用<br>
1.构造器引用格式：<br>
类名::new</p>
<p>2.构造器引用使用要求：<br>
和方法引用类似，函数式接口的抽象方法的形参列表和构造器的形参列表一致。抽象方法的返回值类型即为构造器所属的类的类型</p>
<p>3.构造器引用举例：<br>
//Supplier中的T get()<br>
//Employee的空参构造器：Employee()<br>
@Test<br>
public void test1(){<br>
Supplier<Employee> sup = new Supplier<Employee>() {<br>
@Override<br>
public Employee get() {<br>
return new Employee();<br>
}<br>
};<br>
System.out.println(&quot;<em><strong><strong><strong><strong><strong><strong><strong><strong><strong>&quot;);<br>
Supplier<Employee>  sup1 = () -&gt; new Employee();<br>
System.out.println(sup1.get());<br>
System.out.println(&quot;</strong></strong></strong></strong></strong></strong></strong></strong></strong></em>&quot;);<br>
Supplier<Employee>  sup2 = Employee :: new;<br>
System.out.println(sup2.get());<br>
}</p>
<p>//Function中的R apply(T t)<br>
@Test<br>
public void test2(){<br>
Function&lt;Integer,Employee&gt; func1 = id -&gt; new Employee(id);<br>
Employee employee = func1.apply(1001);<br>
System.out.println(employee);<br>
System.out.println(&quot;*******************&quot;);<br>
Function&lt;Integer,Employee&gt; func2 = Employee :: new;<br>
Employee employee1 = func2.apply(1002);<br>
System.out.println(employee1);<br>
}</p>
<p>//BiFunction中的R apply(T t,U u)<br>
@Test<br>
public void test3(){<br>
BiFunction&lt;Integer,String,Employee&gt; func1 = (id,name) -&gt; new Employee(id,name);<br>
System.out.println(func1.apply(1001,&quot;Tom&quot;));<br>
System.out.println(&quot;*******************&quot;);<br>
BiFunction&lt;Integer,String,Employee&gt; func2 = Employee :: new;<br>
System.out.println(func2.apply(1002,&quot;Tom&quot;));<br>
}</p>
<p>4.数组引用格式：<br>
数组类型[] :: new</p>
<p>5.数组引用举例：<br>
//Function中的R apply(T t)<br>
@Test<br>
public void test4(){<br>
Function&lt;Integer,String[]&gt; func1 = length -&gt; new String[length];<br>
String[] arr1 = func1.apply(5);<br>
System.out.println(Arrays.toString(arr1));<br>
System.out.println(&quot;*******************&quot;);<br>
Function&lt;Integer,String[]&gt; func2 = String[] :: new;<br>
String[] arr2 = func2.apply(10);<br>
System.out.println(Arrays.toString(arr2));</p>
<p>}</p>
<p>六、Optional类的使用<br>
java.util.Optional类<br>
1.理解：为了解决java中的空指针问题而生！<br>
Optional<T> 类(java.util.Optional) 是一个容器类，它可以保存类型T的值，代表这个值存在。或者仅仅保存null，表示这个值不存在。原来用 null 表示一个值不存在，现在 Optional 可以更好的表达这个概念。并且可以避<br>
免空指针异常。</p>
<p>2.常用方法：<br>
@Test<br>
public void test1(){<br>
//empty():创建的Optional对象内部的value = null<br>
Optional<Object> op1 = Optional.empty();<br>
if(!op1.isPresent()){//Optional封装的数据是否包含数据<br>
System.out.println(&quot;数据为空&quot;);<br>
}<br>
System.out.println(op1);<br>
System.out.println(op1.isPresent());<br>
//如果Optional封装的数据value为空，则get()报错。否则，value不为空时，返回value.<br>
//        System.out.println(op1.get());<br>
}<br>
@Test<br>
public void test2(){<br>
String str = &quot;hello&quot;;<br>
//        str = null;<br>
//of(T t):封装数据t生成Optional对象。要求t非空，否则报错。<br>
Optional<String> op1 = Optional.of(str);<br>
//get()通常与of()方法搭配使用。用于获取内部的封装的数据value<br>
String str1 = op1.get();<br>
System.out.println(str1);<br>
}<br>
@Test<br>
public void test3(){<br>
String str = &quot;beijing&quot;;<br>
str = null;<br>
//ofNullable(T t) ：封装数据t赋给Optional内部的value。不要求t非空<br>
Optional<String> op1 = Optional.ofNullable(str);<br>
//orElse(T t1):如果Optional内部的value非空，则返回此value值。如果<br>
//value为空，则返回t1.<br>
String str2 = op1.orElse(&quot;shanghai&quot;);<br>
System.out.println(str2);//<br>
}<br>
3.典型练习：<br>
能保证如下的方法执行中不会出现空指针的异常。<br>
//使用Optional类的getGirlName():<br>
public String getGirlName2(Boy boy){<br>
Optional<Boy> boyOptional = Optional.ofNullable(boy);<br>
//此时的boy1一定非空<br>
Boy boy1 = boyOptional.orElse(new Boy(new Girl(&quot;迪丽热巴&quot;)));<br>
Girl girl = boy1.getGirl();<br>
Optional<Girl> girlOptional = Optional.ofNullable(girl);<br>
//girl1一定非空<br>
Girl girl1 = girlOptional.orElse(new Girl(&quot;古力娜扎&quot;));<br>
return girl1.getName();<br>
}<br>
@Test<br>
public void test5(){<br>
Boy boy = null;<br>
boy = new Boy();<br>
boy = new Boy(new Girl(&quot;苍老师&quot;));<br>
String girlName = getGirlName2(boy);<br>
System.out.println(girlName);<br>
}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[19 Java反射机制]]></title>
        <id>https://fantaixi.github.io/post/19-java-fan-she-ji-zhi/</id>
        <link href="https://fantaixi.github.io/post/19-java-fan-she-ji-zhi/">
        </link>
        <updated>2020-05-06T19:41:16.000Z</updated>
        <content type="html"><![CDATA[<p>一、反射的概述<br>
1.什么叫做反射？<br>
Java的反射（reflection）机制是指在程序的运行状态中，可以构造任意一个类的对象，可以了解任意一个对象所属的类，可以了解任意一个类的成员变量和方法，可以调用任意一个对象的属性和方法。 这种动态获取程序信息以及动态调用对象的功能称为Java语言的反射机制。 反射被视为动态语言的关键。</p>
<p>2.关于反射的理解<br>
Reflection（反射)是被视为动态语言的关键，反射机制允许程序在执行期借助于Reflection API取得任何<br>
类的内部信息，并能直接操作任意对象的内部属性及方法。</p>
<p>框架 = 反射 + 注解 + 设计模式。</p>
<p>3.体会反射机制的“动态性”<br>
//体会反射的动态性<br>
@Test<br>
public void test2(){<br>
for(int i = 0;i &lt; 100;i++){<br>
int num = new Random().nextInt(3);//0,1,2<br>
String classPath = &quot;&quot;;<br>
switch(num){<br>
case 0:<br>
classPath = &quot;java.util.Date&quot;;<br>
break;<br>
case 1:<br>
classPath = &quot;java.lang.Object&quot;;<br>
break;<br>
case 2:<br>
classPath = &quot;com.atguigu.java.Person&quot;;<br>
break;<br>
}<br>
try {<br>
Object obj = getInstance(classPath);<br>
System.out.println(obj);<br>
} catch (Exception e) {<br>
e.printStackTrace();<br>
}<br>
}<br>
}<br>
/*<br>
创建一个指定类的对象。<br>
classPath:指定类的全类名<br>
*/<br>
public Object getInstance(String classPath) throws Exception {<br>
Class clazz =  Class.forName(classPath);<br>
return clazz.newInstance();<br>
}</p>
<p>4.反射机制能提供的功能<br>
<img src="https://fantaixi.github.io/post-images/1588794217339.png" alt="" loading="lazy"></p>
<p>5.相关API<br>
java.lang.Class:反射的源头<br>
java.lang.reflect.Method<br>
java.lang.reflect.Field<br>
java.lang.reflect.Constructor<br>
....</p>
<p>二、Class类的理解与获取Class的实例<br>
1.Class类的理解<br>
1)类的加载过程：<br>
程序经过javac.exe命令以后，会生成一个或多个字节码文件(.class结尾)。<br>
接着我们使用java.exe命令对某个字节码文件进行解释运行。相当于将某个字节码文件<br>
加载到内存中。此过程就称为类的加载。加载到内存中的类，我们就称为运行时类，此<br>
运行时类，就作为Class的一个实例。<br>
2)换句话说，Class的实例就对应着一个运行时类。<br>
3)加载到内存中的运行时类，会缓存一定的时间。在此时间之内，我们可以通过不同的方式<br>
来获取此运行时类。</p>
<p>2.获取Class实例的几种方式：（前三种方式需要掌握）<br>
//方式一：调用运行时类的属性：.class<br>
Class clazz1 = Person.class;<br>
System.out.println(clazz1);<br>
//方式二：通过运行时类的对象,调用getClass()<br>
Person p1 = new Person();<br>
Class clazz2 = p1.getClass();<br>
System.out.println(clazz2);<br>
//方式三：调用Class的静态方法：forName(String classPath)<br>
Class clazz3 = Class.forName(&quot;com.atguigu.java.Person&quot;);<br>
//        clazz3 = Class.forName(&quot;java.lang.String&quot;);<br>
System.out.println(clazz3);<br>
System.out.println(clazz1 == clazz2);<br>
System.out.println(clazz1 == clazz3);<br>
//方式四：使用类的加载器：ClassLoader  (了解)<br>
ClassLoader classLoader = ReflectionTest.class.getClassLoader();<br>
Class clazz4 = classLoader.loadClass(&quot;com.atguigu.java.Person&quot;);<br>
System.out.println(clazz4);<br>
System.out.println(clazz1 == clazz4);</p>
<p>3.总结：创建类的对象的方式?<br>
方式一：new + 构造器<br>
方式二：要创建Xxx类的对象，可以考虑：Xxx、Xxxs、XxxFactory、XxxBuilder类中查看是否有<br>
静态方法的存在。可以调用其静态方法，创建Xxx对象。<br>
方式三：通过反射</p>
<p>4.Class实例可以是哪些结构的说明<br>
<img src="https://fantaixi.github.io/post-images/1588794537175.png" alt="" loading="lazy"></p>
<p>三、反射应用一：创建运行时类的对象<br>
1.代码举例<br>
Class<Person> clazz = Person.class;<br>
Person obj = clazz.newInstance();<br>
System.out.println(obj);</p>
<p>2.说明<br>
newInstance():调用此方法，创建对应的运行时类的对象。内部调用了运行时类的空参的构造器。<br>
要想此方法正常的创建运行时类的对象，要求：<br>
1.运行时类必须提供空参的构造器<br>
2.空参的构造器的访问权限得够。通常，设置为public。</p>
<p>在javabean中要求提供一个public的空参构造器。原因：<br>
1.便于通过反射，创建运行时类的对象<br>
2.便于子类继承此运行时类时，默认调用super()时，保证父类此构造器</p>
<p>四、反射应用二：获取运行时类的完整结构<br>
我们可以通过反射，获取对应的运行时类中所有的属性、方法、构造器、父类、接口、父类的泛型、包、注解、异常等。。。。<br>
典型代码：<br>
@Test<br>
public void test1(){<br>
Class clazz = Person.class;<br>
//获取属性结构<br>
//getFields():获取当前运行时类及其父类中声明为public访问权限的属性<br>
Field[] fields = clazz.getFields();<br>
for(Field f : fields){<br>
System.out.println(f);<br>
}<br>
System.out.println();<br>
//getDeclaredFields():获取当前运行时类中声明的所有属性。（不包含父类中声明的属性<br>
Field[] declaredFields = clazz.getDeclaredFields();<br>
for(Field f : declaredFields){<br>
System.out.println(f);<br>
}<br>
}<br>
@Test<br>
public void test1(){<br>
Class clazz = Person.class;<br>
//getMethods():获取当前运行时类及其所父类中声明为public权限的方法<br>
Method[] methods = clazz.getMethods();<br>
for(Method m : methods){<br>
System.out.println(m);<br>
}<br>
System.out.println();<br>
//getDeclaredMethods():获取当前运行时类中声明的所方法。（不包含父类中声明的方法<br>
Method[] declaredMethods = clazz.getDeclaredMethods();<br>
for(Method m : declaredMethods){<br>
System.out.println(m);<br>
}<br>
}<br>
/*<br>
获取构造器结构<br>
<em>/<br>
@Test<br>
public void test1(){<br>
Class clazz = Person.class;<br>
//getConstructors():获取当前运行时类中声明为public的构造器<br>
Constructor[] constructors = clazz.getConstructors();<br>
for(Constructor c : constructors){<br>
System.out.println(c);<br>
}<br>
System.out.println();<br>
//getDeclaredConstructors():获取当前运行时类中声明的所的构造器<br>
Constructor[] declaredConstructors = clazz.getDeclaredConstructors();<br>
for(Constructor c : declaredConstructors){<br>
System.out.println(c);<br>
}<br>
}<br>
/</em><br>
获取运行时类的父类<br>
<em>/<br>
@Test<br>
public void test2(){<br>
Class clazz = Person.class;<br>
Class superclass = clazz.getSuperclass();<br>
System.out.println(superclass);<br>
}<br>
/</em><br>
获取运行时类的带泛型的父类<br>
*/<br>
@Test<br>
public void test3(){<br>
Class clazz = Person.class;</p>
<pre><code>    Type genericSuperclass = clazz.getGenericSuperclass();
    System.out.println(genericSuperclass);
}
/*
获取运行时类的带泛型的父类的泛型
代码：逻辑性代码  vs 功能性代码
 */
@Test
public void test4(){
    Class clazz = Person.class;
    Type genericSuperclass = clazz.getGenericSuperclass();
    ParameterizedType paramType = (ParameterizedType) genericSuperclass;
    //获取泛型类型
    Type[] actualTypeArguments = paramType.getActualTypeArguments();
</code></pre>
<p>//        System.out.println(actualTypeArguments[0].getTypeName());<br>
System.out.println(((Class)actualTypeArguments[0]).getName());<br>
}<br>
/*<br>
获取运行时类实现的接口<br>
<em>/<br>
@Test<br>
public void test5(){<br>
Class clazz = Person.class;<br>
Class[] interfaces = clazz.getInterfaces();<br>
for(Class c : interfaces){<br>
System.out.println(c);<br>
}<br>
System.out.println();<br>
//获取运行时类的父类实现的接口<br>
Class[] interfaces1 = clazz.getSuperclass().getInterfaces();<br>
for(Class c : interfaces1){<br>
System.out.println(c);<br>
}<br>
}<br>
/</em><br>
获取运行时类所在的包<br>
<em>/<br>
@Test<br>
public void test6(){<br>
Class clazz = Person.class;<br>
Package pack = clazz.getPackage();<br>
System.out.println(pack);<br>
}<br>
/</em><br>
获取运行时类声明的注解<br>
*/<br>
@Test<br>
public void test7(){<br>
Class clazz = Person.class;<br>
Annotation[] annotations = clazz.getAnnotations();<br>
for(Annotation annos : annotations){<br>
System.out.println(annos);<br>
}<br>
}</p>
<p>五、反射应用三：获取运行时类的指定结构<br>
调用指定的属性：<br>
@Test<br>
public void testField1() throws Exception {<br>
Class clazz = Person.class;<br>
//创建运行时类的对象<br>
Person p = (Person) clazz.newInstance();<br>
//1. getDeclaredField(String fieldName):获取运行时类中指定变量名的属性<br>
Field name = clazz.getDeclaredField(&quot;name&quot;);<br>
//2.保证当前属性是可访问的<br>
name.setAccessible(true);<br>
//3.获取、设置指定对象的此属性值<br>
name.set(p,&quot;Tom&quot;);<br>
System.out.println(name.get(p));<br>
}<br>
调用指定的方法：<br>
@Test<br>
public void testMethod() throws Exception {<br>
Class clazz = Person.class;<br>
//创建运行时类的对象<br>
Person p = (Person) clazz.newInstance();<br>
/*<br>
1.获取指定的某个方法<br>
getDeclaredMethod():参数1 ：指明获取的方法的名称  参数2：指明获取的方法的形参列表<br>
<em>/<br>
Method show = clazz.getDeclaredMethod(&quot;show&quot;, String.class);<br>
//2.保证当前方法是可访问的<br>
show.setAccessible(true);<br>
/</em><br>
3. 调用方法的invoke():参数1：方法的调用者  参数2：给方法形参赋值的实参<br>
invoke()的返回值即为对应类中调用的方法的返回值。<br>
<em>/<br>
Object returnValue = show.invoke(p,&quot;CHN&quot;); //String nation = p.show(&quot;CHN&quot;);<br>
System.out.println(returnValue);<br>
System.out.println(&quot;<em><strong><strong><strong><strong><strong><strong>如何调用静态方法</strong></strong></strong></strong></strong></strong></em></em>***&quot;);<br>
// private static void showDesc()<br>
Method showDesc = clazz.getDeclaredMethod(&quot;showDesc&quot;);<br>
showDesc.setAccessible(true);<br>
//如果调用的运行时类中的方法没返回值，则此invoke()返回null<br>
//        Object returnVal = showDesc.invoke(null);<br>
Object returnVal = showDesc.invoke(Person.class);<br>
System.out.println(returnVal);//null<br>
}<br>
调用指定的构造器：<br>
@Test<br>
public void testConstructor() throws Exception {<br>
Class clazz = Person.class;<br>
//private Person(String name)<br>
/*<br>
1.获取指定的构造器<br>
getDeclaredConstructor():参数：指明构造器的参数列表<br>
*/<br>
Constructor constructor = clazz.getDeclaredConstructor(String.class);<br>
//2.保证此构造器是可访问的<br>
constructor.setAccessible(true);<br>
//3.调用此构造器创建运行时类的对象<br>
Person per = (Person) constructor.newInstance(&quot;Tom&quot;);<br>
System.out.println(per);<br>
}</p>
<p>六、反射应用四：动态代理<br>
1.代理模式的原理：<br>
使用一个代理将对象包装起来, 然后用该代理对象取代原始对象。任何对原始对象的调用都要通过代理。代理对象决定是否以及何时将方法调用转到原始对象上。</p>
<p>2.静态代理<br>
2.1 举例：<br>
实现Runnable接口的方法创建多线程。<br>
Class MyThread implements Runnable{} //相当于被代理类<br>
Class Thread implements Runnable{} //相当于代理类<br>
main(){<br>
MyThread t = new MyThread();<br>
Thread thread = new Thread(t);<br>
thread.start();//启动线程；调用线程的run()<br>
}<br>
2.2 静态代理的缺点：<br>
① 代理类和目标对象的类都是在编译期间确定下来，不利于程序的扩展。<br>
② 每一个代理类只能为一个接口服务，这样一来程序开发中必然产生过多的代理。</p>
<p>3.动态代理的特点：<br>
动态代理是指客户通过代理类来调用其它对象的方法，并且是在程序运行时根据需要动态创建目标类的代理对<br>
象。</p>
<p>4.动态代理的实现<br>
4.1 需要解决的两个主要问题：<br>
问题一：如何根据加载到内存中的被代理类，动态的创建一个代理类及其对象。<br>
（通过Proxy.newProxyInstance()实现）<br>
问题二：当通过代理类的对象调用方法a时，如何动态的去调用被代理类中的同名方法a。<br>
(通过InvocationHandler接口的实现类及其方法invoke())<br>
4.2 代码实现：<br>
/**<br>
*</p>
<ul>
<li>动态代理的举例</li>
<li></li>
<li>@author shkstart</li>
<li>@create 2019 上午 10:18<br>
*/<br>
interface Human{<br>
String getBelief();<br>
void eat(String food);<br>
}<br>
//被代理类<br>
class SuperMan implements Human{<br>
@Override<br>
public String getBelief() {<br>
return &quot;I believe I can fly!&quot;;<br>
}<br>
@Override<br>
public void eat(String food) {<br>
System.out.println(&quot;我喜欢吃&quot; + food);<br>
}<br>
}<br>
class HumanUtil{<br>
public void method1(){<br>
System.out.println(&quot;<mark><mark><mark><mark><mark><mark><mark><mark><mark><mark>通用方法一</mark></mark></mark></mark></mark></mark></mark></mark></mark></mark>&quot;);<br>
}<br>
public void method2(){<br>
System.out.println(&quot;<mark><mark><mark><mark><mark><mark><mark><mark><mark><mark>通用方法二</mark></mark></mark></mark></mark></mark></mark></mark></mark></mark>&quot;);<br>
}<br>
}</li>
</ul>
<p>class ProxyFactory{<br>
//调用此方法，返回一个代理类的对象。解决问题一<br>
public static Object getProxyInstance(Object obj){//obj:被代理类的对象<br>
MyInvocationHandler handler = new MyInvocationHandler();<br>
handler.bind(obj);<br>
return Proxy.newProxyInstance(obj.getClass().getClassLoader(),obj.getClass().getInterfaces(),handler);<br>
}<br>
}<br>
class MyInvocationHandler implements InvocationHandler{<br>
private Object obj;//需要使用被代理类的对象进行赋值<br>
public void bind(Object obj){<br>
this.obj = obj;<br>
}<br>
//当我们通过代理类的对象，调用方法a时，就会自动的调用如下的方法：invoke()<br>
//将被代理类要执行的方法a的功能就声明在invoke()中<br>
@Override<br>
public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {<br>
HumanUtil util = new HumanUtil();<br>
util.method1();<br>
//method:即为代理类对象调用的方法，此方法也就作为了被代理类对象要调用的方法<br>
//obj:被代理类的对象<br>
Object returnValue = method.invoke(obj,args);<br>
util.method2();<br>
//上述方法的返回值就作为当前类中的invoke()的返回值。<br>
return returnValue;<br>
}<br>
}<br>
public class ProxyTest {<br>
public static void main(String[] args) {<br>
SuperMan superMan = new SuperMan();<br>
//proxyInstance:代理类的对象<br>
Human proxyInstance = (Human) ProxyFactory.getProxyInstance(superMan);<br>
//当通过代理类对象调用方法时，会自动的调用被代理类中同名的方法<br>
String belief = proxyInstance.getBelief();<br>
System.out.println(belief);<br>
proxyInstance.eat(&quot;四川麻辣烫&quot;);<br>
System.out.println(&quot;*****************************&quot;);<br>
NikeClothFactory nikeClothFactory = new NikeClothFactory();<br>
ClothFactory proxyClothFactory = (ClothFactory) ProxyFactory.getProxyInstance(nikeClothFactory);<br>
proxyClothFactory.produceCloth();<br>
}<br>
}<br>
体会：反射的动态性。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[18 网络编程]]></title>
        <id>https://fantaixi.github.io/post/18-wang-luo-bian-cheng/</id>
        <link href="https://fantaixi.github.io/post/18-wang-luo-bian-cheng/">
        </link>
        <updated>2020-05-06T19:33:37.000Z</updated>
        <content type="html"><![CDATA[<p>一、InetAddress类的使用<br>
1.实现网络通信需要解决的两个问题</p>
<ul>
<li>1.如何准确地定位网络上一台或多台主机；定位主机上的特定的应用</li>
<li>2.找到主机后如何可靠高效地进行数据传输</li>
</ul>
<p>2.网络通信的两个要素：</p>
<ul>
<li>1.对应问题一：IP和端口号</li>
<li>2.对应问题二：提供网络通信协议：TCP/IP参考模型（应用层、传输层、网络层、物理+数据链路层）</li>
</ul>
<p>3.通信要素一：IP和端口号<br>
1.IP的理解</p>
<ul>
<li>
<ol>
<li>IP:唯一的标识 Internet 上的计算机（通信实体）</li>
</ol>
</li>
<li>
<ol start="2">
<li>在Java中使用InetAddress类代表IP</li>
</ol>
</li>
<li>
<ol start="3">
<li>IP分类：IPv4 和 IPv6 ; 万维网 和 局域网</li>
</ol>
</li>
<li>
<ol start="4">
<li>域名:   www.baidu.com   www.mi.com  www.sina.com  www.jd.com</li>
</ol>
</li>
<li>域名解析：域名容易记忆，当在连接网络时输入一个主机的域名后，域名服务器(DNS)负责将域名转化成IP地址，这样才能和主机建立连接。 -------域名解析</li>
<li>
<ol start="5">
<li>本地回路地址：127.0.0.1 对应着：localhost</li>
</ol>
</li>
<li></li>
</ul>
<p>2.InetAddress类:此类的一个对象就代表着一个具体的IP地址<br>
2.1实例化<br>
getByName(String host) 、 getLocalHost()</p>
<p>2.2常用方法<br>
getHostName() / getHostAddress()</p>
<p>3.端口号：正在计算机上运行的进程。</p>
<ul>
<li>要求：不同的进程不同的端口号</li>
<li>范围：被规定为一个 16 位的整数 0~65535。</li>
</ul>
<p>端口号与IP地址的组合得出一个网络套接字：Socket</p>
<p>4.通信要素二：网络通信协议</p>
<ol>
<li>分型模型<br>
<img src="https://fantaixi.github.io/post-images/1588793717318.png" alt="" loading="lazy"><br>
2.TCP和UDP的区别<br>
<img src="https://fantaixi.github.io/post-images/1588793747754.png" alt="" loading="lazy"><br>
3.TCP三次握手和四次挥手<br>
<img src="https://fantaixi.github.io/post-images/1588793796025.png" alt="" loading="lazy"></li>
</ol>
<figure data-type="image" tabindex="1"><img src="https://fantaixi.github.io/post-images/1588793803982.png" alt="" loading="lazy"></figure>
<p>二、TCP网络编程<br>
代码示例1：客户端发送信息给服务端，服务端将数据显示在控制台上<br>
//客户端<br>
@Test<br>
public void client()  {<br>
Socket socket = null;<br>
OutputStream os = null;<br>
try {<br>
//1.创建Socket对象，指明服务器端的ip和端口号<br>
InetAddress inet = InetAddress.getByName(&quot;192.168.14.100&quot;);<br>
socket = new Socket(inet,8899);<br>
//2.获取一个输出流，用于输出数据<br>
os = socket.getOutputStream();<br>
//3.写出数据的操作<br>
os.write(&quot;你好，我是客户端mm&quot;.getBytes());<br>
} catch (IOException e) {<br>
e.printStackTrace();<br>
} finally {<br>
//4.资源的关闭<br>
if(os != null){<br>
try {<br>
os.close();<br>
} catch (IOException e) {<br>
e.printStackTrace();<br>
}<br>
}<br>
if(socket != null){<br>
try {<br>
socket.close();<br>
} catch (IOException e) {<br>
e.printStackTrace();<br>
}<br>
}<br>
}<br>
}<br>
//服务端<br>
@Test<br>
public void server()  {<br>
ServerSocket ss = null;<br>
Socket socket = null;<br>
InputStream is = null;<br>
ByteArrayOutputStream baos = null;<br>
try {<br>
//1.创建服务器端的ServerSocket，指明自己的端口号<br>
ss = new ServerSocket(8899);<br>
//2.调用accept()表示接收来自于客户端的socket<br>
socket = ss.accept();<br>
//3.获取输入流<br>
is = socket.getInputStream();<br>
//不建议这样写，可能会乱码<br>
//        byte[] buffer = new byte[1024];<br>
//        int len;<br>
//        while((len = is.read(buffer)) != -1){<br>
//            String str = new String(buffer,0,len);<br>
//            System.out.print(str);<br>
//        }<br>
//4.读取输入流中的数据<br>
baos = new ByteArrayOutputStream();<br>
byte[] buffer = new byte[5];<br>
int len;<br>
while((len = is.read(buffer)) != -1){<br>
baos.write(buffer,0,len);<br>
}<br>
System.out.println(baos.toString());<br>
System.out.println(&quot;收到了来自于：&quot; + socket.getInetAddress().getHostAddress() + &quot;的数据&quot;);</p>
<pre><code>    } catch (IOException e) {
        e.printStackTrace();
    } finally {
        if(baos != null){
            //5.关闭资源
            try {
                baos.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        if(is != null){
            try {
                is.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        if(socket != null){
            try {
                socket.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        if(ss != null){
            try {
                ss.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}
</code></pre>
<p>代码示例2：客户端发送文件给服务端，服务端将文件保存在本地。<br>
/*<br>
这里涉及到的异常，应该使用try-catch-finally处理<br>
<em>/<br>
@Test<br>
public void client() throws IOException {<br>
//1.<br>
Socket socket = new Socket(InetAddress.getByName(&quot;127.0.0.1&quot;),9090);<br>
//2.<br>
OutputStream os = socket.getOutputStream();<br>
//3.<br>
FileInputStream fis = new FileInputStream(new File(&quot;beauty.jpg&quot;));<br>
//4.<br>
byte[] buffer = new byte[1024];<br>
int len;<br>
while((len = fis.read(buffer)) != -1){<br>
os.write(buffer,0,len);<br>
}<br>
//5.<br>
fis.close();<br>
os.close();<br>
socket.close();<br>
}<br>
/</em><br>
这里涉及到的异常，应该使用try-catch-finally处理<br>
<em>/<br>
@Test<br>
public void server() throws IOException {<br>
//1.<br>
ServerSocket ss = new ServerSocket(9090);<br>
//2.<br>
Socket socket = ss.accept();<br>
//3.<br>
InputStream is = socket.getInputStream();<br>
//4.<br>
FileOutputStream fos = new FileOutputStream(new File(&quot;beauty1.jpg&quot;));<br>
//5.<br>
byte[] buffer = new byte[1024];<br>
int len;<br>
while((len = is.read(buffer)) != -1){<br>
fos.write(buffer,0,len);<br>
}<br>
//6.<br>
fos.close();<br>
is.close();<br>
socket.close();<br>
ss.close();<br>
}<br>
代码示例3：从客户端发送文件给服务端，服务端保存到本地。并返回“发送成功”给客户端。并关闭相应的连接。<br>
/</em><br>
这里涉及到的异常，应该使用try-catch-finally处理<br>
<em>/<br>
@Test<br>
public void client() throws IOException {<br>
//1.<br>
Socket socket = new Socket(InetAddress.getByName(&quot;127.0.0.1&quot;),9090);<br>
//2.<br>
OutputStream os = socket.getOutputStream();<br>
//3.<br>
FileInputStream fis = new FileInputStream(new File(&quot;beauty.jpg&quot;));<br>
//4.<br>
byte[] buffer = new byte[1024];<br>
int len;<br>
while((len = fis.read(buffer)) != -1){<br>
os.write(buffer,0,len);<br>
}<br>
//关闭数据的输出<br>
socket.shutdownOutput();<br>
//5.接收来自于服务器端的数据，并显示到控制台上<br>
InputStream is = socket.getInputStream();<br>
ByteArrayOutputStream baos = new ByteArrayOutputStream();<br>
byte[] bufferr = new byte[20];<br>
int len1;<br>
while((len1 = is.read(buffer)) != -1){<br>
baos.write(buffer,0,len1);<br>
}<br>
System.out.println(baos.toString());<br>
//6.<br>
fis.close();<br>
os.close();<br>
socket.close();<br>
baos.close();<br>
}<br>
/</em><br>
这里涉及到的异常，应该使用try-catch-finally处理<br>
*/<br>
@Test<br>
public void server() throws IOException {<br>
//1.<br>
ServerSocket ss = new ServerSocket(9090);<br>
//2.<br>
Socket socket = ss.accept();<br>
//3.<br>
InputStream is = socket.getInputStream();<br>
//4.<br>
FileOutputStream fos = new FileOutputStream(new File(&quot;beauty2.jpg&quot;));<br>
//5.<br>
byte[] buffer = new byte[1024];<br>
int len;<br>
while((len = is.read(buffer)) != -1){<br>
fos.write(buffer,0,len);<br>
}<br>
System.out.println(&quot;图片传输完成&quot;);<br>
//6.服务器端给予客户端反馈<br>
OutputStream os = socket.getOutputStream();<br>
os.write(&quot;你好，美女，照片我已收到，非常漂亮！&quot;.getBytes());<br>
//7.<br>
fos.close();<br>
is.close();<br>
socket.close();<br>
ss.close();<br>
os.close();<br>
}</p>
<p>三、UDP网络编程<br>
代码示例：<br>
//发送端<br>
@Test<br>
public void sender() throws IOException {<br>
DatagramSocket socket = new DatagramSocket();<br>
String str = &quot;我是UDP方式发送的导弹&quot;;<br>
byte[] data = str.getBytes();<br>
InetAddress inet = InetAddress.getLocalHost();<br>
DatagramPacket packet = new DatagramPacket(data,0,data.length,inet,9090);<br>
socket.send(packet);<br>
socket.close();<br>
}<br>
//接收端<br>
@Test<br>
public void receiver() throws IOException {<br>
DatagramSocket socket = new DatagramSocket(9090);<br>
byte[] buffer = new byte[100];<br>
DatagramPacket packet = new DatagramPacket(buffer,0,buffer.length);<br>
socket.receive(packet);<br>
System.out.println(new String(packet.getData(),0,packet.getLength()));<br>
socket.close();<br>
}</p>
<p>四、URL编程<br>
1.URL(Uniform Resource Locator)的理解:<br>
统一资源定位符，对应着互联网的某一资源地址</p>
<p>2.URL的5个基本结构：</p>
<ul>
<li>http://localhost:8080/examples/beauty.jpg?username=Tom</li>
<li>协议   主机名    端口号  资源地址           参数列表<br>
3.如何实例化:<br>
URL url = new URL(&quot;http://localhost:8080/examples/beauty.jpg?username=Tom&quot;);</li>
</ul>
<p>4.常用方法：<br>
<img src="https://fantaixi.github.io/post-images/1588794043895.png" alt="" loading="lazy"></p>
<p>5.可以读取、下载对应的url资源：<br>
public static void main(String[] args) {<br>
HttpURLConnection urlConnection = null;<br>
InputStream is = null;<br>
FileOutputStream fos = null;<br>
try {<br>
URL url = new URL(&quot;http://localhost:8080/examples/beauty.jpg&quot;);<br>
urlConnection = (HttpURLConnection) url.openConnection();<br>
urlConnection.connect();<br>
is = urlConnection.getInputStream();<br>
fos = new FileOutputStream(&quot;day10\beauty3.jpg&quot;);<br>
byte[] buffer = new byte[1024];<br>
int len;<br>
while((len = is.read(buffer)) != -1){<br>
fos.write(buffer,0,len);<br>
}<br>
System.out.println(&quot;下载完成&quot;);<br>
} catch (IOException e) {<br>
e.printStackTrace();<br>
} finally {<br>
//关闭资源<br>
if(is != null){<br>
try {<br>
is.close();<br>
} catch (IOException e) {<br>
e.printStackTrace();<br>
}<br>
}<br>
if(fos != null){<br>
try {<br>
fos.close();<br>
} catch (IOException e) {<br>
e.printStackTrace();<br>
}<br>
}<br>
if(urlConnection != null){<br>
urlConnection.disconnect();<br>
}<br>
}<br>
}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[17 Java IO流]]></title>
        <id>https://fantaixi.github.io/post/17-java-io-liu/</id>
        <link href="https://fantaixi.github.io/post/17-java-io-liu/">
        </link>
        <updated>2020-05-06T19:13:20.000Z</updated>
        <content type="html"><![CDATA[<p>一、File类的使用<br>
1.File类的理解</p>
<ul>
<li>
<ol>
<li>File类的一个对象，代表一个文件或一个文件目录(俗称：文件夹)</li>
</ol>
</li>
<li>
<ol start="2">
<li>File类声明在java.io包下</li>
</ol>
</li>
<li>
<ol start="3">
<li>File类中涉及到关于文件或文件目录的创建、删除、重命名、修改时间、文件大小等方法，</li>
</ol>
</li>
<li>并未涉及到写入或读取文件内容的操作。如果需要读取或写入文件内容，必须使用IO流来完成。</li>
<li>
<ol start="4">
<li>后续File类的对象常会作为参数传递到流的构造器中，指明读取或写入的&quot;终点&quot;.</li>
</ol>
</li>
</ul>
<p>2.File的实例化<br>
2.1 常用构造器<br>
File(String filePath)<br>
File(String parentPath,String childPath)<br>
File(File parentFile,String childPath)</p>
<p>2.2 路径的分类<br>
相对路径：相较于某个路径下，指明的路径。<br>
绝对路径：包含盘符在内的文件或文件目录的路径</p>
<p>2.3 路径分隔符<br>
windows和DOS系统默认使用“\”来表示<br>
UNIX和URL使用“/”来表示</p>
<p>3.File类的常用方法<br>
<img src="https://fantaixi.github.io/post-images/1588792509580.png" alt="" loading="lazy"><br>
<img src="https://fantaixi.github.io/post-images/1588792535704.png" alt="" loading="lazy"><br>
<img src="https://fantaixi.github.io/post-images/1588792564929.png" alt="" loading="lazy"></p>
<p>二、IO流概述<br>
1.流的分类</p>
<ul>
<li>1.操作数据单位：字节流、字符流</li>
<li>2.数据的流向：输入流、输出流</li>
<li>3.流的角色：节点流、处理流<br>
图示：<br>
<img src="https://fantaixi.github.io/post-images/1588792701873.png" alt="" loading="lazy"><br>
2.流的体系结构<br>
<img src="https://fantaixi.github.io/post-images/1588792732018.png" alt="" loading="lazy"><br>
说明：红框对应的是IO流中的4个抽象基类。<br>
蓝框的流需要大家重点关注。</li>
</ul>
<p>3.重点说明的几个流结构<br>
<img src="https://fantaixi.github.io/post-images/1588792762677.png" alt="" loading="lazy"><br>
4.输入、输出的标准化过程<br>
4.1 输入过程<br>
① 创建File类的对象，指明读取的数据的来源。（要求此文件一定要存在）<br>
② 创建相应的输入流，将File类的对象作为参数，传入流的构造器中<br>
③ 具体的读入过程：<br>
创建相应的byte[] 或 char[]。<br>
④ 关闭流资源<br>
说明：程序中出现的异常需要使用try-catch-finally处理。<br>
4.2 输出过程<br>
① 创建File类的对象，指明写出的数据的位置。（不要求此文件一定要存在）<br>
② 创建相应的输出流，将File类的对象作为参数，传入流的构造器中<br>
③ 具体的写出过程：<br>
write(char[]/byte[] buffer,0,len)<br>
④ 关闭流资源<br>
说明：程序中出现的异常需要使用try-catch-finally处理。</p>
<p>三、节点流（或文件流）<br>
1.FileReader/FileWriter的使用：<br>
1.1 FileReader的使用<br>
/*<br>
说明点：</p>
<ol>
<li>
<p>read()的理解：返回读入的一个字符。如果达到文件末尾，返回-1</p>
</li>
<li>
<p>异常的处理：为了保证流资源一定可以执行关闭操作。需要使用try-catch-finally处理</p>
</li>
<li>
<p>读入的文件一定要存在，否则就会报FileNotFoundException。<br>
*/<br>
@Test<br>
public void testFileReader1()  {<br>
FileReader fr = null;<br>
try {<br>
//1.File类的实例化<br>
File file = new File(&quot;hello.txt&quot;);</p>
<pre><code>     //2.FileReader流的实例化
     fr = new FileReader(file);

     //3.读入的操作
     //read(char[] cbuf):返回每次读入cbuf数组中的字符的个数。如果达到文件末尾，返回-1
     char[] cbuf = new char[5];
     int len;
     while((len = fr.read(cbuf)) != -1){
         //方式一：
         //错误的写法
</code></pre>
</li>
</ol>
<p>//                for(int i = 0;i &lt; cbuf.length;i++){<br>
//                    System.out.print(cbuf[i]);<br>
//                }<br>
//正确的写法<br>
//                for(int i = 0;i &lt; len;i++){<br>
//                    System.out.print(cbuf[i]);<br>
//                }<br>
//方式二：<br>
//错误的写法,对应着方式一的错误的写法<br>
//                String str = new String(cbuf);<br>
//                System.out.print(str);<br>
//正确的写法<br>
String str = new String(cbuf,0,len);<br>
System.out.print(str);<br>
}<br>
} catch (IOException e) {<br>
e.printStackTrace();<br>
} finally {<br>
if(fr != null){<br>
//4.资源的关闭<br>
try {<br>
fr.close();<br>
} catch (IOException e) {<br>
e.printStackTrace();<br>
}<br>
}<br>
}<br>
}<br>
1.2 FileWriter的使用<br>
/*<br>
从内存中写出数据到硬盘的文件里。<br>
说明：</p>
<ol>
<li>输出操作，对应的File可以不存在的。并不会报异常</li>
<li>File对应的硬盘中的文件如果不存在，在输出的过程中，会自动创建此文件。<br>
File对应的硬盘中的文件如果存在：<br>
如果流使用的构造器是：FileWriter(file,false) / FileWriter(file):对原文件的覆盖<br>
如果流使用的构造器是：FileWriter(file,true):不会对原文件覆盖，而是在原文件基础上追加内容<br>
*/<br>
@Test<br>
public void testFileWriter() {<br>
FileWriter fw = null;<br>
try {<br>
//1.提供File类的对象，指明写出到的文件<br>
File file = new File(&quot;hello1.txt&quot;);<br>
//2.提供FileWriter的对象，用于数据的写出<br>
fw = new FileWriter(file,false);<br>
//3.写出的操作<br>
fw.write(&quot;I have a dream!\n&quot;);<br>
fw.write(&quot;you need to have a dream!&quot;);<br>
} catch (IOException e) {<br>
e.printStackTrace();<br>
} finally {<br>
//4.流资源的关闭<br>
if(fw != null){<br>
try {<br>
fw.close();<br>
} catch (IOException e) {<br>
e.printStackTrace();<br>
}<br>
}<br>
}<br>
}<br>
1.3 文本文件的复制：<br>
@Test<br>
public void testFileReaderFileWriter() {<br>
FileReader fr = null;<br>
FileWriter fw = null;<br>
try {<br>
//1.创建File类的对象，指明读入和写出的文件<br>
File srcFile = new File(&quot;hello.txt&quot;);<br>
File destFile = new File(&quot;hello2.txt&quot;);<br>
//不能使用字符流来处理图片等字节数据<br>
//            File srcFile = new File(&quot;爱情与友情.jpg&quot;);<br>
//            File destFile = new File(&quot;爱情与友情1.jpg&quot;);<br>
//2.创建输入流和输出流的对象<br>
fr = new FileReader(srcFile);<br>
fw = new FileWriter(destFile);<br>
//3.数据的读入和写出操作<br>
char[] cbuf = new char[5];<br>
int len;//记录每次读入到cbuf数组中的字符的个数<br>
while((len = fr.read(cbuf)) != -1){<br>
//每次写出len个字符<br>
fw.write(cbuf,0,len);<br>
}<br>
} catch (IOException e) {<br>
e.printStackTrace();<br>
} finally {<br>
//4.关闭流资源<br>
//方式一：<br>
//            try {<br>
//                if(fw != null)<br>
//                    fw.close();<br>
//            } catch (IOException e) {<br>
//                e.printStackTrace();<br>
//            }finally{<br>
//                try {<br>
//                    if(fr != null)<br>
//                        fr.close();<br>
//                } catch (IOException e) {<br>
//                    e.printStackTrace();<br>
//                }<br>
//            }<br>
//方式二：<br>
try {<br>
if(fw != null)<br>
fw.close();<br>
} catch (IOException e) {<br>
e.printStackTrace();<br>
}<br>
try {<br>
if(fr != null)<br>
fr.close();<br>
} catch (IOException e) {<br>
e.printStackTrace();<br>
}<br>
}<br>
}<br>
2.FileInputStream / FileOutputStream的使用：</li>
</ol>
<ul>
<li>
<ol>
<li>对于文本文件(.txt,.java,.c,.cpp)，使用字符流处理</li>
</ol>
</li>
<li>
<ol start="2">
<li>对于非文本文件(.jpg,.mp3,.mp4,.avi,.doc,.ppt,...)，使用字节流处理<br>
/*<br>
实现对图片的复制操作<br>
*/<br>
@Test<br>
public void testFileInputOutputStream()  {<br>
FileInputStream fis = null;<br>
FileOutputStream fos = null;<br>
try {<br>
//1.造文件<br>
File srcFile = new File(&quot;爱情与友情.jpg&quot;);<br>
File destFile = new File(&quot;爱情与友情2.jpg&quot;);<br>
//2.造流<br>
fis = new FileInputStream(srcFile);<br>
fos = new FileOutputStream(destFile);<br>
//3.复制的过程<br>
byte[] buffer = new byte[5];<br>
int len;<br>
while((len = fis.read(buffer)) != -1){<br>
fos.write(buffer,0,len);<br>
}<br>
} catch (IOException e) {<br>
e.printStackTrace();<br>
} finally {<br>
if(fos != null){<br>
//4.关闭流<br>
try {<br>
fos.close();<br>
} catch (IOException e) {<br>
e.printStackTrace();<br>
}<br>
}<br>
if(fis != null){<br>
try {<br>
fis.close();<br>
} catch (IOException e) {<br>
e.printStackTrace();<br>
}<br>
}<br>
}<br>
}</li>
</ol>
</li>
</ul>
<p>四、缓冲流的使用<br>
1.缓冲流涉及到的类：</p>
<ul>
<li>BufferedInputStream</li>
<li>BufferedOutputStream</li>
<li>BufferedReader</li>
<li>BufferedWriter</li>
</ul>
<p>2.作用：<br>
作用：提供流的读取、写入的速度<br>
提高读写速度的原因：内部提供了一个缓冲区。默认情况下是8kb</p>
<p>3.典型代码<br>
3.1 使用BufferedInputStream和BufferedOutputStream:处理非文本文件<br>
//实现文件复制的方法<br>
public void copyFileWithBuffered(String srcPath,String destPath){<br>
BufferedInputStream bis = null;<br>
BufferedOutputStream bos = null;<br>
try {<br>
//1.造文件<br>
File srcFile = new File(srcPath);<br>
File destFile = new File(destPath);<br>
//2.造流<br>
//2.1 造节点流<br>
FileInputStream fis = new FileInputStream((srcFile));<br>
FileOutputStream fos = new FileOutputStream(destFile);<br>
//2.2 造缓冲流<br>
bis = new BufferedInputStream(fis);<br>
bos = new BufferedOutputStream(fos);<br>
//3.复制的细节：读取、写入<br>
byte[] buffer = new byte[1024];<br>
int len;<br>
while((len = bis.read(buffer)) != -1){<br>
bos.write(buffer,0,len);<br>
}<br>
} catch (IOException e) {<br>
e.printStackTrace();<br>
} finally {<br>
//4.资源关闭<br>
//要求：先关闭外层的流，再关闭内层的流<br>
if(bos != null){<br>
try {<br>
bos.close();<br>
} catch (IOException e) {<br>
e.printStackTrace();<br>
}<br>
}<br>
if(bis != null){<br>
try {<br>
bis.close();<br>
} catch (IOException e) {<br>
e.printStackTrace();<br>
}<br>
}<br>
//说明：关闭外层流的同时，内层流也会自动的进行关闭。关于内层流的关闭，我们可以省略.<br>
//        fos.close();<br>
//        fis.close();<br>
}<br>
}</p>
<p>3.2 使用BufferedReader和BufferedWriter：处理文本文件<br>
@Test<br>
public void testBufferedReaderBufferedWriter(){<br>
BufferedReader br = null;<br>
BufferedWriter bw = null;<br>
try {<br>
//创建文件和相应的流<br>
br = new BufferedReader(new FileReader(new File(&quot;dbcp.txt&quot;)));<br>
bw = new BufferedWriter(new FileWriter(new File(&quot;dbcp1.txt&quot;)));<br>
//读写操作<br>
//方式一：使用char[]数组<br>
//            char[] cbuf = new char[1024];<br>
//            int len;<br>
//            while((len = br.read(cbuf)) != -1){<br>
//                bw.write(cbuf,0,len);<br>
//    //            bw.flush();<br>
//            }<br>
//方式二：使用String<br>
String data;<br>
while((data = br.readLine()) != null){<br>
//方法一：<br>
//                bw.write(data + &quot;\n&quot;);//data中不包含换行符<br>
//方法二：<br>
bw.write(data);//data中不包含换行符<br>
bw.newLine();//提供换行的操作</p>
<pre><code>        }
    } catch (IOException e) {
        e.printStackTrace();
    } finally {
        //关闭资源
        if(bw != null){
            try {
                bw.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        if(br != null){
            try {
                br.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}
</code></pre>
<p>五、转换流的使用<br>
1.转换流涉及到的类：属于字符流<br>
InputStreamReader：将一个字节的输入流转换为字符的输入流<br>
解码：字节、字节数组  ---&gt;字符数组、字符串</p>
<p>OutputStreamWriter：将一个字符的输出流转换为字节的输出流<br>
编码：字符数组、字符串 ---&gt; 字节、字节数组</p>
<p>说明：编码决定了解码的方式</p>
<p>2.作用：提供字节流与字符流之间的转换</p>
<p>3.图示：<br>
<img src="https://fantaixi.github.io/post-images/1588793047441.png" alt="" loading="lazy"></p>
<p>4.典型实现：<br>
@Test<br>
public void test1() throws IOException {</p>
<pre><code>    FileInputStream fis = new FileInputStream(&quot;dbcp.txt&quot;);
</code></pre>
<p>//        InputStreamReader isr = new InputStreamReader(fis);//使用系统默认的字符集<br>
//参数2指明了字符集，具体使用哪个字符集，取决于文件dbcp.txt保存时使用的字符集<br>
InputStreamReader isr = new InputStreamReader(fis,&quot;UTF-8&quot;);//使用系统默认的字符集<br>
char[] cbuf = new char[20];<br>
int len;<br>
while((len = isr.read(cbuf)) != -1){<br>
String str = new String(cbuf,0,len);<br>
System.out.print(str);<br>
}<br>
isr.close();<br>
}<br>
/*<br>
此时处理异常的话，仍然应该使用try-catch-finally<br>
综合使用InputStreamReader和OutputStreamWriter<br>
*/<br>
@Test<br>
public void test2() throws Exception {<br>
//1.造文件、造流<br>
File file1 = new File(&quot;dbcp.txt&quot;);<br>
File file2 = new File(&quot;dbcp_gbk.txt&quot;);</p>
<pre><code>FileInputStream fis = new FileInputStream(file1);
FileOutputStream fos = new FileOutputStream(file2);

InputStreamReader isr = new InputStreamReader(fis,&quot;utf-8&quot;);
OutputStreamWriter osw = new OutputStreamWriter(fos,&quot;gbk&quot;);

//2.读写过程
char[] cbuf = new char[20];
int len;
while((len = isr.read(cbuf)) != -1){
    osw.write(cbuf,0,len);
}
//3.关闭资源
isr.close();
osw.close();
</code></pre>
<p>}<br>
5.说明：<br>
//文件编码的方式（比如：GBK），决定了解析时使用的字符集（也只能是GBK）。</p>
<p>补充：编码集<br>
常见的编码表<br>
ASCII：美国标准信息交换码。用一个字节的7位可以表示。<br>
ISO8859-1：拉丁码表。欧洲码表用一个字节的8位表示。<br>
GB2312：中国的中文编码表。最多两个字节编码所有字符<br>
GBK：中国的中文编码表升级，融合了更多的中文文字符号。最多两个字节编码<br>
Unicode：国际标准码，融合了目前人类使用的所字符。为每个字符分配唯一的字符码。所有的文字都用两个字节来表示。<br>
UTF-8：变长的编码方式，可用1-4个字节来表示一个字符。</p>
<p>六、其他的流的使用</p>
<ol>
<li>标准的输入输出流：<br>
System.in:标准的输入流，默认从键盘输入<br>
System.out:标准的输出流，默认从控制台输出</li>
</ol>
<p>修改默认的输入和输出行为：<br>
System类的setIn(InputStream is) / setOut(PrintStream ps)方式重新指定输入和输出的流。</p>
<ol start="2">
<li>打印流：<br>
PrintStream 和PrintWriter<br>
说明：<br>
提供了一系列重载的print()和println()方法，用于多种数据类型的输出<br>
System.out返回的是PrintStream的实例</li>
<li>数据流：<br>
DataInputStream 和 DataOutputStream<br>
作用：<br>
用于读取或写出基本数据类型的变量或字符串<br>
示例代码：<br>
/*<br>
练习：将内存中的字符串、基本数据类型的变量写出到文件中。<br>
注意：处理异常的话，仍然应该使用try-catch-finally.<br>
<em>/<br>
@Test<br>
public void test3() throws IOException {<br>
//1.<br>
DataOutputStream dos = new DataOutputStream(new FileOutputStream(&quot;data.txt&quot;));<br>
//2.<br>
dos.writeUTF(&quot;刘建辰&quot;);<br>
dos.flush();//刷新操作，将内存中的数据写入文件<br>
dos.writeInt(23);<br>
dos.flush();<br>
dos.writeBoolean(true);<br>
dos.flush();<br>
//3.<br>
dos.close();<br>
}<br>
/</em><br>
将文件中存储的基本数据类型变量和字符串读取到内存中，保存在变量中。<br>
注意点：读取不同类型的数据的顺序要与当初写入文件时，保存的数据的顺序一致！<br>
*/<br>
@Test<br>
public void test4() throws IOException {<br>
//1.<br>
DataInputStream dis = new DataInputStream(new FileInputStream(&quot;data.txt&quot;));<br>
//2.<br>
String name = dis.readUTF();<br>
int age = dis.readInt();<br>
boolean isMale = dis.readBoolean();<br>
System.out.println(&quot;name = &quot; + name);<br>
System.out.println(&quot;age = &quot; + age);<br>
System.out.println(&quot;isMale = &quot; + isMale);<br>
//3.<br>
dis.close();<br>
}</li>
</ol>
<p>七、对象流的使用<br>
1.对象流：<br>
ObjectInputStream 和 ObjectOutputStream<br>
2.作用：<br>
ObjectOutputStream:内存中的对象---&gt;存储中的文件、通过网络传输出去：序列化过程<br>
ObjectInputStream:存储中的文件、通过网络接收过来 ---&gt;内存中的对象：反序列化过程<br>
3.对象的序列化机制：<br>
对象序列化机制允许把内存中的Java对象转换成平台无关的二进制流，从而允许把这种二进制流持久地保存在磁盘<br>
上，或通过网络将这种二进制流传输到另一个网络节点。//当其它程序获取了这种二进制流，就可以恢复成原来的<br>
Java对象<br>
4.<br>
序列化代码实现：<br>
@Test<br>
public void testObjectOutputStream(){<br>
ObjectOutputStream oos = null;<br>
try {<br>
//1.<br>
oos = new ObjectOutputStream(new FileOutputStream(&quot;object.dat&quot;));<br>
//2.<br>
oos.writeObject(new String(&quot;我爱北京天安门&quot;));<br>
oos.flush();//刷新操作<br>
oos.writeObject(new Person(&quot;王铭&quot;,23));<br>
oos.flush();<br>
oos.writeObject(new Person(&quot;张学良&quot;,23,1001,new Account(5000)));<br>
oos.flush();<br>
} catch (IOException e) {<br>
e.printStackTrace();<br>
} finally {<br>
if(oos != null){<br>
//3.<br>
try {<br>
oos.close();<br>
} catch (IOException e) {<br>
e.printStackTrace();<br>
}<br>
}<br>
}<br>
}<br>
5.<br>
反序列化代码实现：<br>
@Test<br>
public void testObjectInputStream(){<br>
ObjectInputStream ois = null;<br>
try {<br>
ois = new ObjectInputStream(new FileInputStream(&quot;object.dat&quot;));<br>
Object obj = ois.readObject();<br>
String str = (String) obj;<br>
Person p = (Person) ois.readObject();<br>
Person p1 = (Person) ois.readObject();<br>
System.out.println(str);<br>
System.out.println(p);<br>
System.out.println(p1);<br>
} catch (IOException e) {<br>
e.printStackTrace();<br>
} catch (ClassNotFoundException e) {<br>
e.printStackTrace();<br>
} finally {<br>
if(ois != null){<br>
try {<br>
ois.close();<br>
} catch (IOException e) {<br>
e.printStackTrace();<br>
}<br>
}<br>
}<br>
}</p>
<p>6.实现序列化的对象所属的类需要满足：<br>
1.需要实现接口：Serializable</p>
<ul>
<li>2.当前类提供一个全局常量：serialVersionUID</li>
<li>3.除了当前Person类需要实现Serializable接口之外，还必须保证其内部所属性</li>
<li>也必须是可序列化的。（默认情况下，基本数据类型可序列化）</li>
<li>补充：ObjectOutputStream和ObjectInputStream不能序列化static和transient修饰的成员变量</li>
<li></li>
</ul>
<p>八、RandomAccessFile的使用<br>
1.随机存取文件流：RandomAccessFile</p>
<p>2.使用说明：</p>
<ul>
<li>1.RandomAccessFile直接继承于java.lang.Object类，实现了DataInput和DataOutput接口</li>
<li>2.RandomAccessFile既可以作为一个输入流，又可以作为一个输出流</li>
<li></li>
<li>3.如果RandomAccessFile作为输出流时，写出到的文件如果不存在，则在执行过程中自动创建。</li>
<li>如果写出到的文件存在，则会对原文件内容进行覆盖。（默认情况下，从头覆盖）</li>
<li></li>
<li>
<ol start="4">
<li>可以通过相关的操作，实现RandomAccessFile“插入”数据的效果。seek(int pos)</li>
</ol>
</li>
</ul>
<ol start="3">
<li></li>
</ol>
<p>典型代码1：<br>
@Test<br>
public void test1() {<br>
RandomAccessFile raf1 = null;<br>
RandomAccessFile raf2 = null;<br>
try {<br>
//1.<br>
raf1 = new RandomAccessFile(new File(&quot;爱情与友情.jpg&quot;),&quot;r&quot;);<br>
raf2 = new RandomAccessFile(new File(&quot;爱情与友情1.jpg&quot;),&quot;rw&quot;);<br>
//2.<br>
byte[] buffer = new byte[1024];<br>
int len;<br>
while((len = raf1.read(buffer)) != -1){<br>
raf2.write(buffer,0,len);<br>
}<br>
} catch (IOException e) {<br>
e.printStackTrace();<br>
} finally {<br>
//3.<br>
if(raf1 != null){<br>
try {<br>
raf1.close();<br>
} catch (IOException e) {<br>
e.printStackTrace();<br>
}<br>
}<br>
if(raf2 != null){<br>
try {<br>
raf2.close();<br>
} catch (IOException e) {<br>
e.printStackTrace();<br>
}<br>
}<br>
}<br>
}<br>
典型代码2：<br>
/*<br>
使用RandomAccessFile实现数据的插入效果<br>
*/<br>
@Test<br>
public void test3() throws IOException {<br>
RandomAccessFile raf1 = new RandomAccessFile(&quot;hello.txt&quot;,&quot;rw&quot;);<br>
raf1.seek(3);//将指针调到角标为3的位置<br>
//保存指针3后面的所数据到StringBuilder中<br>
StringBuilder builder = new StringBuilder((int) new File(&quot;hello.txt&quot;).length());<br>
byte[] buffer = new byte[20];<br>
int len;<br>
while((len = raf1.read(buffer)) != -1){<br>
builder.append(new String(buffer,0,len)) ;<br>
}<br>
//调回指针，写入“xyz”<br>
raf1.seek(3);<br>
raf1.write(&quot;xyz&quot;.getBytes());<br>
//将StringBuilder中的数据写入到文件中<br>
raf1.write(builder.toString().getBytes());<br>
raf1.close();<br>
//思考：将StringBuilder替换为ByteArrayOutputStream<br>
}</p>
<p>九、Path、Paths、Files的使用<br>
1.NIO的使用说明：</p>
<blockquote>
<p>Java NIO (New IO，Non-Blocking IO)是从Java 1.4版本开始引入的一套新的IO API，可以替代标准的Java<br>
IO AP。<br>
NIO与原来的IO同样的作用和目的，但是使用的方式完全不同，NIO支持面向缓冲区的(IO是面向流的)、基于<br>
通道的IO操作。<br>
NIO将以更加高效的方式进行文件的读写操作。<br>
随着 JDK 7 的发布，Java对NIO进行了极大的扩展，增强了对文件处理和文件系统特性的支持，以至于我们称他们为 NIO.2。</p>
</blockquote>
<p>2.Path的使用 ---jdk7提供<br>
2.1Path的说明：<br>
Path替换原有的File类。<br>
2.2如何实例化：<br>
<img src="https://fantaixi.github.io/post-images/1588793499232.png" alt="" loading="lazy"><br>
2.3常用方法：<br>
<img src="https://fantaixi.github.io/post-images/1588793525215.png" alt="" loading="lazy"></p>
<p>3.Files工具类 ---jdk7提供<br>
3.1作用：<br>
操作文件或文件目录的工具类<br>
3.2常用方法：</p>
<figure data-type="image" tabindex="1"><img src="https://fantaixi.github.io/post-images/1588793567581.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="2"><img src="https://fantaixi.github.io/post-images/1588793593306.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[16 Java泛型]]></title>
        <id>https://fantaixi.github.io/post/16-fan-xing/</id>
        <link href="https://fantaixi.github.io/post/16-fan-xing/">
        </link>
        <updated>2020-05-06T18:19:45.000Z</updated>
        <content type="html"><![CDATA[<p>一、泛型的理解<br>
1.泛型的概念<br>
所谓泛型，就是允许在定义类、接口时通过一个标识表示类中某个属性的类型或者是某个方法的返<br>
回值及参数类型。这个类型参数将在使用时（例如，继承或实现这个接口，用这个类型声明变量、<br>
创建对象时确定（即传入实际的类型参数，也称为类型实参）。</p>
<p>2.泛型的引入背景<br>
集合容器类在设计阶段/声明阶段不能确定这个容器到底实际存的是什么类型的对象，所以在JDK1.5之前只能把元素类型设计为Object，JDK1.5之后使用泛型来解决。因为这个时候除了元素的类型不确定，其他的部分是确定的，例如关于这个元素如何保存，如何管理等是确定的，因此此时把元素的类型设计成一个参数，这个类型参数叫做泛型。Collection<E>，List<E>，ArrayList<E>   这个<E>就是类型参数，即泛型。</p>
<p>二、泛型在集合中的使用</p>
<ol>
<li>
<p>在集合中使用泛型之前的例子<br>
@Test<br>
public void test1(){<br>
ArrayList list = new ArrayList();<br>
//需求：存放学生的成绩<br>
list.add(78);<br>
list.add(76);<br>
list.add(89);<br>
list.add(88);<br>
//问题一：类型不安全<br>
//        list.add(&quot;Tom&quot;);<br>
for(Object score : list){<br>
//问题二：强转时，可能出现ClassCastException<br>
int stuScore = (Integer) score;<br>
System.out.println(stuScore);<br>
}<br>
}<br>
图示：<br>
<img src="https://fantaixi.github.io/post-images/1588789321700.png" alt="" loading="lazy"></p>
</li>
<li>
<p>在集合中使用泛型例子1<br>
@Test<br>
public void test2(){<br>
ArrayList<Integer> list =  new ArrayList<Integer>();<br>
list.add(78);<br>
list.add(87);<br>
list.add(99);<br>
list.add(65);<br>
//编译时，就会进行类型检查，保证数据的安全<br>
//        list.add(&quot;Tom&quot;);<br>
//方式一：<br>
//        for(Integer score : list){<br>
//            //避免了强转操作<br>
//            int stuScore = score;<br>
//            System.out.println(stuScore);<br>
//        }<br>
//方式二：<br>
Iterator<Integer> iterator = list.iterator();<br>
while(iterator.hasNext()){<br>
int stuScore = iterator.next();<br>
System.out.println(stuScore);<br>
}<br>
}<br>
图示：</p>
</li>
</ol>
<p><img src="https://fantaixi.github.io/post-images/1588789371656.png" alt="" loading="lazy"><br>
3. 在集合中使用泛型例子2<br>
//在集合中使用泛型的情况：以HashMap为例<br>
@Test<br>
public void test3(){<br>
//        Map&lt;String,Integer&gt; map = new HashMap&lt;String,Integer&gt;();<br>
//jdk7新特性：类型推断<br>
Map&lt;String,Integer&gt; map = new HashMap&lt;&gt;();<br>
map.put(&quot;Tom&quot;,87);<br>
map.put(&quot;Jerry&quot;,87);<br>
map.put(&quot;Jack&quot;,67);<br>
//        map.put(123,&quot;ABC&quot;);<br>
//泛型的嵌套<br>
Set&lt;Map.Entry&lt;String,Integer&gt;&gt; entry = map.entrySet();<br>
Iterator&lt;Map.Entry&lt;String, Integer&gt;&gt; iterator = entry.iterator();<br>
while(iterator.hasNext()){<br>
Map.Entry&lt;String, Integer&gt; e = iterator.next();<br>
String key = e.getKey();<br>
Integer value = e.getValue();<br>
System.out.println(key + &quot;----&quot; + value);<br>
}<br>
}<br>
4. 集合中使用泛型总结：</p>
<ul>
<li>① 集合接口或集合类在jdk5.0时都修改为带泛型的结构。</li>
<li>② 在实例化集合类时，可以指明具体的泛型类型</li>
<li>③ 指明完以后，在集合类或接口中凡是定义类或接口时，内部结构（比如：方法、构造器、属性等）使用到类的泛型的位置，都指定为实例化的泛型类型。</li>
<li>比如：add(E e)  ---&gt;实例化以后：add(Integer e)</li>
<li>④ 注意点：泛型的类型必须是类，不能是基本数据类型。需要用到基本数据类型的位置，拿包装类替换</li>
<li>⑤ 如果实例化时，没指明泛型的类型。默认类型为java.lang.Object类型。</li>
</ul>
<p>三、自定义泛型类、泛型接口、泛型方法<br>
1.举例:<br>
【Order.java】</p>
<p>public class Order<T> {</p>
<pre><code>String orderName;
int orderId;

//类的内部结构就可以使用类的泛型

T orderT;

public Order(){
    //编译不通过
</code></pre>
<p>//        T[] arr = new T[10];<br>
//编译通过<br>
T[] arr = (T[]) new Object[10];<br>
}</p>
<pre><code>public Order(String orderName,int orderId,T orderT){
    this.orderName = orderName;
    this.orderId = orderId;
    this.orderT = orderT;
}

//如下的个方法都不是泛型方法
public T getOrderT(){
    return orderT;
}

public void setOrderT(T orderT){
    this.orderT = orderT;
}

@Override
public String toString() {
    return &quot;Order{&quot; +
            &quot;orderName='&quot; + orderName + '\'' +
            &quot;, orderId=&quot; + orderId +
            &quot;, orderT=&quot; + orderT +
            '}';
}
//静态方法中不能使用类的泛型。
</code></pre>
<p>//    public static void show(T orderT){<br>
//        System.out.println(orderT);<br>
//    }</p>
<pre><code>public void show(){
    //编译不通过
</code></pre>
<p>//        try{<br>
//<br>
//<br>
//        }catch(T t){<br>
//<br>
//        }</p>
<pre><code>}

//泛型方法：在方法中出现了泛型的结构，泛型参数与类的泛型参数没任何关系。
//换句话说，泛型方法所属的类是不是泛型类都没关系。
//泛型方法，可以声明为静态的。原因：泛型参数是在调用方法时确定的。并非在实例化类时确定。
public static &lt;E&gt;  List&lt;E&gt; copyFromArrayToList(E[] arr){

    ArrayList&lt;E&gt; list = new ArrayList&lt;&gt;();

    for(E e : arr){
        list.add(e);
    }
    return list;

}
</code></pre>
<p>}</p>
<p>【SubOrder.java】<br>
public class SubOrder extends Order<Integer> {//SubOrder:不是泛型类</p>
<pre><code>public static &lt;E&gt; List&lt;E&gt; copyFromArrayToList(E[] arr){

    ArrayList&lt;E&gt; list = new ArrayList&lt;&gt;();

    for(E e : arr){
        list.add(e);
    }
    return list;

}
</code></pre>
<p>}</p>
<p>//实例化时，如下的代码是错误的<br>
SubOrder<Integer> o = new SubOrder&lt;&gt;();</p>
<p>【SubOrder1.java】<br>
public class SubOrder1<T> extends Order<T> {//SubOrder1<T>:仍然是泛型类</p>
<p>}</p>
<p>【测试】<br>
@Test<br>
public void test1(){<br>
//如果定义了泛型类，实例化没指明类的泛型，则认为此泛型类型为Object类型<br>
//要求：如果大家定义了类是带泛型的，建议在实例化时要指明类的泛型。<br>
Order order = new Order();<br>
order.setOrderT(123);<br>
order.setOrderT(&quot;ABC&quot;);</p>
<pre><code>    //建议：实例化时指明类的泛型
    Order&lt;String&gt; order1 = new Order&lt;String&gt;(&quot;orderAA&quot;,1001,&quot;order:AA&quot;);

    order1.setOrderT(&quot;AA:hello&quot;);

}

@Test
public void test2(){
    SubOrder sub1 = new SubOrder();
    //由于子类在继承带泛型的父类时，指明了泛型类型。则实例化子类对象时，不再需要指明泛型。
    sub1.setOrderT(1122);

    SubOrder1&lt;String&gt; sub2 = new SubOrder1&lt;&gt;();
    sub2.setOrderT(&quot;order2...&quot;);
}

@Test
public void test3(){

    ArrayList&lt;String&gt; list1 = null;
    ArrayList&lt;Integer&gt; list2 = new ArrayList&lt;Integer&gt;();
    //泛型不同的引用不能相互赋值。
</code></pre>
<p>//        list1 = list2;</p>
<pre><code>    Person p1 = null;
    Person p2 = null;
    p1 = p2;


}

//测试泛型方法
@Test
public void test4(){
    Order&lt;String&gt; order = new Order&lt;&gt;();
    Integer[] arr = new Integer[]{1,2,3,4};
    //泛型方法在调用时，指明泛型参数的类型。
    List&lt;Integer&gt; list = order.copyFromArrayToList(arr);

    System.out.println(list);
}
</code></pre>
<p>2.注意点：<br>
<img src="https://fantaixi.github.io/post-images/1588789514671.png" alt="" loading="lazy"><br>
<img src="https://fantaixi.github.io/post-images/1588789548625.png" alt="" loading="lazy"><br>
3.应用场景举例：<br>
【DAO.java】:定义了操作数据库中的表的通用操作。   ORM思想(数据库中的表和Java中的类对应)<br>
public class DAO<T> {//表的共性操作的DAO<br>
//添加一条记录<br>
public void add(T t){<br>
}<br>
//删除一条记录<br>
public boolean remove(int index){<br>
return false;<br>
}<br>
//修改一条记录<br>
public void update(int index,T t){<br>
}<br>
//查询一条记录<br>
public T getIndex(int index){<br>
return null;<br>
}<br>
//查询多条记录<br>
public List<T> getForList(int index){<br>
return null;<br>
}<br>
//泛型方法<br>
//举例：获取表中一共有多少条记录？获取最大的员工入职时间？<br>
public <E> E getValue(){<br>
return null;<br>
}<br>
}</p>
<p>四、泛型在继承上的体现<br>
泛型在继承上的体现:<br>
/*<br>
1. 泛型在继承方面的体现<br>
虽然类A是类B的父类，但是G<A> 和G<B>二者不具备子父类关系，二者是并列关系。<br>
补充：类A是类B的父类，A<G> 是 B<G> 的父类<br>
*/<br>
@Test<br>
public void test1(){<br>
Object obj = null;<br>
String str = null;<br>
obj = str;</p>
<pre><code>    Object[] arr1 = null;
    String[] arr2 = null;
    arr1 = arr2;
    //编译不通过
</code></pre>
<p>//        Date date = new Date();<br>
//        str = date;<br>
List<Object> list1 = null;<br>
List<String> list2 = new ArrayList<String>();<br>
//此时的list1和list2的类型不具子父类关系<br>
//编译不通过<br>
//        list1 = list2;<br>
/*<br>
反证法：<br>
假设list1 = list2;<br>
list1.add(123);导致混入非String的数据。出错。<br>
*/<br>
show(list1);<br>
show1(list2);<br>
}<br>
public void show1(List<String> list){</p>
<pre><code>}
public void show(List&lt;Object&gt; list){

}
@Test
public void test2(){
    AbstractList&lt;String&gt; list1 = null;
    List&lt;String&gt; list2 = null;
    ArrayList&lt;String&gt; list3 = null;
    list1 = list3;
    list2 = list3;
    List&lt;String&gt; list4 = new ArrayList&lt;&gt;();
}
</code></pre>
<p>五、通配符<br>
1.通配符的使用<br>
/*<br>
通配符的使用<br>
通配符：?<br>
类A是类B的父类，G<A>和G<B>是没关系的，二者共同的父类是：G&lt;?&gt;<br>
<em>/<br>
@Test<br>
public void test3(){<br>
List<Object> list1 = null;<br>
List<String> list2 = null;<br>
List&lt;?&gt; list = null;<br>
list = list1;<br>
list = list2;<br>
//编译通过<br>
//        print(list1);<br>
//        print(list2);<br>
//<br>
List<String> list3 = new ArrayList&lt;&gt;();<br>
list3.add(&quot;AA&quot;);<br>
list3.add(&quot;BB&quot;);<br>
list3.add(&quot;CC&quot;);<br>
list = list3;<br>
//添加(写入)：对于List&lt;?&gt;就不能向其内部添加数据。<br>
//除了添加null之外。<br>
//        list.add(&quot;DD&quot;);<br>
//        list.add('?');<br>
list.add(null);<br>
//获取(读取)：允许读取数据，读取的数据类型为Object。<br>
Object o = list.get(0);<br>
System.out.println(o);<br>
}<br>
public void print(List&lt;?&gt; list){<br>
Iterator&lt;?&gt; iterator = list.iterator();<br>
while(iterator.hasNext()){<br>
Object obj = iterator.next();<br>
System.out.println(obj);<br>
}<br>
}<br>
2.涉及通配符的集合的数据的写入和读取:<br>
见上	<br>
3.有限制条件的通配符的使用<br>
/</em><br>
限制条件的通配符的使用。<br>
? extends A:<br>
G&lt;? extends A&gt; 可以作为G<A>和G<B>的父类，其中B是A的子类<br>
? super A:<br>
G&lt;? super A&gt; 可以作为G<A>和G<B>的父类，其中B是A的父类<br>
*/<br>
@Test<br>
public void test4(){<br>
List&lt;? extends Person&gt; list1 = null;<br>
List&lt;? super Person&gt; list2 = null;<br>
List<Student> list3 = new ArrayList<Student>();<br>
List<Person> list4 = new ArrayList<Person>();<br>
List<Object> list5 = new ArrayList<Object>();<br>
list1 = list3;<br>
list1 = list4;<br>
//        list1 = list5;<br>
//        list2 = list3;<br>
list2 = list4;<br>
list2 = list5;<br>
//读取数据：<br>
list1 = list3;<br>
Person p = list1.get(0);<br>
//编译不通过<br>
//Student s = list1.get(0);<br>
list2 = list4;<br>
Object obj = list2.get(0);<br>
////编译不通过<br>
//        Person obj = list2.get(0);<br>
//写入数据：<br>
//编译不通过<br>
//        list1.add(new Student());<br>
//编译通过<br>
list2.add(new Person());<br>
list2.add(new Student());<br>
}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[15 Java集合]]></title>
        <id>https://fantaixi.github.io/post/15-java-ji-he/</id>
        <link href="https://fantaixi.github.io/post/15-java-ji-he/">
        </link>
        <updated>2020-05-06T17:57:10.000Z</updated>
        <content type="html"><![CDATA[<p>一、数组与集合</p>
<ol>
<li>
<p>集合与数组存储数据概述：<br>
集合、数组都是对多个数据进行存储操作的结构，简称Java容器。<br>
说明：此时的存储，主要指的是内存层面的存储，不涉及到持久化的存储（.txt,.jpg,.avi，数据库中)</p>
</li>
<li>
<p>数组存储的特点：</p>
</li>
</ol>
<blockquote>
<p>一旦初始化以后，其长度就确定了。<br>
数组一旦定义好，其元素的类型也就确定了。我们也就只能操作指定类型的数据了。</p>
</blockquote>
<ul>
<li>
<pre><code> 比如：String[] arr;int[] arr1;Object[] arr2;
</code></pre>
</li>
</ul>
<ol start="3">
<li>数组存储的弊端：</li>
</ol>
<ul>
<li>
<pre><code> &gt; 一旦初始化以后，其长度就不可修改。
</code></pre>
</li>
<li>
<pre><code> &gt; 数组中提供的方法非常限，对于添加、删除、插入数据等操作，非常不便，同时效率不高。
</code></pre>
</li>
<li>
<pre><code> &gt; 获取数组中实际元素的个数的需求，数组没有现成的属性或方法可用
</code></pre>
</li>
<li>
<pre><code> &gt; 数组存储数据的特点：有序、可重复。对于无序、不可重复的需求，不能满足。
</code></pre>
</li>
</ul>
<ol start="4">
<li>集合存储的优点：<br>
解决数组存储数据方面的弊端。</li>
</ol>
<p>二、Collection接口<br>
1.单列集合框架结构<br>
|----Collection接口：单列集合，用来存储一个一个的对象</p>
<ul>
<li>
<pre><code>     |----List接口：存储有序的、可重复的数据。  --&gt;“动态”数组
</code></pre>
</li>
<li>
<pre><code>         |----ArrayList、LinkedList、Vector
</code></pre>
</li>
<li></li>
<li>
<pre><code>     |----Set接口：存储无序的、不可重复的数据   --&gt;高中讲的“集合”
</code></pre>
</li>
<li>
<pre><code>         |----HashSet、LinkedHashSet、TreeSet
</code></pre>
</li>
</ul>
<p>对应图示：<br>
<img src="https://fantaixi.github.io/post-images/1588788224614.png" alt="" loading="lazy"></p>
<p>2.Collection接口常用方法：<br>
add(Object obj),addAll(Collection coll),size(),isEmpty(),clear();<br>
contains(Object obj),containsAll(Collection coll),remove(Object obj),removeAll(Collection coll),retainsAll(Collection coll),equals(Object obj);<br>
hasCode(),toArray(),iterator();</p>
<p>3.Collection集合与数组间的转换<br>
//集合 ---&gt;数组：toArray()<br>
Object[] arr = coll.toArray();<br>
for(int i = 0;i &lt; arr.length;i++){<br>
System.out.println(arr[i]);<br>
}</p>
<p>//拓展：数组 ---&gt;集合:调用Arrays类的静态方法asList(T ... t)<br>
List<String> list = Arrays.asList(new String[]{&quot;AA&quot;, &quot;BB&quot;, &quot;CC&quot;});<br>
System.out.println(list);</p>
<p>List arr1 = Arrays.asList(new int[]{123, 456});<br>
System.out.println(arr1.size());//1</p>
<p>List arr2 = Arrays.asList(new Integer[]{123, 456});<br>
System.out.println(arr2.size());//2</p>
<p>4.使用Collection集合存储对象，要求对象所属的类满足：<br>
向Collection接口的实现类的对象中添加数据obj时，要求obj所在类要重写equals().</p>
<p>三、Iterator接口与foreach循环<br>
1.遍历Collection的两种方式：<br>
① 使用迭代器Iterator  ② foreach循环（或增强for循环）<br>
2.java.utils包下定义的迭代器接口：Iterator<br>
2.1说明：<br>
Iterator对象称为迭代器(设计模式的一种)，主要用于遍历 Collection 集合中的元素。<br>
GOF给迭代器模式的定义为：提供一种方法访问一个容器(container)对象中各个元素，而又不需暴露该对象的内部细节。迭代器模式，就是为容器而生。<br>
2.2作用：遍历集合Collectiton元素<br>
2.3如何获取实例：coll.iterator()返回一个迭代器实例<br>
2.4遍历的代码实现：<br>
Iterator iterator = coll.iterator();<br>
//hasNext():判断是否还下一个元素<br>
while(iterator.hasNext()){<br>
//next():①指针下移 ②将下移以后集合位置上的元素返回<br>
System.out.println(iterator.next());<br>
}<br>
2.5图示说明：<br>
<img src="https://fantaixi.github.io/post-images/1588788373686.png" alt="" loading="lazy"></p>
<p>2.6 remove()的使用：<br>
//测试Iterator中的remove()<br>
//如果还未调用next()或在上一次调用 next 方法之后已经调用了 remove 方法，再调用remove都会报IllegalStateException。<br>
//内部定义了remove(),可以在遍历的时候，删除集合中的元素。此方法不同于集合直接调用remove()<br>
@Test<br>
public void test3(){<br>
Collection coll = new ArrayList();<br>
coll.add(123);<br>
coll.add(456);<br>
coll.add(new Person(&quot;Jerry&quot;,20));<br>
coll.add(new String(&quot;Tom&quot;));<br>
coll.add(false);<br>
//删除集合中&quot;Tom&quot;<br>
Iterator iterator = coll.iterator();<br>
while (iterator.hasNext()){<br>
//            iterator.remove();<br>
Object obj = iterator.next();<br>
if(&quot;Tom&quot;.equals(obj)){<br>
iterator.remove();<br>
//                iterator.remove();<br>
}<br>
}<br>
//遍历集合<br>
iterator = coll.iterator();<br>
while (iterator.hasNext()){<br>
System.out.println(iterator.next());<br>
}<br>
}</p>
<p>3.jdk5.0新特性--增强for循环：(foreach循环)</p>
<p>1.遍历集合举例：<br>
@Test<br>
public void test1(){<br>
Collection coll = new ArrayList();<br>
coll.add(123);<br>
coll.add(456);<br>
coll.add(new Person(&quot;Jerry&quot;,20));<br>
coll.add(new String(&quot;Tom&quot;));<br>
coll.add(false);<br>
//for(集合元素的类型 局部变量 : 集合对象)<br>
for(Object obj : coll){<br>
System.out.println(obj);<br>
}<br>
}<br>
说明：<br>
内部仍然调用了迭代器。</p>
<p>2.遍历数组举例：</p>
<p>@Test<br>
public void test2(){<br>
int[] arr = new int[]{1,2,3,4,5,6};<br>
//for(数组元素的类型 局部变量 : 数组对象)<br>
for(int i : arr){<br>
System.out.println(i);<br>
}<br>
}</p>
<p>四、Collection子接口：List接口</p>
<ol>
<li>
<p>存储的数据特点：存储有序的、可重复的数据。</p>
</li>
<li>
<p>常用方法：(记住)<br>
增：add(Object obj)<br>
删：remove(int index) / remove(Object obj)<br>
改：set(int index, Object ele)<br>
查：get(int index)<br>
插：add(int index, Object ele)<br>
长度：size()<br>
遍历：① Iterator迭代器方式<br>
② 增强for循环<br>
③ 普通的循环</p>
</li>
<li>
<p>常用实现类：<br>
|----Collection接口：单列集合，用来存储一个一个的对象</p>
</li>
</ol>
<ul>
<li>|----List接口：存储序的、可重复的数据。  --&gt;“动态”数组,替换原的数组</li>
<li>
<pre><code> |----ArrayList：作为List接口的主要实现类；线程不安全的，效率高；底层使用Object[] elementData存储
</code></pre>
</li>
<li>
<pre><code> |----LinkedList：对于频繁的插入、删除操作，使用此类效率比ArrayList高；底层使用双向链表存储
</code></pre>
</li>
<li>
<pre><code> |----Vector：作为List接口的古老实现类；线程安全的，效率低；底层使用Object[] elementData存储
</code></pre>
</li>
</ul>
<ol start="4">
<li>源码分析(难点)<br>
4.1 ArrayList的源码分析：</li>
</ol>
<ul>
<li>
<p>2.1 jdk 7情况下</p>
</li>
<li>
<pre><code> ArrayList list = new ArrayList();//底层创建了长度是10的Object[]数组elementData
</code></pre>
</li>
<li>
<pre><code> list.add(123);//elementData[0] = new Integer(123);
</code></pre>
</li>
<li>
<pre><code> ...
</code></pre>
</li>
<li>
<pre><code> list.add(11);//如果此次的添加导致底层elementData数组容量不够，则扩容。
</code></pre>
</li>
<li>
<pre><code> 默认情况下，扩容为原来的容量的1.5倍，同时需要将原有数组中的数据复制到新的数组中。
</code></pre>
</li>
<li></li>
<li>
<pre><code> 结论：建议开发中使用带参的构造器：ArrayList list = new ArrayList(int capacity)
</code></pre>
</li>
<li></li>
<li>
<p>2.2 jdk 8中ArrayList的变化：</p>
</li>
<li>
<pre><code> ArrayList list = new ArrayList();//底层Object[] elementData初始化为{}.并没创建长度为10的数组
</code></pre>
</li>
<li>
<pre><code> list.add(123);//第一次调用add()时，底层才创建了长度10的数组，并将数据123添加到elementData[0]
</code></pre>
</li>
<li>
<pre><code> ...
</code></pre>
</li>
<li>
<pre><code> 后续的添加和扩容操作与jdk 7 无异。
</code></pre>
</li>
<li>
<p>2.3 小结：jdk7中的ArrayList的对象的创建类似于单例的饿汉式，而jdk8中的ArrayList的对象</p>
</li>
<li>
<pre><code> 的创建类似于单例的懒汉式，延迟了数组的创建，节省内存。
</code></pre>
</li>
</ul>
<p>4.2 LinkedList的源码分析：</p>
<ul>
<li>
<pre><code> LinkedList list = new LinkedList(); 内部声明了Node类型的first和last属性，默认值为null
</code></pre>
</li>
<li>
<pre><code> list.add(123);//将123封装到Node中，创建了Node对象。
</code></pre>
</li>
<li>
<pre><code> 其中，Node定义为：体现了LinkedList的双向链表的说法
</code></pre>
</li>
<li>
<pre><code> private static class Node&lt;E&gt; {
      E item;
      Node&lt;E&gt; next;
      Node&lt;E&gt; prev;
      Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) {
      this.item = element;
      this.next = next;
      this.prev = prev;
      }
  }
</code></pre>
</li>
</ul>
<p>4.3 Vector的源码分析：<br>
jdk7和jdk8中通过Vector()构造器创建对象时，底层都创建了长度为10的数组。<br>
在扩容方面，默认扩容为原来的数组长度的2倍。</p>
<ol start="5">
<li>存储的元素的要求：<br>
添加的对象，所在的类要重写equals()方法<br>
[面试题]</li>
</ol>
<ul>
<li>面试题：ArrayList、LinkedList、Vector者的异同？</li>
<li>同：三个类都是实现了List接口，存储数据的特点相同：存储有序的、可重复的数据</li>
<li>不同：见上（第3部分+第4部分）</li>
</ul>
<p>五、Collection子接口：Set接口</p>
<ol>
<li>
<p>存储的数据特点：无序的、不可重复的元素<br>
具体的：<br>
以HashSet为例说明：</p>
</li>
<li>
<p>无序性：不等于随机性。存储的数据在底层数组中并非照数组索引的顺序添加，而是根据数据的哈希值决定的。</p>
</li>
<li>
<p>不可重复性：保证添加的元素照equals()判断时，不能返回true.即：相同的元素只能添加一个。</p>
</li>
<li>
<p>元素添加过程：(以HashSet为例)<br>
我们向HashSet中添加元素a,首先调用元素a所在类的hashCode()方法，计算元素a的哈希值，<br>
此哈希值接着通过某种算法计算出在HashSet底层数组中的存放位置（即为：索引位置，判断<br>
数组此位置上是否已经元素：<br>
如果此位置上没其他元素，则元素a添加成功。 ---&gt;情况1<br>
如果此位置上其他元素b(或以链表形式存在的多个元素，则比较元素a与元素b的hash值：<br>
如果hash值不相同，则元素a添加成功。---&gt;情况2<br>
如果hash值相同，进而需要调用元素a所在类的equals()方法：<br>
equals()返回true,元素a添加失败<br>
equals()返回false,则元素a添加成功。---&gt;情况2</p>
</li>
</ol>
<p>对于添加成功的情况2和情况3而言：元素a 与已经存在指定索引位置上数据以链表的方式存储。<br>
jdk 7 :元素a放到数组中，指向原来的元素。<br>
jdk 8 :原来的元素在数组中，指向元素a<br>
总结：七上八下</p>
<p>HashSet底层：数组+链表的结构。（前提：jdk7)</p>
<ol start="3">
<li>
<p>常用方法<br>
Set接口中没额外定义新的方法，使用的都是Collection中声明过的方法。</p>
</li>
<li>
<p>常用实现类：<br>
|----Collection接口：单列集合，用来存储一个一个的对象</p>
</li>
</ol>
<ul>
<li>
<pre><code>     |----Set接口：存储无序的、不可重复的数据   --&gt;高中讲的“集合”
</code></pre>
</li>
<li>
<pre><code>         |----HashSet：作为Set接口的主要实现类；线程不安全的；可以存储null值
</code></pre>
</li>
<li>
<pre><code>             |----LinkedHashSet：作为HashSet的子类；遍历其内部数据时，可以按照添加的顺序遍历
</code></pre>
</li>
<li>
<pre><code>            在添加数据的同时，每个数据还维护了两个引用，记录此数据前一个数据和后一个数据。                   对于频繁的遍历操作，LinkedHashSet效率高于HashSet.
</code></pre>
</li>
<li>
<pre><code>         |----TreeSet：可以照添加对象的指定属性，进行排序。
</code></pre>
</li>
</ul>
<ol start="5">
<li>存储对象所在类的要求：<br>
HashSet/LinkedHashSet:</li>
</ol>
<p>要求：向Set(主要指：HashSet、LinkedHashSet)中添加的数据，其所在的类一定要重写hashCode()和equals()<br>
要求：重写的hashCode()和equals()尽可能保持一致性：相等的对象必须具有相等的散列码</p>
<ul>
<li>重写两个方法的小技巧：对象中用作 equals() 方法比较的 Field，都应该用来计算 hashCode 值。</li>
</ul>
<p>TreeSet:<br>
1.自然排序中，比较两个对象是否相同的标准为：compareTo()返回0.不再是equals().<br>
2.定制排序中，比较两个对象是否相同的标准为：compare()返回0.不再是equals().</p>
<ol start="6">
<li>TreeSet的使用<br>
6.1 使用说明:<br>
1.向TreeSet中添加的数据，要求是相同类的对象。<br>
2.两种排序方式：自然排序（实现Comparable接口 和 定制排序（Comparator）</li>
</ol>
<p>6.2 常用的排序方式:<br>
//方式一：自然排序<br>
@Test<br>
public void test1(){<br>
TreeSet set = new TreeSet();<br>
//失败：不能添加不同类的对象<br>
//        set.add(123);<br>
//        set.add(456);<br>
//        set.add(&quot;AA&quot;);<br>
//        set.add(new User(&quot;Tom&quot;,12));<br>
//举例一：<br>
//        set.add(34);<br>
//        set.add(-34);<br>
//        set.add(43);<br>
//        set.add(11);<br>
//        set.add(8);<br>
//举例二：<br>
set.add(new User(&quot;Tom&quot;,12));<br>
set.add(new User(&quot;Jerry&quot;,32));<br>
set.add(new User(&quot;Jim&quot;,2));<br>
set.add(new User(&quot;Mike&quot;,65));<br>
set.add(new User(&quot;Jack&quot;,33));<br>
set.add(new User(&quot;Jack&quot;,56));</p>
<pre><code>    Iterator iterator = set.iterator();
    while(iterator.hasNext()){
        System.out.println(iterator.next());
    }
}
</code></pre>
<p>//方式二：定制排序<br>
@Test<br>
public void test2(){<br>
Comparator com = new Comparator() {<br>
//照年龄从小到大排列<br>
@Override<br>
public int compare(Object o1, Object o2) {<br>
if(o1 instanceof User &amp;&amp; o2 instanceof User){<br>
User u1 = (User)o1;<br>
User u2 = (User)o2;<br>
return Integer.compare(u1.getAge(),u2.getAge());<br>
}else{<br>
throw new RuntimeException(&quot;输入的数据类型不匹配&quot;);<br>
}<br>
}<br>
};<br>
TreeSet set = new TreeSet(com);<br>
set.add(new User(&quot;Tom&quot;,12));<br>
set.add(new User(&quot;Jerry&quot;,32));<br>
set.add(new User(&quot;Jim&quot;,2));<br>
set.add(new User(&quot;Mike&quot;,65));<br>
set.add(new User(&quot;Mary&quot;,33));<br>
set.add(new User(&quot;Jack&quot;,33));<br>
set.add(new User(&quot;Jack&quot;,56));<br>
Iterator iterator = set.iterator();<br>
while(iterator.hasNext()){<br>
System.out.println(iterator.next());<br>
}<br>
}</p>
<p>六、Map接口<br>
双列集合框架：Map<br>
1.常用实现类结构<br>
|----Map:双列数据，存储key-value对的数据   ---类似于高中的函数：y = f(x)</p>
<ul>
<li>
<pre><code>  |----HashMap:作为Map的主要实现类；线程不安全的，效率高；存储null的key和value
</code></pre>
</li>
<li>
<pre><code>         |----LinkedHashMap:保证在遍历map元素时，可以照添加的顺序实现遍历。
</code></pre>
</li>
<li>
<pre><code>               原因：在原有的HashMap底层结构基础上，添加了一对指针，指向前一个和后一个元素。
</code></pre>
</li>
<li>
<pre><code>               对于频繁的遍历操作，此类执行效率高于HashMap。
</code></pre>
</li>
<li>
<pre><code>  |----TreeMap:保证照添加的key-value对进行排序，实现排序遍历。此时考虑key的自然排序或定制排序
</code></pre>
</li>
<li>
<pre><code>                 底层使用红黑树
</code></pre>
</li>
<li>
<pre><code>  |----Hashtable:作为古老的实现类；线程安全的，效率低；不能存储null的key和value
</code></pre>
</li>
<li>
<pre><code>         |----Properties:常用来处理配置文件。key和value都是String类型
</code></pre>
</li>
<li></li>
<li></li>
<li>
<pre><code> HashMap的底层：数组+链表  （jdk7及之前)
</code></pre>
</li>
<li>
<pre><code>               数组+链表+红黑树 （jdk 8)
</code></pre>
</li>
</ul>
<p>2.存储结构的理解：</p>
<blockquote>
<p>Map中的key:无序的、不可重复的，使用Set存储所有的key  ---&gt; key所在的类要重写equals()和hashCode() （以HashMap为例)<br>
Map中的value:无序的、可重复的，使用Collection存储所的value ---&gt;value所在的类要重写equals()<br>
一个键值对：key-value构成了一个Entry对象。<br>
Map中的entry:无序的、不可重复的，使用Set存储所的entry</p>
</blockquote>
<p>图示：<br>
<img src="https://fantaixi.github.io/post-images/1588788678652.png" alt="" loading="lazy"></p>
<p>3.常用方法</p>
<ul>
<li>添加：put(Object key,Object value)</li>
<li>删除：remove(Object key)</li>
<li>修改：put(Object key,Object value)</li>
<li>查询：get(Object key)</li>
<li>长度：size()</li>
<li>遍历：keySet() / values() / entrySet()</li>
</ul>
<ol>
<li>内存结构说明：（难点）<br>
4.1 HashMap在jdk7中实现原理：<br>
HashMap map = new HashMap():</li>
</ol>
<ul>
<li>
<pre><code> 在实例化以后，底层创建了长度是16的一维数组Entry[] table。
</code></pre>
</li>
<li>
<pre><code> ...可能已经执行过多次put...
</code></pre>
</li>
<li>
<pre><code> map.put(key1,value1):
</code></pre>
</li>
<li>
<pre><code> 首先，调用key1所在类的hashCode()计算key1哈希值，此哈希值经过某种算法计算以后，得到在Entry数组中的存放位置。
</code></pre>
</li>
<li>
<pre><code> 如果此位置上的数据为空，此时的key1-value1添加成功。 ----情况1
</code></pre>
</li>
<li>
<pre><code> 如果此位置上的数据不为空，(意味着此位置上存在一个或多个数据(以链表形式存在)),比较key1和已经存在的一个或多个数据的哈希值：
</code></pre>
</li>
<li>
<pre><code>         如果key1的哈希值与已经存在的数据的哈希值都不相同，此时key1-value1添加成功。----情况2
</code></pre>
</li>
<li>
<pre><code>         如果key1的哈希值和已经存在的某一个数据(key2-value2)的哈希值相同，继续比较：调用key1所在类的equals(key2)方法，比较：
</code></pre>
</li>
<li>
<pre><code>                 如果equals()返回false:此时key1-value1添加成功。----情况3
</code></pre>
</li>
<li>
<pre><code>                 如果equals()返回true:使用value1替换value2。
</code></pre>
</li>
<li></li>
<li>
<pre><code> 补充：关于情况2和情况3：此时key1-value1和原来的数据以链表的方式存储。
</code></pre>
</li>
<li></li>
<li>
<pre><code>在不断的添加过程中，会涉及到扩容问题，当超出临界值(且要存放的位置非空)时，扩容。默认的扩容方式：扩容为原来容量的2倍，并将原的数据复制过来。
</code></pre>
</li>
</ul>
<p>4.2 HashMap在jdk8中相较于jdk7在底层实现方面的不同：</p>
<ol>
<li>new HashMap():底层没创建一个长度为16的数组</li>
<li>jdk 8底层的数组是：Node[],而非Entry[]</li>
<li>首次调用put()方法时，底层创建长度为16的数组</li>
<li>jdk7底层结构只：数组+链表。jdk8中底层结构：数组+链表+红黑树。<br>
4.1 形成链表时，七上八下（jdk7:新的元素指向旧的元素。jdk8：旧的元素指向新的元素）<br>
4.2 当数组的某一个索引位置上的元素以链表形式存在的数据个数 &gt; 8 且当前数组的长度 &gt; 64时，此时此索引位置上的所数据改为使用红黑树存储。</li>
</ol>
<p>4.3 HashMap底层典型属性的属性的说明：<br>
DEFAULT_INITIAL_CAPACITY : HashMap的默认容量，16<br>
DEFAULT_LOAD_FACTOR：HashMap的默认加载因子：0.75<br>
threshold：扩容的临界值，=容量*填充因子：16 * 0.75 =&gt; 12<br>
TREEIFY_THRESHOLD：Bucket中链表长度大于该默认值，转化为红黑树:8<br>
MIN_TREEIFY_CAPACITY：桶中的Node被树化时最小的hash表容量:64</p>
<p>4.4 LinkedHashMap的底层实现原理(了解)<br>
LinkedHashMap底层使用的结构与HashMap相同，因为LinkedHashMap继承于HashMap.<br>
区别就在于：LinkedHashMap内部提供了Entry，替换HashMap中的Node.<br>
<img src="https://fantaixi.github.io/post-images/1588788723692.png" alt="" loading="lazy"></p>
<ol start="5">
<li>TreeMap的使用<br>
//向TreeMap中添加key-value，要求key必须是由同一个类创建的对象<br>
//因为要照key进行排序：自然排序 、定制排序</li>
</ol>
<p>6.使用Properties读取配置文件<br>
//Properties:常用来处理配置文件。key和value都是String类型<br>
public static void main(String[] args)  {<br>
FileInputStream fis = null;<br>
try {<br>
Properties pros = new Properties();<br>
fis = new FileInputStream(&quot;jdbc.properties&quot;);<br>
pros.load(fis);//加载流对应的文件<br>
String name = pros.getProperty(&quot;name&quot;);<br>
String password = pros.getProperty(&quot;password&quot;);<br>
System.out.println(&quot;name = &quot; + name + &quot;, password = &quot; + password);<br>
} catch (IOException e) {<br>
e.printStackTrace();<br>
} finally {<br>
if(fis != null){<br>
try {<br>
fis.close();<br>
} catch (IOException e) {<br>
e.printStackTrace();<br>
}<br>
}<br>
}</p>
<p>七、Collections工具类的使用<br>
Collections工具类<br>
1.作用：操作Collection和Map的工具类</p>
<p>2.常用方法：<br>
reverse(List)：反转 List 中元素的顺序<br>
shuffle(List)：对 List 集合元素进行随机排序<br>
sort(List)：根据元素的自然顺序对指定 List 集合元素升序排序<br>
sort(List，Comparator)：根据指定的 Comparator 产生的顺序对 List 集合元素进行排序<br>
swap(List，int， int)：将指定 list 集合中的 i 处元素和 j 处元素进行交换<br>
Object max(Collection)：根据元素的自然顺序，返回给定集合中的最大元素<br>
Object max(Collection，Comparator)：根据 Comparator 指定的顺序，返回给定集合中的最大元素<br>
Object min(Collection)<br>
Object min(Collection，Comparator)<br>
int frequency(Collection，Object)：返回指定集合中指定元素的出现次数<br>
void copy(List dest,List src)：将src中的内容复制到dest中<br>
boolean replaceAll(List list，Object oldVal，Object newVal)：使用新值替换 List 对象的所旧值<br>
<img src="https://fantaixi.github.io/post-images/1588788821537.png" alt="" loading="lazy"></p>
<p>说明：ArrayList和HashMap都是线程不安全的，如果程序要求线程安全，我们可以将ArrayList、HashMap转换为线程的。<br>
使用synchronizedList(List list） 和 synchronizedMap(Map map）</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[14 枚举类和注解]]></title>
        <id>https://fantaixi.github.io/post/14-mei-ju-lei-he-zhu-jie/</id>
        <link href="https://fantaixi.github.io/post/14-mei-ju-lei-he-zhu-jie/">
        </link>
        <updated>2020-05-06T17:53:49.000Z</updated>
        <content type="html"><![CDATA[<p>一、枚举类的使用</p>
<ol>
<li>枚举类的说明：</li>
</ol>
<ul>
<li>1.枚举类的理解：类的对象只有有限个，确定的。我们称此类为枚举类</li>
<li>2.当需要定义一组常量时，强烈建议使用枚举类</li>
<li>3.如果枚举类中只一个对象，则可以作为单例模式的实现方式。</li>
</ul>
<ol start="2">
<li>
<p>如何自定义枚举类？步骤：<br>
//自定义枚举类<br>
class Season{<br>
//1.声明Season对象的属性:private final修饰<br>
private final String seasonName;<br>
private final String seasonDesc;<br>
//2.私化类的构造器,并给对象属性赋值<br>
private Season(String seasonName,String seasonDesc){<br>
this.seasonName = seasonName;<br>
this.seasonDesc = seasonDesc;<br>
}<br>
//3.提供当前枚举类的多个对象：public static final的<br>
public static final Season SPRING = new Season(&quot;春天&quot;,&quot;春暖花开&quot;);<br>
public static final Season SUMMER = new Season(&quot;夏天&quot;,&quot;夏日炎炎&quot;);<br>
public static final Season AUTUMN = new Season(&quot;秋天&quot;,&quot;秋高气爽&quot;);<br>
public static final Season WINTER = new Season(&quot;冬天&quot;,&quot;冰天雪地&quot;);<br>
//4.其他诉求1：获取枚举类对象的属性<br>
public String getSeasonName() {<br>
return seasonName;<br>
}<br>
public String getSeasonDesc() {<br>
return seasonDesc;<br>
}<br>
//4.其他诉求1：提供toString()<br>
@Override<br>
public String toString() {<br>
return &quot;Season{&quot; +<br>
&quot;seasonName='&quot; + seasonName + ''' +<br>
&quot;, seasonDesc='&quot; + seasonDesc + ''' +<br>
'}';<br>
}<br>
}</p>
</li>
<li>
<p>jdk 5.0 新增使用enum定义枚举类。步骤：<br>
//使用enum关键字枚举类<br>
enum Season1 {<br>
//1.提供当前枚举类的对象，多个对象之间用&quot;,&quot;隔开，末尾对象&quot;;&quot;结束<br>
SPRING(&quot;春天&quot;,&quot;春暖花开&quot;),<br>
SUMMER(&quot;夏天&quot;,&quot;夏日炎炎&quot;),<br>
AUTUMN(&quot;秋天&quot;,&quot;秋高气爽&quot;),<br>
WINTER(&quot;冬天&quot;,&quot;冰天雪地&quot;);<br>
//2.声明Season对象的属性:private final修饰<br>
private final String seasonName;<br>
private final String seasonDesc;<br>
//2.私有化类的构造器,并给对象属性赋值<br>
private Season1(String seasonName,String seasonDesc){<br>
this.seasonName = seasonName;<br>
this.seasonDesc = seasonDesc;<br>
}</p>
<p>//4.其他诉求1：获取枚举类对象的属性<br>
public String getSeasonName() {<br>
return seasonName;<br>
}<br>
public String getSeasonDesc() {<br>
return seasonDesc;<br>
}<br>
}</p>
</li>
<li>
<p>使用enum定义枚举类之后，枚举类常用方法：（继承于java.lang.Enum类）<br>
Season1 summer = Season1.SUMMER;<br>
//toString():返回枚举类对象的名称<br>
System.out.println(summer.toString());<br>
//        System.out.println(Season1.class.getSuperclass());<br>
System.out.println(&quot;<strong><strong><strong><strong><strong><strong><strong><strong>&quot;);<br>
//values():返回所有的枚举类对象构成的数组<br>
Season1[] values = Season1.values();<br>
for(int i = 0;i &lt; values.length;i++){<br>
System.out.println(values[i]);<br>
}<br>
System.out.println(&quot;</strong></strong></strong></strong></strong></strong></strong></strong>&quot;);<br>
Thread.State[] values1 = Thread.State.values();<br>
for (int i = 0; i &lt; values1.length; i++) {<br>
System.out.println(values1[i]);<br>
}<br>
//valueOf(String objName):返回枚举类中对象名是objName的对象。<br>
Season1 winter = Season1.valueOf(&quot;WINTER&quot;);<br>
//如果没objName的枚举类对象，则抛异常：IllegalArgumentException<br>
//        Season1 winter = Season1.valueOf(&quot;WINTER1&quot;);<br>
System.out.println(winter);</p>
</li>
<li>
<p>使用enum定义枚举类之后，如何让枚举类对象分别实现接口：<br>
interface Info{<br>
void show();<br>
}</p>
</li>
</ol>
<p>//使用enum关键字枚举类<br>
enum Season1 implements Info{<br>
//1.提供当前枚举类的对象，多个对象之间用&quot;,&quot;隔开，末尾对象&quot;;&quot;结束<br>
SPRING(&quot;春天&quot;,&quot;春暖花开&quot;){<br>
@Override<br>
public void show() {<br>
System.out.println(&quot;春天在哪里？&quot;);<br>
}<br>
},<br>
SUMMER(&quot;夏天&quot;,&quot;夏日炎炎&quot;){<br>
@Override<br>
public void show() {<br>
System.out.println(&quot;宁夏&quot;);<br>
}<br>
},<br>
AUTUMN(&quot;秋天&quot;,&quot;秋高气爽&quot;){<br>
@Override<br>
public void show() {<br>
System.out.println(&quot;秋天不回来&quot;);<br>
}<br>
},<br>
WINTER(&quot;冬天&quot;,&quot;冰天雪地&quot;){<br>
@Override<br>
public void show() {<br>
System.out.println(&quot;大约在冬季&quot;);<br>
}<br>
};<br>
}</p>
<p>二、注解的使用</p>
<ol>
<li>注解的理解<br>
① jdk 5.0 新增的功能<br>
② Annotation 其实就是代码里的特殊标记, 这些标记可以在编译, 类加载, 运行时被读取, 并执行相应的处理。通过使用 Annotation, 程序员可以在不改变原逻辑的情况下, 在源文件中嵌入一些补充信息。<br>
③在JavaSE中，注解的使用目的比较简单，例如标记过时的功能，忽略警告等。在JavaEE/Android<br>
中注解占据了更重要的角色，例如用来配置应用程序的任何切面，代替JavaEE旧版中所遗留的繁冗<br>
代码和XML配置等。</li>
</ol>
<p>框架 = 注解 + 反射机制 + 设计模式</p>
<ol>
<li>注解的使用示例</li>
</ol>
<ul>
<li>示例一：生成文档相关的注解</li>
<li>示例二：在编译时进行格式检查(JDK内置的个基本注解)<br>
@Override: 限定重写父类方法, 该注解只能用于方法<br>
@Deprecated: 用于表示所修饰的元素(类, 方法等)已过时。通常是因为所修饰的结构危险或存在更好的择<br>
@SuppressWarnings: 抑制编译器警告</li>
<li>示例：跟踪代码依赖性，实现替代配置文件功能</li>
</ul>
<ol start="3">
<li>如何自定义注解：参照@SuppressWarnings定义</li>
</ol>
<ul>
<li>① 注解声明为：@interface</li>
<li>② 内部定义成员，通常使用value表示</li>
<li>③ 可以指定成员的默认值，使用default定义</li>
<li>④ 如果自定义注解没成员，表明是一个标识作用。</li>
</ul>
<p>说明：<br>
如果注解有成员，在使用注解时，需要指明成员的值。<br>
自定义注解必须配上注解的信息处理流程(使用反射)才有意义。<br>
自定义注解通过都会指明两个元注解：Retention、Target</p>
<p>代码举例：<br>
@Inherited<br>
@Repeatable(MyAnnotations.class)<br>
@Retention(RetentionPolicy.RUNTIME)<br>
@Target({TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE,TYPE_PARAMETER,TYPE_USE})<br>
public @interface MyAnnotation {</p>
<pre><code>String value() default &quot;hello&quot;;
</code></pre>
<p>}<br>
4. 元注解 ：对现有的注解进行解释说明的注解。<br>
jdk 提供的4种元注解：<br>
Retention：指定所修饰的 Annotation 的生命周期：SOURCE\CLASS（默认行为\RUNTIME<br>
只声明为RUNTIME生命周期的注解，才能通过反射获取。<br>
Target:用于指定被修饰的 Annotation 能用于修饰哪些程序元素<br>
<em><strong><strong><strong>出现的频率较低</strong></strong></strong></em><br>
Documented:表示所修饰的注解在被javadoc解析时，保留下来。<br>
Inherited:被它修饰的 Annotation 将具继承性。</p>
<p>---&gt;类比：元数据的概念：String name = &quot;Tom&quot;;<br>
5. 如何获取注解信息:通过发射来进行获取、调用。<br>
前提：要求此注解的元注解Retention中声明的生命周期状态为：RUNTIME.<br>
6.JDK8中注解的新特性：可重复注解、类型注解<br>
6.1 可重复注解：① 在MyAnnotation上声明@Repeatable，成员值为MyAnnotations.class<br>
② MyAnnotation的Target和Retention等元注解与MyAnnotations相同。<br>
6.2 类型注解：<br>
ElementType.TYPE_PARAMETER 表示该注解能写在类型变量的声明语句中（如：泛型声明。<br>
ElementType.TYPE_USE 表示该注解能写在使用类型的任何语句中。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[13 Java常用类]]></title>
        <id>https://fantaixi.github.io/post/13-java-chang-yong-lei/</id>
        <link href="https://fantaixi.github.io/post/13-java-chang-yong-lei/">
        </link>
        <updated>2020-05-06T17:31:54.000Z</updated>
        <content type="html"><![CDATA[<p>一、String类<br>
java.lang.String类的使用<br>
1.概述<br>
String:字符串，使用一对&quot;&quot;引起来表示。<br>
1.String声明为final的，不可被继承<br>
2.String实现了Serializable接口：表示字符串是支持序列化的。<br>
实现了Comparable接口：表示String可以比较大小<br>
3.String内部定义了final char[] value用于存储字符串数据<br>
4.通过字面量的方式（区别于new给一个字符串赋值，此时的字符串值声明在字符串常量池中)。<br>
5.字符串常量池中是不会存储相同内容(使用String类的equals()比较，返回true)的字符串的。</p>
<p>2.String的不可变性<br>
2.1 说明<br>
1.当对字符串重新赋值时，需要重写指定内存区域赋值，不能使用原有的value进行赋值。<br>
2.当对现的字符串进行连接操作时，也需要重新指定内存区域赋值，不能使用原有的value进行赋值。<br>
3.当调用String的replace()方法修改指定字符或字符串时，也需要重新指定内存区域赋值，不能使用原有的value进行赋值。<br>
2.2 代码举例<br>
String s1 = &quot;abc&quot;;//字面量的定义方式<br>
String s2 = &quot;abc&quot;;<br>
s1 = &quot;hello&quot;;<br>
System.out.println(s1 == s2);//比较s1和s2的地址值<br>
System.out.println(s1);//hello<br>
System.out.println(s2);//abc<br>
System.out.println(&quot;<em><strong><strong><strong><strong><strong><strong><strong><strong>&quot;);<br>
String s3 = &quot;abc&quot;;<br>
s3 += &quot;def&quot;;<br>
System.out.println(s3);//abcdef<br>
System.out.println(s2);<br>
System.out.println(&quot;</strong></strong></strong></strong></strong></strong></strong></strong></em>&quot;);<br>
String s4 = &quot;abc&quot;;<br>
String s5 = s4.replace('a', 'm');<br>
System.out.println(s4);//abc<br>
System.out.println(s5);//mbc<br>
2.3 图示<br>
<img src="https://fantaixi.github.io/post-images/1588786564765.png" alt="" loading="lazy"><br>
3.String实例化的不同方式<br>
3.1 方式说明<br>
方式一：通过字面量定义的方式<br>
方式二：通过new + 构造器的方式<br>
3.2 代码举例<br>
//通过字面量定义的方式：此时的s1和s2的数据javaEE声明在方法区中的字符串常量池中。<br>
String s1 = &quot;javaEE&quot;;<br>
String s2 = &quot;javaEE&quot;;<br>
//通过new + 构造器的方式:此时的s3和s4保存的地址值，是数据在堆空间中开辟空间以后对应的地址值。<br>
String s3 = new String(&quot;javaEE&quot;);<br>
String s4 = new String(&quot;javaEE&quot;);<br>
System.out.println(s1 == s2);//true<br>
System.out.println(s1 == s3);//false<br>
System.out.println(s1 == s4);//false<br>
System.out.println(s3 == s4);//false<br>
3.3 面试题<br>
String s = new String(&quot;abc&quot;);方式创建对象，在内存中创建了几个对象？<br>
两个:一个是堆空间中new结构，另一个是char[]对应的常量池中的数据：&quot;abc&quot;<br>
3.4 图示<br>
<img src="https://fantaixi.github.io/post-images/1588786519711.png" alt="" loading="lazy"><br>
4. 字符串拼接方式赋值的对比<br>
4.1 说明<br>
1.常量与常量的拼接结果在常量池。且常量池中不会存在相同内容的常量。<br>
2.只要其中一个是变量，结果就在堆中。<br>
3.如果拼接的结果调用intern()方法，返回值就在常量池中<br>
4.2 代码举例<br>
String s1 = &quot;javaEE&quot;;<br>
String s2 = &quot;hadoop&quot;;<br>
String s3 = &quot;javaEEhadoop&quot;;<br>
String s4 = &quot;javaEE&quot; + &quot;hadoop&quot;;<br>
String s5 = s1 + &quot;hadoop&quot;;<br>
String s6 = &quot;javaEE&quot; + s2;<br>
String s7 = s1 + s2;<br>
System.out.println(s3 == s4);//true<br>
System.out.println(s3 == s5);//false<br>
System.out.println(s3 == s6);//false<br>
System.out.println(s3 == s7);//false<br>
System.out.println(s5 == s6);//false<br>
System.out.println(s5 == s7);//false<br>
System.out.println(s6 == s7);//false<br>
String s8 = s6.intern();//返回值得到的s8使用的常量值中已经存在的“javaEEhadoop”<br>
System.out.println(s3 == s8);//true</p>
<hr>
<p>String s1 = &quot;javaEEhadoop&quot;;<br>
String s2 = &quot;javaEE&quot;;<br>
String s3 = s2 + &quot;hadoop&quot;;<br>
System.out.println(s1 == s3);//false<br>
final String s4 = &quot;javaEE&quot;;//s4:常量<br>
String s5 = s4 + &quot;hadoop&quot;;<br>
System.out.println(s1 == s5);//true</p>
<p>5.常用方法：<br>
int length()：返回字符串的长度： return value.length<br>
char charAt(int index)： 返回某索引处的字符return value[index]<br>
boolean isEmpty()：判断是否是空字符串：return value.length == 0<br>
String toLowerCase()：使用默认语言环境，将 String 中的所字符转换为小写<br>
String toUpperCase()：使用默认语言环境，将 String 中的所字符转换为大写<br>
String trim()：返回字符串的副本，忽略前导空白和尾部空白<br>
boolean equals(Object obj)：比较字符串的内容是否相同<br>
boolean equalsIgnoreCase(String anotherString)：与equals方法类似，忽略大小写<br>
String concat(String str)：将指定字符串连接到此字符串的结尾。 等价于用“+”<br>
int compareTo(String anotherString)：比较两个字符串的大小<br>
String substring(int beginIndex)：返回一个新的字符串，它是此字符串的从beginIndex开始截取到最后的一个子字符串。<br>
String substring(int beginIndex, int endIndex) ：返回一个新字符串，它是此字符串从beginIndex开始截取到endIndex(不包含)的一个子字符串。<br>
boolean endsWith(String suffix)：测试此字符串是否以指定的后缀结束<br>
boolean startsWith(String prefix)：测试此字符串是否以指定的前缀开始<br>
boolean startsWith(String prefix, int toffset)：测试此字符串从指定索引开始的子字符串是否以指定前缀开始<br>
boolean contains(CharSequence s)：当且仅当此字符串包含指定的 char 值序列时，返回 true<br>
int indexOf(String str)：返回指定子字符串在此字符串中第一次出现处的索引<br>
int indexOf(String str, int fromIndex)：返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始<br>
int lastIndexOf(String str)：返回指定子字符串在此字符串中最右边出现处的索引<br>
int lastIndexOf(String str, int fromIndex)：返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索</p>
<p>注：indexOf和lastIndexOf方法如果未找到都是返回-1</p>
<p>替换：<br>
String replace(char oldChar, char newChar)：返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所 oldChar 得到的。<br>
String replace(CharSequence target, CharSequence replacement)：使用指定的字面值替换序列替换此字符串所匹配字面值目标序列的子字符串。<br>
String replaceAll(String regex, String replacement)：使用给定的 replacement 替换此字符串所匹配给定的正则表达式的子字符串。<br>
String replaceFirst(String regex, String replacement)：使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。<br>
匹配:<br>
boolean matches(String regex)：告知此字符串是否匹配给定的正则表达式。<br>
切片：<br>
String[] split(String regex)：根据给定正则表达式的匹配拆分此字符串。<br>
String[] split(String regex, int limit)：根据匹配给定的正则表达式来拆分此字符串，最多不超过limit个，如果超过了，剩下的全部都放到最后一个元素中。</p>
<ol start="6">
<li>String与其它结构的转换	<br>
6.1 与基本数据类型、包装类之间的转换<br>
String --&gt; 基本数据类型、包装类：调用包装类的静态方法：parseXxx(str)<br>
基本数据类型、包装类 --&gt; String:调用String重载的valueOf(xxx)<br>
@Test<br>
public void test1(){<br>
String str1 = &quot;123&quot;;<br>
//        int num = (int)str1;//错误的<br>
int num = Integer.parseInt(str1);<br>
String str2 = String.valueOf(num);//&quot;123&quot;<br>
String str3 = num + &quot;&quot;;<br>
System.out.println(str1 == str3);<br>
}<br>
6.2 与字符数组之间的转换<br>
String --&gt; char[]:调用String的toCharArray()<br>
char[] --&gt; String:调用String的构造器<br>
@Test<br>
public void test2(){<br>
String str1 = &quot;abc123&quot;;  //题目： a21cb3<br>
char[] charArray = str1.toCharArray();<br>
for (int i = 0; i &lt; charArray.length; i++) {<br>
System.out.println(charArray[i]);<br>
}<br>
char[] arr = new char[]{'h','e','l','l','o'};<br>
String str2 = new String(arr);<br>
System.out.println(str2);<br>
}<br>
6.3 与字节数组之间的转换<br>
编码：String --&gt; byte[]:调用String的getBytes()<br>
解码：byte[] --&gt; String:调用String的构造器</li>
</ol>
<p>编码：字符串 --&gt;字节  (看得懂 ---&gt;看不懂的二进制数据)<br>
解码：编码的逆过程，字节 --&gt; 字符串 （看不懂的二进制数据 ---&gt; 看得懂</p>
<p>说明：解码时，要求解码使用的字符集必须与编码时使用的字符集一致，否则会出现乱码。</p>
<p>@Test<br>
public void test3() throws UnsupportedEncodingException {<br>
String str1 = &quot;abc123中国&quot;;<br>
byte[] bytes = str1.getBytes();//使用默认的字符集，进行编码。<br>
System.out.println(Arrays.toString(bytes));<br>
byte[] gbks = str1.getBytes(&quot;gbk&quot;);//使用gbk字符集进行编码。<br>
System.out.println(Arrays.toString(gbks));<br>
System.out.println(&quot;******************&quot;);<br>
String str2 = new String(bytes);//使用默认的字符集，进行解码。<br>
System.out.println(str2);<br>
String str3 = new String(gbks);<br>
System.out.println(str3);//出现乱码。原因：编码集和解码集不一致！<br>
String str4 = new String(gbks, &quot;gbk&quot;);<br>
System.out.println(str4);//没出现乱码。原因：编码集和解码集一致！<br>
}</p>
<p>6.4 与StringBuffer、StringBuilder之间的转换<br>
String --&gt;StringBuffer、StringBuilder:调用StringBuffer、StringBuilder构造器<br>
StringBuffer、StringBuilder --&gt;String:①调用String构造器；②StringBuffer、StringBuilder的toString()</p>
<ol start="7">
<li>JVM中字符串常量池存放位置说明：<br>
jdk 1.6 (jdk 6.0 ,java 6.0):字符串常量池存储在方法区（永久区）<br>
jdk 1.7:字符串常量池存储在堆空间<br>
jdk 1.8:字符串常量池存储在方法区（元空间）</li>
</ol>
<p>二、StringBuffer、StringBuilder<br>
1.String、StringBuffer、StringBuilder三者的对比<br>
String:不可变的字符序列；底层使用char[]存储<br>
StringBuffer:可变的字符序列；线程安全的，效率低；底层使用char[]存储<br>
StringBuilder:可变的字符序列；jdk5.0新增的，线程不安全的，效率高；底层使用char[]存储</p>
<p>2.StringBuffer与StringBuilder的内存解析<br>
以StringBuffer为例：<br>
String str = new String();//char[] value = new char[0];<br>
String str1 = new String(&quot;abc&quot;);//char[] value = new char[]{'a','b','c'};<br>
StringBuffer sb1 = new StringBuffer();//char[] value = new char[16];底层创建了一个长度是16的数组。<br>
System.out.println(sb1.length());//<br>
sb1.append('a');//value[0] = 'a';<br>
sb1.append('b');//value[1] = 'b';<br>
StringBuffer sb2 = new StringBuffer(&quot;abc&quot;);<br>
//char[] value = new char[&quot;abc&quot;.length() + 16];</p>
<p>//问题1. System.out.println(sb2.length());//3<br>
//问题2. 扩容问题:如果要添加的数据底层数组盛不下了，那就需要扩容底层的数组。<br>
默认情况下，扩容为原来容量的2倍 + 2，同时将原数组中的元素复制到新的数组中。</p>
<p>开发中建议大家使用：StringBuffer(int capacity) 或 StringBuilder(int capacity)</p>
<p>3.对比String、StringBuffer、StringBuilder三者的执行效率<br>
从高到低排列：StringBuilder &gt; StringBuffer &gt; String</p>
<p>4.StringBuffer、StringBuilder中的常用方法<br>
增：append(xxx)<br>
删：delete(int start,int end)<br>
改：setCharAt(int n ,char ch) / replace(int start, int end, String str)<br>
查：charAt(int n )<br>
插：insert(int offset, xxx)<br>
长度：length();<br>
*遍历：for() + charAt() / toString()</p>
<p>三、JDK8之前的日期时间API<br>
1.获取系统当前时间：System类中的currentTimeMillis()<br>
long time = System.currentTimeMillis();<br>
//返回当前时间与1970年1月1日0时0分0秒之间以毫秒为单位的时间差。<br>
//称为时间戳<br>
System.out.println(time);</p>
<ol start="2">
<li>
<p>java.util.Date类与java.sql.Date类<br>
/*<br>
java.util.Date类<br>
|---java.sql.Date类</p>
<p>1.两个构造器的使用<br>
&gt;构造器一：Date()：创建一个对应当前时间的Date对象<br>
&gt;构造器二：创建指定毫秒数的Date对象<br>
2.两个方法的使用<br>
&gt;toString():显示当前的年、月、日、时、分、秒<br>
&gt;getTime():获取当前Date对象对应的毫秒数。（时间戳）</p>
<ol start="3">
<li>
<p>java.sql.Date对应着数据库中的日期类型的变量</p>
<blockquote>
<p>如何实例化<br>
如何将java.util.Date对象转换为java.sql.Date对象<br>
*/<br>
@Test<br>
public void test2(){<br>
//构造器一：Date()：创建一个对应当前时间的Date对象<br>
Date date1 = new Date();<br>
System.out.println(date1.toString());//Sat Feb 16 16:35:31 GMT+08:00 2019<br>
System.out.println(date1.getTime());//1550306204104<br>
//构造器二：创建指定毫秒数的Date对象<br>
Date date2 = new Date(155030620410L);<br>
System.out.println(date2.toString());</p>
</blockquote>
<p>//创建java.sql.Date对象<br>
java.sql.Date date3 = new java.sql.Date(35235325345L);<br>
System.out.println(date3);//1971-02-13<br>
//如何将java.util.Date对象转换为java.sql.Date对象<br>
//情况一：<br>
//        Date date4 = new java.sql.Date(2343243242323L);<br>
//        java.sql.Date date5 = (java.sql.Date) date4;<br>
//情况二：<br>
Date date6 = new Date();<br>
java.sql.Date date7 = new java.sql.Date(date6.getTime());<br>
}</p>
</li>
</ol>
</li>
<li>
<p>java.text.SimpleDataFormat类<br>
SimpleDateFormat对日期Date类的格式化和解析<br>
1.两个操作：<br>
1.1 格式化：日期 ---&gt;字符串<br>
1.2 解析：格式化的逆过程，字符串 ---&gt; 日期</p>
</li>
</ol>
<p>2.SimpleDateFormat的实例化:new + 构造器</p>
<p>//<em><strong><strong><strong><strong><strong><strong>照指定的方式格式化和解析：调用带参的构造器</strong></strong></strong></strong></strong></strong></em>****<br>
//        SimpleDateFormat sdf1 = new SimpleDateFormat(&quot;yyyyy.MMMMM.dd GGG hh:mm aaa&quot;);<br>
SimpleDateFormat sdf1 = new SimpleDateFormat(&quot;yyyy-MM-dd hh:mm:ss&quot;);<br>
//格式化<br>
String format1 = sdf1.format(date);<br>
System.out.println(format1);//2019-02-18 11:48:27<br>
//解析:要求字符串必须是符合SimpleDateFormat识别的格式(通过构造器参数体现),<br>
//否则，抛异常<br>
Date date2 = sdf1.parse(&quot;2020-02-18 11:48:27&quot;);<br>
System.out.println(date2);</p>
<pre><code>@Test
public void testExer() throws ParseException {
    String birth = &quot;2020-09-08&quot;;

    SimpleDateFormat sdf1 = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);
    Date date = sdf1.parse(birth);
</code></pre>
<p>//        System.out.println(date);</p>
<pre><code>    java.sql.Date birthDate = new java.sql.Date(date.getTime());
    System.out.println(birthDate);
}
</code></pre>
<p>4.Calendar类：日历类、抽象类<br>
//1.实例化<br>
//方式一：创建其子类（GregorianCalendar的对象<br>
//方式二：调用其静态方法getInstance()<br>
Calendar calendar = Calendar.getInstance();<br>
//        System.out.println(calendar.getClass());</p>
<pre><code>    //2.常用方法
    //get()
    int days = calendar.get(Calendar.DAY_OF_MONTH);
    System.out.println(days);
    System.out.println(calendar.get(Calendar.DAY_OF_YEAR));

    //set()
    //calendar可变性
     calendar.set(Calendar.DAY_OF_MONTH,22);
    days = calendar.get(Calendar.DAY_OF_MONTH);
    System.out.println(days);

    //add()
    calendar.add(Calendar.DAY_OF_MONTH,-3);
    days = calendar.get(Calendar.DAY_OF_MONTH);
    System.out.println(days);

    //getTime():日历类---&gt; Date
    Date date = calendar.getTime();
    System.out.println(date);

    //setTime():Date ---&gt; 日历类
    Date date1 = new Date();
    calendar.setTime(date1);
    days = calendar.get(Calendar.DAY_OF_MONTH);
    System.out.println(days);
</code></pre>
<p>四、JDK8中新日期时间API<br>
1.日期时间API的迭代：<br>
第一代：jdk 1.0 Date类<br>
第二代：jdk 1.1 Calendar类，一定程度上替换Date类<br>
第三代：jdk 1.8 提出了新的一套API</p>
<p>2.前两代存在的问题举例：<br>
可变性：像日期和时间这样的类应该是不可变的。<br>
偏移性：Date中的年份是从1900开始的，而月份都从0开始。<br>
格式化：格式化只对Date用，Calendar则不行。<br>
此外，它们也不是线程安全的；不能处理闰秒等。</p>
<p>3.java 8 中新的日期时间API涉及到的包<br>
<img src="https://fantaixi.github.io/post-images/1588787191055.png" alt="" loading="lazy"><br>
4.本地日期、本地时间、本地日期时间的使用：LocalDate / LocalTime / LocalDateTime<br>
4.1 说明：<br>
① 分别表示使用 ISO-8601日历系统的日期、时间、日期和时间。它们提供了简单的本地日期或时间，并不包含当前的时间信息，也不包含与时区相关的信息。<br>
② LocalDateTime相较于LocalDate、LocalTime，使用频率要高<br>
③ 类似于Calendar</p>
<p>4.2 常用方法：<br>
<img src="https://fantaixi.github.io/post-images/1588787234063.png" alt="" loading="lazy"><br>
5.时间点：Instant<br>
5.1 说明：<br>
① 时间线上的一个瞬时点。 概念上讲，它只是简单的表示自1970年1月1日0时0分0秒（UTC开始的秒数。）<br>
② 类似于 java.util.Date类</p>
<p>5.2 常用方法：<br>
<img src="https://fantaixi.github.io/post-images/1588787270536.png" alt="" loading="lazy"></p>
<p>6.日期时间格式化类：DateTimeFormatter<br>
6.1 说明：<br>
① 格式化或解析日期、时间<br>
② 类似于SimpleDateFormat<br>
6.2 常用方法：<br>
① 实例化方式：<br>
预定义的标准格式。如：ISO_LOCAL_DATE_TIME;ISO_LOCAL_DATE;ISO_LOCAL_TIME<br>
本地化相关的格式。如：ofLocalizedDateTime(FormatStyle.LONG)<br>
自定义的格式。如：ofPattern(“yyyy-MM-dd hh:mm:ss”)</p>
<p>② 常用方法：<br>
<img src="https://fantaixi.github.io/post-images/1588787306830.png" alt="" loading="lazy"></p>
<p>特别的：自定义的格式。如：ofPattern(“yyyy-MM-dd hh:mm:ss”)<br>
//  重点：自定义的格式。如：ofPattern(“yyyy-MM-dd hh:mm:ss”)<br>
DateTimeFormatter formatter3 = DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd hh:mm:ss&quot;);<br>
//格式化<br>
String str4 = formatter3.format(LocalDateTime.now());<br>
System.out.println(str4);//2019-02-18 03:52:09</p>
<p>//解析<br>
TemporalAccessor accessor = formatter3.parse(&quot;2019-02-18 03:52:09&quot;);<br>
System.out.println(accessor);</p>
<p>7.其它API的使用（了解）<br>
7.1 带时区的日期时间：ZonedDateTime / ZoneId<br>
举例：<br>
// ZoneId:类中包含了所的时区信息<br>
@Test<br>
public void test1(){<br>
//getAvailableZoneIds():获取所的ZoneId<br>
Set<String> zoneIds = ZoneId.getAvailableZoneIds();<br>
for(String s : zoneIds){<br>
System.out.println(s);<br>
}<br>
System.out.println();<br>
//获取“Asia/Tokyo”时区对应的时间<br>
LocalDateTime localDateTime = LocalDateTime.now(ZoneId.of(&quot;Asia/Tokyo&quot;));<br>
System.out.println(localDateTime)	<br>
}<br>
//ZonedDateTime:带时区的日期时间<br>
@Test<br>
public void test2(){<br>
//now():获取本时区的ZonedDateTime对象<br>
ZonedDateTime zonedDateTime = ZonedDateTime.now();<br>
System.out.println(zonedDateTime);<br>
//now(ZoneId id):获取指定时区的ZonedDateTime对象<br>
ZonedDateTime zonedDateTime1 = ZonedDateTime.now(ZoneId.of(&quot;Asia/Tokyo&quot;));<br>
System.out.println(zonedDateTime1);<br>
}<br>
7.2 时间间隔：Duration--用于计算两个“时间”间隔，以秒和纳秒为基准<br>
举例：<br>
@Test<br>
public void test3(){<br>
LocalTime localTime = LocalTime.now();<br>
LocalTime localTime1 = LocalTime.of(15, 23, 32);<br>
//between():静态方法，返回Duration对象，表示两个时间的间隔<br>
Duration duration = Duration.between(localTime1, localTime);<br>
System.out.println(duration);<br>
System.out.println(duration.getSeconds());<br>
System.out.println(duration.getNano());<br>
LocalDateTime localDateTime = LocalDateTime.of(2016, 6, 12, 15, 23, 32);<br>
LocalDateTime localDateTime1 = LocalDateTime.of(2017, 6, 12, 15, 23, 32);<br>
Duration duration1 = Duration.between(localDateTime1, localDateTime);<br>
System.out.println(duration1.toDays());<br>
}<br>
7.3 日期间隔：Period --用于计算两个“日期”间隔，以年、月、日衡量<br>
举例：<br>
@Test<br>
public void test4(){<br>
LocalDate localDate = LocalDate.now();<br>
LocalDate localDate1 = LocalDate.of(2028, 3, 18);<br>
Period period = Period.between(localDate, localDate1);<br>
System.out.println(period);<br>
System.out.println(period.getYears());<br>
System.out.println(period.getMonths());<br>
System.out.println(period.getDays());<br>
Period period1 = period.withYears(2);<br>
System.out.println(period1);	<br>
}<br>
7.4 日期时间校正器：TemporalAdjuster<br>
举例：<br>
@Test<br>
public void test5(){<br>
//获取当前日期的下一个周日是哪天？<br>
TemporalAdjuster temporalAdjuster = TemporalAdjusters.next(DayOfWeek.SUNDAY);<br>
LocalDateTime localDateTime = LocalDateTime.now().with(temporalAdjuster);<br>
System.out.println(localDateTime);<br>
//获取下一个工作日是哪天？<br>
LocalDate localDate = LocalDate.now().with(new TemporalAdjuster(){<br>
@Override<br>
public Temporal adjustInto(Temporal temporal) {<br>
LocalDate date = (LocalDate)temporal;<br>
if(date.getDayOfWeek().equals(DayOfWeek.FRIDAY)){<br>
return date.plusDays(3);<br>
}else if(date.getDayOfWeek().equals(DayOfWeek.SATURDAY)){<br>
return date.plusDays(2);<br>
}else{<br>
return date.plusDays(1);<br>
}		<br>
}	<br>
});<br>
System.out.println(&quot;下一个工作日是：&quot; + localDate);<br>
}</p>
<p>五、Java比较器<br>
1.Java比较器的使用背景：<br>
Java中的对象，正常情况下，只能进行比较：==  或  != 。不能使用 &gt; 或 &lt; 的<br>
但是在开发场景中，我们需要对多个对象进行排序，言外之意，就需要比较对象的大小。<br>
如何实现？使用两个接口中的任何一个：Comparable 或 Comparator</p>
<p>2.自然排序：使用Comparable接口<br>
2.1 说明<br>
1.像String、包装类等实现了Comparable接口，重写了compareTo(obj)方法，给出了比较两个对象大小的方式。<br>
2.像String、包装类重写compareTo()方法以后，进行了从小到大的排列<br>
3. 重写compareTo(obj)的规则：<br>
如果当前对象this大于形参对象obj，则返回正整数，<br>
如果当前对象this小于形参对象obj，则返回负整数，<br>
如果当前对象this等于形参对象obj，则返回零。<br>
4. 对于自定义类来说，如果需要排序，我们可以让自定义类实现Comparable接口，重写compareTo(obj)方法。在compareTo(obj)方法中指明如何排序</p>
<p>2.2 自定义类代码举例：<br>
public class Goods implements  Comparable{<br>
private String name;<br>
private double price;<br>
//指明商品比较大小的方式:照价格从低到高排序,再照产品名称从高到低排序<br>
@Override<br>
public int compareTo(Object o) {<br>
//        System.out.println(&quot;**************&quot;);<br>
if(o instanceof Goods){<br>
Goods goods = (Goods)o;<br>
//方式一：<br>
if(this.price &gt; goods.price){<br>
return 1;<br>
}else if(this.price &lt; goods.price){<br>
return -1;<br>
}else{<br>
//                return 0;<br>
return -this.name.compareTo(goods.name);<br>
}<br>
//方式二：<br>
//           return Double.compare(this.price,goods.price);<br>
}<br>
//        return 0;<br>
throw new RuntimeException(&quot;传入的数据类型不一致！&quot;);<br>
}<br>
// getter、setter、toString()、构造器：省略<br>
}</p>
<p>3.定制排序：使用Comparator接口<br>
3.1 说明<br>
1.背景：<br>
当元素的类型没实现java.lang.Comparable接口而又不方便修改代码，或者实现了java.lang.Comparable接口的排序规则不适合当前的操作，那么可以考虑使用 Comparator 的对象来排序<br>
2.重写compare(Object o1,Object o2)方法，比较o1和o2的大小：<br>
如果方法返回正整数，则表示o1大于o2；<br>
如果返回0，表示相等；<br>
返回负整数，表示o1小于o2。</p>
<p>3.2 代码举例：<br>
Comparator com = new Comparator() {<br>
//指明商品比较大小的方式:照产品名称从低到高排序,再照价格从高到低排序<br>
@Override<br>
public int compare(Object o1, Object o2) {<br>
if(o1 instanceof Goods &amp;&amp; o2 instanceof Goods){<br>
Goods g1 = (Goods)o1;<br>
Goods g2 = (Goods)o2;<br>
if(g1.getName().equals(g2.getName())){<br>
return -Double.compare(g1.getPrice(),g2.getPrice());<br>
}else{<br>
return g1.getName().compareTo(g2.getName());<br>
}<br>
}<br>
throw new RuntimeException(&quot;输入的数据类型不一致&quot;);<br>
}<br>
}<br>
使用：<br>
Arrays.sort(goods,com);<br>
Collections.sort(coll,com);<br>
new TreeSet(com);</p>
<ol start="4">
<li>两种排序方式对比</li>
</ol>
<ul>
<li>Comparable接口的方式一旦一定，保证Comparable接口实现类的对象在任何位置都可以比较大小。</li>
<li>Comparator接口属于临时性的比较。</li>
</ul>
<p>六、其他类<br>
1.System类<br>
System类代表系统，系统级的很多属性和控制方法都放置在该类的内部。该类位于java.lang包。<br>
由于该类的构造器是private的，所以无法创建该类的对象，也就是无法实例化该类。其内部的成员变量和成员方法都是static的，所以也可以很方便的进行调用。<br>
方法：<br>
native long currentTimeMillis()<br>
void exit(int status)<br>
void gc()<br>
String getProperty(String key)</p>
<p>2.Math类<br>
java.lang.Math提供了一系列静态方法用于科学计算。其方法的参数和返回值类型一般为double型。</p>
<p>3.BigInteger类、BigDecimal类<br>
说明：<br>
① java.math包的BigInteger可以表示不可变的任意精度的整数。<br>
② 要求数字精度比较高，用到java.math.BigDecimal类</p>
<p>代码举例：<br>
<img src="https://fantaixi.github.io/post-images/1588787555086.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[12 Java多线程]]></title>
        <id>https://fantaixi.github.io/post/12-java-duo-xian-cheng/</id>
        <link href="https://fantaixi.github.io/post/12-java-duo-xian-cheng/">
        </link>
        <updated>2020-05-06T15:29:19.000Z</updated>
        <content type="html"><![CDATA[<p>一、程序、进程、线程的理解</p>
<ol>
<li>
<p>程序(programm)<br>
概念：是为完成特定任务、用某种语言编写的一组指令的集合。即指一段静态的代码。</p>
</li>
<li>
<p>进程(process)<br>
概念：程序的一次执行过程，或是正在运行的一个程序。<br>
说明：进程作为资源分配的单位，系统在运行时会为每个进程分配不同的内存区域</p>
</li>
<li>
<p>线程(thread)<br>
概念：进程可进一步细化为线程，是一个程序内部的一条执行路径。<br>
说明：线程作为调度和执行的单位，每个线程拥独立的运行栈和程序计数器(pc)，线程切换的开销小。<br>
<img src="https://fantaixi.github.io/post-images/1588779139268.png" alt="" loading="lazy"></p>
</li>
</ol>
<p>补充：<br>
内存结构：<br>
<img src="https://fantaixi.github.io/post-images/1588779225110.png" alt="" loading="lazy"></p>
<p>进程可以细化为多个线程。<br>
每个线程，拥有自己独立的：栈、程序计数器<br>
多个线程，共享同一个进程中的结构：方法区、堆。</p>
<p>二、并行与并发</p>
<ol>
<li>
<p>单核CPU与多核CPU的理解<br>
单核CPU，其实是一种假的多线程，因为在一个时间单元内，也只能执行一个线程的任务。例如：虽然有多车道，但是收费站只有一个工作人员在收费，只有收了费才能通过，那么CPU就好比收费人员。如果某个人不想交钱，那么收费人员可以把他“挂起”（晾着他，等他想通了，准备好了钱，再去收费。）但是因为CPU时间单元特别短，因此感觉不出来。<br>
如果是多核的话，才能更好的发挥多线程的效率。（现在的服务器都是多核的）<br>
一个Java应用程序java.exe，其实至少三个线程：main()主线程，gc()垃圾回收线程，异常处理线程。当然如果发生异常，会影响主线程。</p>
</li>
<li>
<p>并行与并发的理解<br>
并行：多个CPU同时执行多个任务。比如：多个人同时做不同的事。<br>
并发：一个CPU(采用时间片)同时执行多个任务。比如：秒杀、多个人做同一件事</p>
</li>
</ol>
<p>三、创建多线程的两种方式（JDK5.0之前）<br>
方式一：继承Thread类的方式：</p>
<ul>
<li>
<ol>
<li>创建一个继承于Thread类的子类</li>
</ol>
</li>
<li>
<ol start="2">
<li>重写Thread类的run() --&gt; 将此线程执行的操作声明在run()中</li>
</ol>
</li>
<li>
<ol start="3">
<li>创建Thread类的子类的对象</li>
</ol>
</li>
<li>
<ol start="4">
<li>通过此对象调用start()：①启动当前线程 ② 调用当前线程的run()</li>
</ol>
</li>
</ul>
<p>说明两个问题：<br>
问题一：我们启动一个线程，必须调用start()，不能调用run()的方式启动线程。<br>
问题二：如果再启动一个线程，必须重新创建一个Thread子类的对象，调用此对象的start().</p>
<p>方式二：实现Runnable接口的方式：</p>
<ul>
<li>
<ol>
<li>创建一个实现了Runnable接口的类</li>
</ol>
</li>
<li>
<ol start="2">
<li>实现类去实现Runnable中的抽象方法：run()</li>
</ol>
</li>
<li>
<ol start="3">
<li>创建实现类的对象</li>
</ol>
</li>
<li>
<ol start="4">
<li>将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象</li>
</ol>
</li>
<li>
<ol start="5">
<li>通过Thread类的对象调用start()</li>
</ol>
</li>
</ul>
<p>两种方式的对比：</p>
<ul>
<li>开发中：优先选择：实现Runnable接口的方式</li>
<li>原因：1. 实现的方式没类的单继承性的局限性</li>
<li>
<pre><code> 2. 实现的方式更适合来处理多个线程共享数据的情况。
</code></pre>
</li>
<li></li>
<li>联系：public class Thread implements Runnable</li>
<li>相同点：两种方式都需要重写run(),将线程要执行的逻辑声明在run()中。<br>
目前两种方式，要想启动线程，都是调用的Thread类中的start()。</li>
</ul>
<p>四、Thread类中的常用方法<br>
Thread类中的常用的方法:</p>
<ul>
<li>
<ol>
<li>start():启动当前线程；调用当前线程的run()</li>
</ol>
</li>
<li>
<ol start="2">
<li>run(): 通常需要重写Thread类中的此方法，将创建的线程要执行的操作声明在此方法中</li>
</ol>
</li>
<li>
<ol start="3">
<li>currentThread():静态方法，返回执行当前代码的线程</li>
</ol>
</li>
<li>
<ol start="4">
<li>getName():获取当前线程的名字</li>
</ol>
</li>
<li>
<ol start="5">
<li>setName():设置当前线程的名字</li>
</ol>
</li>
<li>
<ol start="6">
<li>yield():释放当前cpu的执行权</li>
</ol>
</li>
<li>
<ol start="7">
<li>join():在线程a中调用线程b的join(),此时线程a就进入阻塞状态，直到线程b完全执行完以后，线程a才结束阻塞状态。</li>
</ol>
</li>
<li>
<ol start="8">
<li>stop():已过时。当执行此方法时，强制结束当前线程。</li>
</ol>
</li>
<li>
<ol start="9">
<li>sleep(long millitime):让当前线程“睡眠”指定的millitime毫秒。在指定的millitime毫秒时间内，当前线程是阻塞状态。</li>
</ol>
</li>
<li>
<ol start="10">
<li>isAlive():判断当前线程是否存活</li>
</ol>
</li>
<li>
<p>线程的优先级：</p>
</li>
<li>
<ol>
<li></li>
</ol>
</li>
<li>
<p>MAX_PRIORITY：10</p>
</li>
<li>
<p>MIN _PRIORITY：1</p>
</li>
<li>
<p>NORM_PRIORITY：5  --&gt;默认优先级</p>
</li>
<li>
<p>2.如何获取和设置当前线程的优先级：</p>
</li>
<li>
<p>getPriority():获取线程的优先级</p>
</li>
<li>
<p>setPriority(int p):设置线程的优先级</p>
</li>
<li></li>
<li>
<p>说明：高优先级的线程要抢占低优先级线程cpu的执行权。但是只是从概率上讲，高优先级的线程高概率的情况下被执行。并不意味着只当高优先级的线程执行完以后，低优先级的线程才执行。</p>
</li>
</ul>
<p>线程通信：wait() / notify() / notifyAll() :此三个方法定义在Object类中的。</p>
<p>补充：线程的分类<br>
一种是守护线程，一种是用户线程。</p>
<p>五、Thread的生命周期<br>
<img src="https://fantaixi.github.io/post-images/1588779515021.png" alt="" loading="lazy"><br>
说明：<br>
1.生命周期关注两个概念：状态、相应的方法<br>
2.关注：状态a--&gt;状态b:哪些方法执行了（回调方法）<br>
某个方法主动调用：状态a--&gt;状态b<br>
3.阻塞：临时状态，不可以作为最终状态<br>
死亡：最终状态。</p>
<p>六、线程的同步机制<br>
1.背景<br>
例子：创建个窗口卖票，总票数为100张.使用实现Runnable接口的方式<br>
*</p>
<ul>
<li>1.问题：卖票过程中，出现了重票、错票 --&gt;出现了线程的安全问题</li>
<li>2.问题出现的原因：当某个线程操作车票的过程中，尚未操作完成时，其他线程参与进来，也操作车票。</li>
<li>3.如何解决：当一个线程a在操作ticket的时候，其他线程不能参与进来。直到线程a操作完ticket时，其他线程才可以开始操作ticket。这种情况即使线程a出现了阻塞，也不能被改变。</li>
</ul>
<p>2.Java解决方案：同步机制<br>
在Java中，我们通过同步机制，来解决线程的安全问题。</p>
<p>方式一：同步代码块<br>
*</p>
<ul>
<li>
<p>synchronized(同步监视器){</p>
</li>
<li>
<pre><code> //需要被同步的代码
</code></pre>
</li>
<li></li>
<li>
<p>}</p>
</li>
<li>
<p>说明：1.操作共享数据的代码，即为需要被同步的代码。  --&gt;不能包含代码多了，也不能包含代码少了。</p>
</li>
<li>
<pre><code>  2.共享数据：多个线程共同操作的变量。比如：ticket就是共享数据。
</code></pre>
</li>
<li>
<pre><code>  3.同步监视器，俗称：锁。任何一个类的对象，都可以充当锁。
</code></pre>
</li>
<li>
<pre><code>     要求：多个线程必须要共用同一把锁。
</code></pre>
</li>
<li></li>
<li>
<p>补充：在实现Runnable接口创建多线程的方式中，我们可以考虑使用this充当同步监视器。<br>
在继承Thread类创建多线程的方式中，慎用this充当同步监视器，考虑使用当前类充当同步监视器。</p>
</li>
<li>
<p>方式二：同步方法</p>
</li>
<li>
<pre><code>如果操作共享数据的代码完整的声明在一个方法中，我们不妨将此方法声明同步的。
</code></pre>
</li>
<li>
<p>关于同步方法的总结：</p>
</li>
<li>
<ol>
<li>同步方法仍然涉及到同步监视器，只是不需要我们显式的声明。</li>
</ol>
</li>
<li>
<ol start="2">
<li>非静态的同步方法，同步监视器是：this</li>
</ol>
</li>
<li>
<pre><code>静态的同步方法，同步监视器是：当前类本身
</code></pre>
<p>方式三：Lock锁  --- JDK5.0新增</p>
</li>
<li></li>
<li>
<ol>
<li>面试题：synchronized 与 Lock的异同？</li>
</ol>
</li>
<li>
<p>相同：二者都可以解决线程安全问题</p>
</li>
<li>
<p>不同：synchronized机制在执行完相应的同步代码以后，自动的释放同步监视器</p>
</li>
<li>
<pre><code>   Lock需要手动的启动同步（lock()，同时结束同步也需要手动的实现（unlock()）
</code></pre>
</li>
</ul>
<p>使用的优先顺序：</p>
<ul>
<li>Lock ---&gt; 同步代码块（已经进入了方法体，分配了相应资源 ) ---&gt; 同步方法（在方法体之外)<br>
3.利弊<br>
同步的方式，解决了线程的安全问题。---好处<br>
操作同步代码时，只能一个线程参与，其他线程等待。相当于是一个单线程的过程，效率低。</li>
</ul>
<p>补充：线程安全的单例模式（懒汉式）、死锁问题</p>
<p>使用同步机制将单例模式中的懒汉式改写为线程安全的。<br>
class Bank{<br>
private Bank(){<br>
}<br>
private static Bank instance = null;<br>
public static Bank getInstance(){<br>
//方式一：效率稍差<br>
//        synchronized (Bank.class) {<br>
//            if(instance == null){<br>
//<br>
//                instance = new Bank();<br>
//            }<br>
//            return instance;<br>
//        }<br>
//方式二：效率更高<br>
if(instance == null){<br>
synchronized (Bank.class) {<br>
if(instance == null){<br>
instance = new Bank();<br>
}<br>
}<br>
}<br>
return instance;<br>
}<br>
}</p>
<p>死锁：<br>
1.死锁的理解：<br>
不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃自己需要的同步资源，就形成了线程的死锁</p>
<p>2.说明：</p>
<ul>
<li>1出现死锁后，不会出现异常，不会出现提示，只是所的线程都处于阻塞状态，无法继续</li>
<li>2我们使用同步时，要避免出现死锁。<br>
3.举例：<br>
public static void main(String[] args) {<br>
StringBuffer s1 = new StringBuffer();<br>
StringBuffer s2 = new StringBuffer();<br>
new Thread(){<br>
@Override<br>
public void run() {<br>
synchronized (s1){<br>
s1.append(&quot;a&quot;);<br>
s2.append(&quot;1&quot;);<br>
try {<br>
Thread.sleep(100);<br>
} catch (InterruptedException e) {<br>
e.printStackTrace();<br>
}<br>
synchronized (s2){<br>
s1.append(&quot;b&quot;);<br>
s2.append(&quot;2&quot;);<br>
System.out.println(s1);<br>
System.out.println(s2);<br>
}<br>
}<br>
}<br>
}.start();<br>
new Thread(new Runnable() {<br>
@Override<br>
public void run() {<br>
synchronized (s2){<br>
s1.append(&quot;c&quot;);<br>
s2.append(&quot;3&quot;);<br>
try {<br>
Thread.sleep(100);<br>
} catch (InterruptedException e) {<br>
e.printStackTrace();<br>
}<br>
synchronized (s1){<br>
s1.append(&quot;d&quot;);<br>
s2.append(&quot;4&quot;);<br>
System.out.println(s1);<br>
System.out.println(s2);<br>
}<br>
}<br>
}<br>
}).start();<br>
}</li>
</ul>
<p>七、线程通信<br>
1.线程通信涉及到的三个方法：</p>
<ul>
<li>wait():一旦执行此方法，当前线程就进入阻塞状态，并释放同步监视器。</li>
<li>notify():一旦执行此方法，就会唤醒被wait的一个线程。如果有多个线程被wait，就唤醒优先级高的那个。</li>
<li>notifyAll():一旦执行此方法，就会唤醒所有被wait的线程。</li>
</ul>
<p>2.说明：</p>
<ul>
<li>1.wait()，notify()，notifyAll()三个方法必须使用在同步代码块或同步方法中。</li>
<li>2.wait()，notify()，notifyAll()三个方法的调用者必须是同步代码块或同步方法中的同步监视器。</li>
<li>否则，会出现IllegalMonitorStateException异常</li>
<li>3.wait()，notify()，notifyAll()三个方法是定义在java.lang.Object类中。<br>
3.面试题：<br>
面试题：sleep() 和 wait()的异同？</li>
<li>1.相同点：一旦执行方法，都可以使得当前的线程进入阻塞状态。</li>
<li>2.不同点：1）两个方法声明的位置不同：Thread类中声明sleep() , Object类中声明wait()</li>
<li>
<pre><code>     2）调用的要求不同：sleep()可以在任何需要的场景下调用。 wait()必须使用在同步代码块或同步方法中
</code></pre>
</li>
<li>
<pre><code>     3）关于是否释放同步监视器：如果两个方法都使用在同步代码块或同步方法中，sleep()不会释放锁，wait()会释放锁。
</code></pre>
</li>
</ul>
<ol start="4">
<li></li>
</ol>
<p>小结释放锁的操作：<br>
<img src="https://fantaixi.github.io/post-images/1588786120077.png" alt="" loading="lazy"><br>
小结不会释放锁的操作：<br>
<img src="https://fantaixi.github.io/post-images/1588786147470.png" alt="" loading="lazy"></p>
<p>八、JDK5.0新增线程创建的方式<br>
1.新增方式一：实现Callable接口。 --- JDK 5.0新增<br>
//1.创建一个实现Callable的实现类<br>
class NumThread implements Callable{<br>
//2.实现call方法，将此线程需要执行的操作声明在call()中<br>
@Override<br>
public Object call() throws Exception {<br>
int sum = 0;<br>
for (int i = 1; i &lt;= 100; i++) {<br>
if(i % 2 == 0){<br>
System.out.println(i);<br>
sum += i;<br>
}<br>
}<br>
return sum;<br>
}<br>
}</p>
<p>public class ThreadNew {<br>
public static void main(String[] args) {<br>
//3.创建Callable接口实现类的对象<br>
NumThread numThread = new NumThread();<br>
//4.将此Callable接口实现类的对象作为传递到FutureTask构造器中，创建FutureTask的对象<br>
FutureTask futureTask = new FutureTask(numThread);<br>
//5.将FutureTask的对象作为参数传递到Thread类的构造器中，创建Thread对象，并调用start()<br>
new Thread(futureTask).start();</p>
<pre><code>    try {
        //6.获取Callable中call方法的返回值
        //get()返回值即为FutureTask构造器参数Callable实现类重写的call()的返回值。
        Object sum = futureTask.get();
        System.out.println(&quot;总和为：&quot; + sum);
    } catch (InterruptedException e) {
        e.printStackTrace();
    } catch (ExecutionException e) {
        e.printStackTrace();
    }
}
</code></pre>
<p>}</p>
<p>说明：</p>
<ul>
<li>如何理解实现Callable接口的方式创建多线程比实现Runnable接口创建多线程方式强大？</li>
<li>
<ol>
<li>call()可以返回值的。</li>
</ol>
</li>
<li>
<ol start="2">
<li>call()可以抛出异常，被外面的操作捕获，获取异常的信息</li>
</ol>
</li>
<li>
<ol start="3">
<li>Callable是支持泛型的</li>
</ol>
</li>
</ul>
<p>2.新增方式二：使用线程池<br>
class NumberThread implements Runnable{<br>
@Override<br>
public void run() {<br>
for(int i = 0;i &lt;= 100;i++){<br>
if(i % 2 == 0){<br>
System.out.println(Thread.currentThread().getName() + &quot;: &quot; + i);<br>
}<br>
}<br>
}<br>
}</p>
<p>class NumberThread1 implements Runnable{<br>
@Override<br>
public void run() {<br>
for(int i = 0;i &lt;= 100;i++){<br>
if(i % 2 != 0){<br>
System.out.println(Thread.currentThread().getName() + &quot;: &quot; + i);<br>
}<br>
}<br>
}<br>
}</p>
<p>public class ThreadPool {<br>
public static void main(String[] args) {<br>
//1. 提供指定线程数量的线程池<br>
ExecutorService service = Executors.newFixedThreadPool(10);<br>
ThreadPoolExecutor service1 = (ThreadPoolExecutor) service;<br>
//设置线程池的属性<br>
//        System.out.println(service.getClass());<br>
//        service1.setCorePoolSize(15);<br>
//        service1.setKeepAliveTime();</p>
<pre><code>    //2.执行指定的线程的操作。需要提供实现Runnable接口或Callable接口实现类的对象
    service.execute(new NumberThread());//适合适用于Runnable
    service.execute(new NumberThread1());//适合适用于Runnable
</code></pre>
<p>//        service.submit(Callable callable);//适合使用于Callable<br>
//3.关闭连接池<br>
service.shutdown();<br>
}<br>
}<br>
说明：</p>
<ul>
<li>好处：</li>
<li>1.提高响应速度（减少了创建新线程的时间）</li>
<li>2.降低资源消耗（重复利用线程池中线程，不需要每次都创建）</li>
<li>3.便于线程管理</li>
<li>
<pre><code> corePoolSize：核心池的大小
</code></pre>
</li>
<li>
<pre><code> maximumPoolSize：最大线程数
</code></pre>
</li>
<li>
<pre><code> keepAliveTime：线程没任务时最多保持多长时间后会终止
</code></pre>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[11 Java异常处理]]></title>
        <id>https://fantaixi.github.io/post/11-java-yi-chang-chu-li/</id>
        <link href="https://fantaixi.github.io/post/11-java-yi-chang-chu-li/">
        </link>
        <updated>2020-05-06T15:04:08.000Z</updated>
        <content type="html"><![CDATA[<p>一、异常</p>
<ol>
<li>异常的体系结构</li>
</ol>
<ul>
<li>java.lang.Throwable</li>
<li>
<pre><code> |-----java.lang.Error:一般不编写针对性的代码进行处理。
</code></pre>
</li>
<li>
<pre><code> |-----java.lang.Exception:可以进行异常的处理
</code></pre>
</li>
<li>
<pre><code> 	|------编译时异常(checked)
</code></pre>
</li>
<li>
<pre><code> 			|-----IOException
</code></pre>
</li>
<li>
<pre><code> 				|-----FileNotFoundException
</code></pre>
</li>
<li>
<pre><code> 			|-----ClassNotFoundException
</code></pre>
</li>
<li>
<pre><code> 	|------运行时异常(unchecked,RuntimeException)
</code></pre>
</li>
<li>
<pre><code> 			|-----NullPointerException
</code></pre>
</li>
<li>
<pre><code> 			|-----ArrayIndexOutOfBoundsException
</code></pre>
</li>
<li>
<pre><code> 			|-----ClassCastException
</code></pre>
</li>
<li>
<pre><code> 			|-----NumberFormatException
</code></pre>
</li>
<li>
<pre><code> 			|-----InputMismatchException
</code></pre>
</li>
<li>
<pre><code> 			|-----ArithmeticException
</code></pre>
</li>
</ul>
<p>2.从程序执行过程，看编译时异常和运行时异常<br>
<img src="https://fantaixi.github.io/post-images/1588777569253.png" alt="" loading="lazy"><br>
编译时异常：执行javac.exe命名时，可能出现的异常<br>
运行时异常：执行java.exe命名时，出现的异常</p>
<p>3.常见的异常类型，请举例说明：<br>
//<strong><strong><strong><strong><strong><strong><strong><strong><strong>以下是运行时异常</strong></strong></strong></strong></strong></strong></strong></strong></strong>*********<br>
//ArithmeticException<br>
@Test<br>
public void test6(){<br>
int a = 10;<br>
int b = 0;<br>
System.out.println(a / b);<br>
}<br>
//InputMismatchException<br>
@Test<br>
public void test5(){<br>
Scanner scanner = new Scanner(System.in);<br>
int score = scanner.nextInt();<br>
System.out.println(score);	<br>
scanner.close();<br>
}<br>
//NumberFormatException<br>
@Test<br>
public void test4(){<br>
String str = &quot;123&quot;;<br>
str = &quot;abc&quot;;<br>
int num = Integer.parseInt(str);	<br>
}<br>
//ClassCastException<br>
@Test<br>
public void test3(){<br>
Object obj = new Date();<br>
String str = (String)obj;<br>
}<br>
//IndexOutOfBoundsException<br>
@Test<br>
public void test2(){<br>
//ArrayIndexOutOfBoundsException<br>
//		int[] arr = new int[10];<br>
//		System.out.println(arr[10]);<br>
//StringIndexOutOfBoundsException<br>
String str = &quot;abc&quot;;<br>
System.out.println(str.charAt(3));<br>
}<br>
//NullPointerException<br>
@Test<br>
public void test1(){	<br>
//		int[] arr = null;<br>
//		System.out.println(arr[3]);	<br>
String str = &quot;abc&quot;;<br>
str = null;<br>
System.out.println(str.charAt(0));	<br>
}<br>
//<strong><strong><strong><strong><strong><strong><strong><strong><strong>以下是编译时异常</strong></strong></strong></strong></strong></strong></strong></strong></strong>*********<br>
@Test<br>
public void test7(){<br>
//		File file = new File(&quot;hello.txt&quot;);<br>
//		FileInputStream fis = new FileInputStream(file);<br>
//		<br>
//		int data = fis.read();<br>
//		while(data != -1){<br>
//			System.out.print((char)data);<br>
//			data = fis.read();<br>
//		}<br>
//		<br>
//		fis.close();	<br>
}</p>
<p>二、异常的处理<br>
1.java异常处理的抓抛模型<br>
过程一：&quot;抛&quot;：程序在正常执行的过程中，一旦出现异常，就会在异常代码处生成一个对应异常类的对象。</p>
<ul>
<li>
<pre><code>      并将此对象抛出。
</code></pre>
</li>
<li>
<pre><code>      一旦抛出对象以后，其后的代码就不再执行。
</code></pre>
</li>
<li></li>
<li>
<pre><code> 关于异常对象的产生：① 系统自动生成的异常对象
</code></pre>
</li>
<li>
<pre><code> 			     ② 手动的生成一个异常对象，并抛出（throw）
</code></pre>
</li>
<li></li>
</ul>
<p>过程二：&quot;抓&quot;：可以理解为异常的处理方式：① try-catch-finally  ② throws</p>
<p>2.异常处理方式一：try-catch-finally<br>
2.1 使用说明：<br>
try{</p>
<ul>
<li>
<pre><code> //可能出现异常的代码
</code></pre>
</li>
<li></li>
<li>}catch(异常类型1 变量名1){</li>
<li>
<pre><code> //处理异常的方式1
</code></pre>
</li>
<li>}catch(异常类型2 变量名2){</li>
<li>
<pre><code> //处理异常的方式2
</code></pre>
</li>
<li>}catch(异常类型3 变量名3){</li>
<li>
<pre><code> //处理异常的方式3
</code></pre>
</li>
<li>}</li>
<li>....</li>
<li>finally{</li>
<li>
<pre><code> //一定会执行的代码
</code></pre>
</li>
<li>}</li>
<li></li>
<li>说明：</li>
<li>
<ol>
<li>finally是可的。</li>
</ol>
</li>
<li>
<ol start="2">
<li>使用try将可能出现异常代码包装起来，在执行过程中，一旦出现异常，就会生成一个对应异常类的对象，根据此对象的类型，去catch中进行匹配</li>
</ol>
</li>
<li>
<ol start="3">
<li>一旦try中的异常对象匹配到某一个catch时，就进入catch中进行异常的处理。一旦处理完成，就跳出当前的try-catch结构（在没写finally的情况。继续执行其后的代码</li>
</ol>
</li>
<li>
<ol start="4">
<li>catch中的异常类型如果没子父类关系，则谁声明在上，谁声明在下无所谓。</li>
</ol>
</li>
<li>catch中的异常类型如果满足子父类关系，则要求子类一定声明在父类的上面。否则，报错</li>
<li>
<ol start="5">
<li>常用的异常对象处理的方式： ① String  getMessage()    ② printStackTrace()</li>
</ol>
</li>
<li>
<ol start="6">
<li>在try结构中声明的变量，再出了try结构以后，就不能再被调用</li>
</ol>
</li>
<li>
<ol start="7">
<li>try-catch-finally结构可以嵌套</li>
</ol>
</li>
</ul>
<p>总结：如何看待代码中的编译时异常和运行时异常？</p>
<ul>
<li>体会1：使用try-catch-finally处理编译时异常，是得程序在编译时就不再报错，但是运行时仍可能报错。相当于我们使用try-catch-finally将一个编译时可能出现的异常，延迟到运行时出现。</li>
<li></li>
<li>体会2：开发中，由于运行时异常比较常见，所以我们通常就不针对运行时异常编写try-catch-finally了。针对于编译时异常，我们说一定要考虑异常的处理。<br>
2.2：finally的再说明：</li>
<li>1.finally是可省略的</li>
<li></li>
<li>2.finally中声明的是一定会被执行的代码。即使catch中又出现异常了，try中return语句，catch中return语句等情况。</li>
<li></li>
<li>3.像数据库连接、输入输出流、网络编程Socket等资源，JVM是不能自动的回收的，我们需要自己手动的进行资源的释放。此时的资源释放，就需要声明在finally中。</li>
</ul>
<p>2.3：[面试题]<br>
final、finally、finalize三者的区别？<br>
类似：<br>
throw 和 throws<br>
Collection 和 Collections<br>
String 、StringBuffer、StringBuilder<br>
ArrayList 、 LinkedList<br>
HashMap 、LinkedHashMap<br>
重写、重载</p>
<p>结构不相似的：<br>
抽象类、接口<br>
== 、 equals()<br>
sleep()、wait()</p>
<p>3.异常处理方式二：<br>
&quot;throws + 异常类型&quot;写在方法的声明处。指明此方法执行时，可能会抛出的异常类型。<br>
一旦当方法体执行时，出现异常，仍会在异常代码处生成一个异常类的对象，此对象满足throws后异常类型时，就会被抛出。异常代码后续的代码，就不再执行！</p>
<ol start="4">
<li>
<p>对比两种处理方式<br>
try-catch-finally:真正的将异常给处理掉了。<br>
throws的方式只是将异常抛给了方法的调用者。并没真正将异常处理掉。</p>
</li>
<li>
<p>体会开发中应该如何选择两种处理方式？</p>
</li>
</ol>
<ul>
<li>5.1 如果父类中被重写的方法没throws方式处理异常，则子类重写的方法也不能使用throws，意味着如果子类重写的方法中有异常，必须使用try-catch-finally方式处理。</li>
<li>5.2 执行的方法a中，先后又调用了另外的几个方法，这几个方法是递进关系执行的。我们建议这几个方法使用throws的方式进行处理。而执行的方法a可以考虑使用try-catch-finally方式进行处理。</li>
</ul>
<p>补充：<br>
方法重写的规则之一：<br>
子类重写的方法抛出的异常类型不大于父类被重写的方法抛出的异常类型</p>
<p>三、手动抛出异常对象<br>
1.使用说明<br>
在程序执行中，除了自动抛出异常对象的情况之外，我们还可以手动的throw一个异常类的对象。</p>
<p>2.[面试题]<br>
throw 和  throws区别：<br>
throw 表示抛出一个异常类的对象，生成异常对象的过程。声明在方法体内。<br>
throws 属于异常处理的一种方式，声明在方法的声明处。</p>
<p>3.典型例题<br>
class Student{	<br>
private int id;<br>
public void regist(int id) throws Exception {<br>
if(id &gt; 0){<br>
this.id = id;<br>
}else{<br>
//手动抛出异常对象<br>
//			throw new RuntimeException(&quot;您输入的数据非法！&quot;);<br>
//			throw new Exception(&quot;您输入的数据非法！&quot;);<br>
throw new MyException(&quot;不能输入负数&quot;);<br>
}		<br>
}<br>
@Override<br>
public String toString() {<br>
return &quot;Student [id=&quot; + id + &quot;]&quot;;<br>
}<br>
}</p>
<p>四、自定义异常类<br>
如何自定义一个异常类？</p>
<ul>
<li>如何自定义异常类？</li>
<li>
<ol>
<li>继承于现的异常结构：RuntimeException 、Exception</li>
</ol>
</li>
<li>
<ol start="2">
<li>提供全局常量：serialVersionUID</li>
</ol>
</li>
<li>
<ol start="3">
<li>提供重载的构造器</li>
</ol>
</li>
</ul>
<p>public class MyException extends Exception{<br>
static final long serialVersionUID = -7034897193246939L;<br>
public MyException(){	<br>
}<br>
public MyException(String msg){<br>
super(msg);<br>
}<br>
}</p>
]]></content>
    </entry>
</feed>